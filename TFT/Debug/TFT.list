
TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f14  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  08005020  08005020  00006020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057f0  080057f0  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080057f0  080057f0  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057f0  080057f0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080057f0  080057f0  000067f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080057f8  080057f8  000067f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005800  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  0800580c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  0800580c  000070d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204be  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e6  00000000  00000000  000274f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002a8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e5  00000000  00000000  0002b438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a939  00000000  00000000  0002bd1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106fd  00000000  00000000  00046656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091cbd  00000000  00000000  00056d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8a10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ecc  00000000  00000000  000e8a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000eb920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005008 	.word	0x08005008

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08005008 	.word	0x08005008

0800014c <_ZN12Adafruit_GFX9setCursorEss>:
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
 8000158:	4613      	mov	r3, r2
 800015a:	803b      	strh	r3, [r7, #0]
    cursor_x = x;
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	887a      	ldrh	r2, [r7, #2]
 8000160:	819a      	strh	r2, [r3, #12]
    cursor_y = y;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	883a      	ldrh	r2, [r7, #0]
 8000166:	81da      	strh	r2, [r3, #14]
  }
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr

08000172 <_ZN12Adafruit_GFX12setTextColorEt>:
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 8000172:	b480      	push	{r7}
 8000174:	b083      	sub	sp, #12
 8000176:	af00      	add	r7, sp, #0
 8000178:	6078      	str	r0, [r7, #4]
 800017a:	460b      	mov	r3, r1
 800017c:	807b      	strh	r3, [r7, #2]
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	887a      	ldrh	r2, [r7, #2]
 8000182:	825a      	strh	r2, [r3, #18]
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	8a5a      	ldrh	r2, [r3, #18]
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	821a      	strh	r2, [r3, #16]
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr

08000196 <_ZNK12Adafruit_GFX5widthEv>:
  /*!
    @brief      Get width of the display, accounting for current rotation
    @returns    Width in pixels
  */
  /************************************************************************/
  int16_t width(void) const { return _width; };
 8000196:	b480      	push	{r7}
 8000198:	b083      	sub	sp, #12
 800019a:	af00      	add	r7, sp, #0
 800019c:	6078      	str	r0, [r7, #4]
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80001a4:	4618      	mov	r0, r3
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <_ZNK12Adafruit_GFX6heightEv>:
  /*!
    @brief      Get height of the display, accounting for current rotation
    @returns    Height in pixels
  */
  /************************************************************************/
  int16_t height(void) const { return _height; }
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80001bc:	4618      	mov	r0, r3
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <_Z18pgm_read_glyph_ptrPK7GFXfonth>:
#define pgm_read_pointer(addr) ((void *)pgm_read_dword(addr))
#else
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
 80001c6:	b480      	push	{r7}
 80001c8:	b083      	sub	sp, #12
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	460b      	mov	r3, r1
 80001d0:	70fb      	strb	r3, [r7, #3]
#else
  // expression in __AVR__ section may generate "dereferencing type-punned
  // pointer will break strict-aliasing rules" warning In fact, on other
  // platforms (such as STM32) there is no need to do this pointer magic as
  // program memory may be read in a usual way So expression may be simplified
  return gfxFont->glyph + c;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	685a      	ldr	r2, [r3, #4]
 80001d6:	78fb      	ldrb	r3, [r7, #3]
 80001d8:	00db      	lsls	r3, r3, #3
 80001da:	4413      	add	r3, r2
#endif //__AVR__
}
 80001dc:	4618      	mov	r0, r3
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr

080001e6 <_Z19pgm_read_bitmap_ptrPK7GFXfont>:

inline uint8_t *pgm_read_bitmap_ptr(const GFXfont *gfxFont) {
 80001e6:	b480      	push	{r7}
 80001e8:	b083      	sub	sp, #12
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	6078      	str	r0, [r7, #4]
#else
  // expression in __AVR__ section generates "dereferencing type-punned pointer
  // will break strict-aliasing rules" warning In fact, on other platforms (such
  // as STM32) there is no need to do this pointer magic as program memory may
  // be read in a usual way So expression may be simplified
  return gfxFont->bitmap;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	681b      	ldr	r3, [r3, #0]
#endif //__AVR__
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr

080001fc <_ZN12Adafruit_GFXC1Ess>:
   superclass
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	460b      	mov	r3, r1
 8000206:	807b      	strh	r3, [r7, #2]
 8000208:	4613      	mov	r3, r2
 800020a:	803b      	strh	r3, [r7, #0]
 800020c:	4a1d      	ldr	r2, [pc, #116]	@ (8000284 <_ZN12Adafruit_GFXC1Ess+0x88>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	887a      	ldrh	r2, [r7, #2]
 8000216:	809a      	strh	r2, [r3, #4]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	883a      	ldrh	r2, [r7, #0]
 800021c:	80da      	strh	r2, [r3, #6]
  _width = WIDTH;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	811a      	strh	r2, [r3, #8]
  _height = HEIGHT;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	815a      	strh	r2, [r3, #10]
  rotation = 0;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2200      	movs	r2, #0
 8000236:	759a      	strb	r2, [r3, #22]
  cursor_y = cursor_x = 0;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2200      	movs	r2, #0
 800023c:	819a      	strh	r2, [r3, #12]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	81da      	strh	r2, [r3, #14]
  textsize_x = textsize_y = 1;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2201      	movs	r2, #1
 800024c:	755a      	strb	r2, [r3, #21]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	7d5a      	ldrb	r2, [r3, #21]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	751a      	strb	r2, [r3, #20]
  textcolor = textbgcolor = 0xFFFF;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800025c:	825a      	strh	r2, [r3, #18]
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	8a5a      	ldrh	r2, [r3, #18]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	821a      	strh	r2, [r3, #16]
  wrap = true;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2201      	movs	r2, #1
 800026a:	75da      	strb	r2, [r3, #23]
  _cp437 = false;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2200      	movs	r2, #0
 8000270:	761a      	strb	r2, [r3, #24]
  gfxFont = NULL;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2200      	movs	r2, #0
 8000276:	61da      	str	r2, [r3, #28]
}
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4618      	mov	r0, r3
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	08005698 	.word	0x08005698

08000288 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
 8000288:	b590      	push	{r4, r7, lr}
 800028a:	b08b      	sub	sp, #44	@ 0x2c
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	4608      	mov	r0, r1
 8000292:	4611      	mov	r1, r2
 8000294:	461a      	mov	r2, r3
 8000296:	4603      	mov	r3, r0
 8000298:	817b      	strh	r3, [r7, #10]
 800029a:	460b      	mov	r3, r1
 800029c:	813b      	strh	r3, [r7, #8]
 800029e:	4613      	mov	r3, r2
 80002a0:	80fb      	strh	r3, [r7, #6]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80002a2:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 80002a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80002aa:	1ad3      	subs	r3, r2, r3
 80002ac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80002b0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80002b4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80002b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80002bc:	1acb      	subs	r3, r1, r3
 80002be:	2b00      	cmp	r3, #0
 80002c0:	bfb8      	it	lt
 80002c2:	425b      	neglt	r3, r3
 80002c4:	429a      	cmp	r2, r3
 80002c6:	bfcc      	ite	gt
 80002c8:	2301      	movgt	r3, #1
 80002ca:	2300      	movle	r3, #0
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (steep) {
 80002d0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d00b      	beq.n	80002f0 <_ZN12Adafruit_GFX9writeLineEsssst+0x68>
    _swap_int16_t(x0, y0);
 80002d8:	897b      	ldrh	r3, [r7, #10]
 80002da:	843b      	strh	r3, [r7, #32]
 80002dc:	893b      	ldrh	r3, [r7, #8]
 80002de:	817b      	strh	r3, [r7, #10]
 80002e0:	8c3b      	ldrh	r3, [r7, #32]
 80002e2:	813b      	strh	r3, [r7, #8]
    _swap_int16_t(x1, y1);
 80002e4:	88fb      	ldrh	r3, [r7, #6]
 80002e6:	83fb      	strh	r3, [r7, #30]
 80002e8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80002ea:	80fb      	strh	r3, [r7, #6]
 80002ec:	8bfb      	ldrh	r3, [r7, #30]
 80002ee:	873b      	strh	r3, [r7, #56]	@ 0x38
  }

  if (x0 > x1) {
 80002f0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80002f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	dd0b      	ble.n	8000314 <_ZN12Adafruit_GFX9writeLineEsssst+0x8c>
    _swap_int16_t(x0, x1);
 80002fc:	897b      	ldrh	r3, [r7, #10]
 80002fe:	83bb      	strh	r3, [r7, #28]
 8000300:	88fb      	ldrh	r3, [r7, #6]
 8000302:	817b      	strh	r3, [r7, #10]
 8000304:	8bbb      	ldrh	r3, [r7, #28]
 8000306:	80fb      	strh	r3, [r7, #6]
    _swap_int16_t(y0, y1);
 8000308:	893b      	ldrh	r3, [r7, #8]
 800030a:	837b      	strh	r3, [r7, #26]
 800030c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800030e:	813b      	strh	r3, [r7, #8]
 8000310:	8b7b      	ldrh	r3, [r7, #26]
 8000312:	873b      	strh	r3, [r7, #56]	@ 0x38
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8000314:	88fa      	ldrh	r2, [r7, #6]
 8000316:	897b      	ldrh	r3, [r7, #10]
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	b29b      	uxth	r3, r3
 800031c:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 800031e:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 8000322:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	2b00      	cmp	r3, #0
 800032a:	bfb8      	it	lt
 800032c:	425b      	neglt	r3, r3
 800032e:	82fb      	strh	r3, [r7, #22]

  int16_t err = dx / 2;
 8000330:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000334:	0fda      	lsrs	r2, r3, #31
 8000336:	4413      	add	r3, r2
 8000338:	105b      	asrs	r3, r3, #1
 800033a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  int16_t ystep;

  if (y0 < y1) {
 800033c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000340:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8000344:	429a      	cmp	r2, r3
 8000346:	da02      	bge.n	800034e <_ZN12Adafruit_GFX9writeLineEsssst+0xc6>
    ystep = 1;
 8000348:	2301      	movs	r3, #1
 800034a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800034c:	e037      	b.n	80003be <_ZN12Adafruit_GFX9writeLineEsssst+0x136>
  } else {
    ystep = -1;
 800034e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000352:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  for (; x0 <= x1; x0++) {
 8000354:	e033      	b.n	80003be <_ZN12Adafruit_GFX9writeLineEsssst+0x136>
    if (steep) {
 8000356:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800035a:	2b00      	cmp	r3, #0
 800035c:	d00b      	beq.n	8000376 <_ZN12Adafruit_GFX9writeLineEsssst+0xee>
      writePixel(y0, x0, color);
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	3308      	adds	r3, #8
 8000364:	681c      	ldr	r4, [r3, #0]
 8000366:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000368:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800036c:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000370:	68f8      	ldr	r0, [r7, #12]
 8000372:	47a0      	blx	r4
 8000374:	e00a      	b.n	800038c <_ZN12Adafruit_GFX9writeLineEsssst+0x104>
    } else {
      writePixel(x0, y0, color);
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	3308      	adds	r3, #8
 800037c:	681c      	ldr	r4, [r3, #0]
 800037e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000380:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000384:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000388:	68f8      	ldr	r0, [r7, #12]
 800038a:	47a0      	blx	r4
    }
    err -= dy;
 800038c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800038e:	8afb      	ldrh	r3, [r7, #22]
 8000390:	1ad3      	subs	r3, r2, r3
 8000392:	b29b      	uxth	r3, r3
 8000394:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (err < 0) {
 8000396:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800039a:	2b00      	cmp	r3, #0
 800039c:	da09      	bge.n	80003b2 <_ZN12Adafruit_GFX9writeLineEsssst+0x12a>
      y0 += ystep;
 800039e:	893a      	ldrh	r2, [r7, #8]
 80003a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80003a2:	4413      	add	r3, r2
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	813b      	strh	r3, [r7, #8]
      err += dx;
 80003a8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80003aa:	8b3b      	ldrh	r3, [r7, #24]
 80003ac:	4413      	add	r3, r2
 80003ae:	b29b      	uxth	r3, r3
 80003b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  for (; x0 <= x1; x0++) {
 80003b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	3301      	adds	r3, #1
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	817b      	strh	r3, [r7, #10]
 80003be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80003c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	ddc5      	ble.n	8000356 <_ZN12Adafruit_GFX9writeLineEsssst+0xce>
    }
  }
}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	372c      	adds	r7, #44	@ 0x2c
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd90      	pop	{r4, r7, pc}

080003d4 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr

080003e6 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 80003e6:	b590      	push	{r4, r7, lr}
 80003e8:	b085      	sub	sp, #20
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	60f8      	str	r0, [r7, #12]
 80003ee:	4608      	mov	r0, r1
 80003f0:	4611      	mov	r1, r2
 80003f2:	461a      	mov	r2, r3
 80003f4:	4603      	mov	r3, r0
 80003f6:	817b      	strh	r3, [r7, #10]
 80003f8:	460b      	mov	r3, r1
 80003fa:	813b      	strh	r3, [r7, #8]
 80003fc:	4613      	mov	r3, r2
 80003fe:	80fb      	strh	r3, [r7, #6]
  drawPixel(x, y, color);
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	681c      	ldr	r4, [r3, #0]
 8000406:	88fb      	ldrh	r3, [r7, #6]
 8000408:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800040c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000410:	68f8      	ldr	r0, [r7, #12]
 8000412:	47a0      	blx	r4
}
 8000414:	bf00      	nop
 8000416:	3714      	adds	r7, #20
 8000418:	46bd      	mov	sp, r7
 800041a:	bd90      	pop	{r4, r7, pc}

0800041c <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b087      	sub	sp, #28
 8000420:	af02      	add	r7, sp, #8
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	4608      	mov	r0, r1
 8000426:	4611      	mov	r1, r2
 8000428:	461a      	mov	r2, r3
 800042a:	4603      	mov	r3, r0
 800042c:	817b      	strh	r3, [r7, #10]
 800042e:	460b      	mov	r3, r1
 8000430:	813b      	strh	r3, [r7, #8]
 8000432:	4613      	mov	r3, r2
 8000434:	80fb      	strh	r3, [r7, #6]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	3328      	adds	r3, #40	@ 0x28
 800043c:	681c      	ldr	r4, [r3, #0]
 800043e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000442:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000446:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800044a:	8c3b      	ldrh	r3, [r7, #32]
 800044c:	9300      	str	r3, [sp, #0]
 800044e:	4603      	mov	r3, r0
 8000450:	68f8      	ldr	r0, [r7, #12]
 8000452:	47a0      	blx	r4
}
 8000454:	bf00      	nop
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	bd90      	pop	{r4, r7, pc}

0800045c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b087      	sub	sp, #28
 8000460:	af02      	add	r7, sp, #8
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	4608      	mov	r0, r1
 8000466:	4611      	mov	r1, r2
 8000468:	461a      	mov	r2, r3
 800046a:	4603      	mov	r3, r0
 800046c:	817b      	strh	r3, [r7, #10]
 800046e:	460b      	mov	r3, r1
 8000470:	813b      	strh	r3, [r7, #8]
 8000472:	4613      	mov	r3, r2
 8000474:	80fb      	strh	r3, [r7, #6]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	332c      	adds	r3, #44	@ 0x2c
 800047c:	681c      	ldr	r4, [r3, #0]
 800047e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000482:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000486:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800048a:	8c3b      	ldrh	r3, [r7, #32]
 800048c:	9300      	str	r3, [sp, #0]
 800048e:	4603      	mov	r3, r0
 8000490:	68f8      	ldr	r0, [r7, #12]
 8000492:	47a0      	blx	r4
}
 8000494:	bf00      	nop
 8000496:	3714      	adds	r7, #20
 8000498:	46bd      	mov	sp, r7
 800049a:	bd90      	pop	{r4, r7, pc}

0800049c <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b087      	sub	sp, #28
 80004a0:	af02      	add	r7, sp, #8
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	4608      	mov	r0, r1
 80004a6:	4611      	mov	r1, r2
 80004a8:	461a      	mov	r2, r3
 80004aa:	4603      	mov	r3, r0
 80004ac:	817b      	strh	r3, [r7, #10]
 80004ae:	460b      	mov	r3, r1
 80004b0:	813b      	strh	r3, [r7, #8]
 80004b2:	4613      	mov	r3, r2
 80004b4:	80fb      	strh	r3, [r7, #6]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	3330      	adds	r3, #48	@ 0x30
 80004bc:	681c      	ldr	r4, [r3, #0]
 80004be:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80004c2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80004c6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80004ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80004d2:	9300      	str	r3, [sp, #0]
 80004d4:	4603      	mov	r3, r0
 80004d6:	68f8      	ldr	r0, [r7, #12]
 80004d8:	47a0      	blx	r4
}
 80004da:	bf00      	nop
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd90      	pop	{r4, r7, pc}

080004e2 <_ZN12Adafruit_GFX8endWriteEv>:
/*!
   @brief    End a display-writing routine, overwrite in subclasses if
   startWrite is defined!
*/
/**************************************************************************/
void Adafruit_GFX::endWrite() {}
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	4608      	mov	r0, r1
 80004fe:	4611      	mov	r1, r2
 8000500:	461a      	mov	r2, r3
 8000502:	4603      	mov	r3, r0
 8000504:	817b      	strh	r3, [r7, #10]
 8000506:	460b      	mov	r3, r1
 8000508:	813b      	strh	r3, [r7, #8]
 800050a:	4613      	mov	r3, r2
 800050c:	80fb      	strh	r3, [r7, #6]
  startWrite();
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	3304      	adds	r3, #4
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	68f8      	ldr	r0, [r7, #12]
 8000518:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	3318      	adds	r3, #24
 8000520:	681c      	ldr	r4, [r3, #0]
 8000522:	893a      	ldrh	r2, [r7, #8]
 8000524:	88fb      	ldrh	r3, [r7, #6]
 8000526:	4413      	add	r3, r2
 8000528:	b29b      	uxth	r3, r3
 800052a:	3b01      	subs	r3, #1
 800052c:	b29b      	uxth	r3, r3
 800052e:	b21b      	sxth	r3, r3
 8000530:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 8000534:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8000538:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800053c:	8c3a      	ldrh	r2, [r7, #32]
 800053e:	9201      	str	r2, [sp, #4]
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	462b      	mov	r3, r5
 8000544:	4602      	mov	r2, r0
 8000546:	68f8      	ldr	r0, [r7, #12]
 8000548:	47a0      	blx	r4
  endWrite();
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	331c      	adds	r3, #28
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	68f8      	ldr	r0, [r7, #12]
 8000554:	4798      	blx	r3
}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bdb0      	pop	{r4, r5, r7, pc}

0800055e <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
 800055e:	b590      	push	{r4, r7, lr}
 8000560:	b087      	sub	sp, #28
 8000562:	af02      	add	r7, sp, #8
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	4608      	mov	r0, r1
 8000568:	4611      	mov	r1, r2
 800056a:	461a      	mov	r2, r3
 800056c:	4603      	mov	r3, r0
 800056e:	817b      	strh	r3, [r7, #10]
 8000570:	460b      	mov	r3, r1
 8000572:	813b      	strh	r3, [r7, #8]
 8000574:	4613      	mov	r3, r2
 8000576:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3304      	adds	r3, #4
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	68f8      	ldr	r0, [r7, #12]
 8000582:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	3318      	adds	r3, #24
 800058a:	681c      	ldr	r4, [r3, #0]
 800058c:	897a      	ldrh	r2, [r7, #10]
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	4413      	add	r3, r2
 8000592:	b29b      	uxth	r3, r3
 8000594:	3b01      	subs	r3, #1
 8000596:	b29b      	uxth	r3, r3
 8000598:	b218      	sxth	r0, r3
 800059a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800059e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80005a2:	8c3b      	ldrh	r3, [r7, #32]
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	4603      	mov	r3, r0
 80005ae:	68f8      	ldr	r0, [r7, #12]
 80005b0:	47a0      	blx	r4
  endWrite();
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	331c      	adds	r3, #28
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	4798      	blx	r3
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd90      	pop	{r4, r7, pc}

080005c6 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 80005c6:	b590      	push	{r4, r7, lr}
 80005c8:	b089      	sub	sp, #36	@ 0x24
 80005ca:	af02      	add	r7, sp, #8
 80005cc:	60f8      	str	r0, [r7, #12]
 80005ce:	4608      	mov	r0, r1
 80005d0:	4611      	mov	r1, r2
 80005d2:	461a      	mov	r2, r3
 80005d4:	4603      	mov	r3, r0
 80005d6:	817b      	strh	r3, [r7, #10]
 80005d8:	460b      	mov	r3, r1
 80005da:	813b      	strh	r3, [r7, #8]
 80005dc:	4613      	mov	r3, r2
 80005de:	80fb      	strh	r3, [r7, #6]
  startWrite();
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3304      	adds	r3, #4
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	68f8      	ldr	r0, [r7, #12]
 80005ea:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
 80005ec:	897b      	ldrh	r3, [r7, #10]
 80005ee:	82fb      	strh	r3, [r7, #22]
 80005f0:	e014      	b.n	800061c <_ZN12Adafruit_GFX8fillRectEsssst+0x56>
    writeFastVLine(i, y, h, color);
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	3310      	adds	r3, #16
 80005f8:	681c      	ldr	r4, [r3, #0]
 80005fa:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	@ 0x28
 80005fe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000602:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8000606:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	4603      	mov	r3, r0
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	47a0      	blx	r4
  for (int16_t i = x; i < x + w; i++) {
 8000610:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000614:	b29b      	uxth	r3, r3
 8000616:	3301      	adds	r3, #1
 8000618:	b29b      	uxth	r3, r3
 800061a:	82fb      	strh	r3, [r7, #22]
 800061c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000620:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000628:	440b      	add	r3, r1
 800062a:	429a      	cmp	r2, r3
 800062c:	dbe1      	blt.n	80005f2 <_ZN12Adafruit_GFX8fillRectEsssst+0x2c>
  }
  endWrite();
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	331c      	adds	r3, #28
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	4798      	blx	r3
}
 800063a:	bf00      	nop
 800063c:	371c      	adds	r7, #28
 800063e:	46bd      	mov	sp, r7
 8000640:	bd90      	pop	{r4, r7, pc}

08000642 <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 8000642:	b590      	push	{r4, r7, lr}
 8000644:	b085      	sub	sp, #20
 8000646:	af02      	add	r7, sp, #8
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	460b      	mov	r3, r1
 800064c:	807b      	strh	r3, [r7, #2]
  fillRect(0, 0, _width, _height, color);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	3330      	adds	r3, #48	@ 0x30
 8000654:	681c      	ldr	r4, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000662:	887a      	ldrh	r2, [r7, #2]
 8000664:	9201      	str	r2, [sp, #4]
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	460b      	mov	r3, r1
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	47a0      	blx	r4
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bd90      	pop	{r4, r7, pc}

0800067a <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
 800067a:	b590      	push	{r4, r7, lr}
 800067c:	b089      	sub	sp, #36	@ 0x24
 800067e:	af02      	add	r7, sp, #8
 8000680:	60f8      	str	r0, [r7, #12]
 8000682:	4608      	mov	r0, r1
 8000684:	4611      	mov	r1, r2
 8000686:	461a      	mov	r2, r3
 8000688:	4603      	mov	r3, r0
 800068a:	817b      	strh	r3, [r7, #10]
 800068c:	460b      	mov	r3, r1
 800068e:	813b      	strh	r3, [r7, #8]
 8000690:	4613      	mov	r3, r2
 8000692:	80fb      	strh	r3, [r7, #6]
  // Update in subclasses if desired!
  if (x0 == x1) {
 8000694:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800069c:	429a      	cmp	r2, r3
 800069e:	d120      	bne.n	80006e2 <_ZN12Adafruit_GFX8drawLineEsssst+0x68>
    if (y0 > y1)
 80006a0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006a4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80006a8:	429a      	cmp	r2, r3
 80006aa:	dd05      	ble.n	80006b8 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
      _swap_int16_t(y0, y1);
 80006ac:	893b      	ldrh	r3, [r7, #8]
 80006ae:	82bb      	strh	r3, [r7, #20]
 80006b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80006b2:	813b      	strh	r3, [r7, #8]
 80006b4:	8abb      	ldrh	r3, [r7, #20]
 80006b6:	853b      	strh	r3, [r7, #40]	@ 0x28
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3328      	adds	r3, #40	@ 0x28
 80006be:	681c      	ldr	r4, [r3, #0]
 80006c0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80006c2:	893b      	ldrh	r3, [r7, #8]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	3301      	adds	r3, #1
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	b218      	sxth	r0, r3
 80006ce:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006d2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80006d6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	4603      	mov	r3, r0
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	47a0      	blx	r4
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
 80006e0:	e044      	b.n	800076c <_ZN12Adafruit_GFX8drawLineEsssst+0xf2>
  } else if (y0 == y1) {
 80006e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006e6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d120      	bne.n	8000730 <_ZN12Adafruit_GFX8drawLineEsssst+0xb6>
    if (x0 > x1)
 80006ee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80006f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	dd05      	ble.n	8000706 <_ZN12Adafruit_GFX8drawLineEsssst+0x8c>
      _swap_int16_t(x0, x1);
 80006fa:	897b      	ldrh	r3, [r7, #10]
 80006fc:	82fb      	strh	r3, [r7, #22]
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	817b      	strh	r3, [r7, #10]
 8000702:	8afb      	ldrh	r3, [r7, #22]
 8000704:	80fb      	strh	r3, [r7, #6]
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	332c      	adds	r3, #44	@ 0x2c
 800070c:	681c      	ldr	r4, [r3, #0]
 800070e:	88fa      	ldrh	r2, [r7, #6]
 8000710:	897b      	ldrh	r3, [r7, #10]
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	b29b      	uxth	r3, r3
 8000716:	3301      	adds	r3, #1
 8000718:	b29b      	uxth	r3, r3
 800071a:	b218      	sxth	r0, r3
 800071c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000720:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000724:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	4603      	mov	r3, r0
 800072a:	68f8      	ldr	r0, [r7, #12]
 800072c:	47a0      	blx	r4
}
 800072e:	e01d      	b.n	800076c <_ZN12Adafruit_GFX8drawLineEsssst+0xf2>
    startWrite();
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3304      	adds	r3, #4
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	68f8      	ldr	r0, [r7, #12]
 800073a:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	3318      	adds	r3, #24
 8000742:	681c      	ldr	r4, [r3, #0]
 8000744:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000748:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800074c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000750:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	4603      	mov	r3, r0
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	47a0      	blx	r4
    endWrite();
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	331c      	adds	r3, #28
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	68f8      	ldr	r0, [r7, #12]
 800076a:	4798      	blx	r3
}
 800076c:	bf00      	nop
 800076e:	371c      	adds	r7, #28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd90      	pop	{r4, r7, pc}

08000774 <_ZN12Adafruit_GFX10drawCircleEssst>:
    @param    r   Radius of circle
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r,
                              uint16_t color) {
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b089      	sub	sp, #36	@ 0x24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	4608      	mov	r0, r1
 800077e:	4611      	mov	r1, r2
 8000780:	461a      	mov	r2, r3
 8000782:	4603      	mov	r3, r0
 8000784:	817b      	strh	r3, [r7, #10]
 8000786:	460b      	mov	r3, r1
 8000788:	813b      	strh	r3, [r7, #8]
 800078a:	4613      	mov	r3, r2
 800078c:	80fb      	strh	r3, [r7, #6]
  int16_t f = 1 - r;
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	f1c3 0301 	rsb	r3, r3, #1
 8000794:	b29b      	uxth	r3, r3
 8000796:	83fb      	strh	r3, [r7, #30]
  int16_t ddF_x = 1;
 8000798:	2301      	movs	r3, #1
 800079a:	83bb      	strh	r3, [r7, #28]
  int16_t ddF_y = -2 * r;
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	461a      	mov	r2, r3
 80007a0:	03d2      	lsls	r2, r2, #15
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	837b      	strh	r3, [r7, #26]
  int16_t x = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	833b      	strh	r3, [r7, #24]
  int16_t y = r;
 80007ae:	88fb      	ldrh	r3, [r7, #6]
 80007b0:	82fb      	strh	r3, [r7, #22]

  startWrite();
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	3304      	adds	r3, #4
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	68f8      	ldr	r0, [r7, #12]
 80007bc:	4798      	blx	r3
  writePixel(x0, y0 + r, color);
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3308      	adds	r3, #8
 80007c4:	681c      	ldr	r4, [r3, #0]
 80007c6:	893a      	ldrh	r2, [r7, #8]
 80007c8:	88fb      	ldrh	r3, [r7, #6]
 80007ca:	4413      	add	r3, r2
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	b21a      	sxth	r2, r3
 80007d0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80007d2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80007d6:	68f8      	ldr	r0, [r7, #12]
 80007d8:	47a0      	blx	r4
  writePixel(x0, y0 - r, color);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	3308      	adds	r3, #8
 80007e0:	681c      	ldr	r4, [r3, #0]
 80007e2:	893a      	ldrh	r2, [r7, #8]
 80007e4:	88fb      	ldrh	r3, [r7, #6]
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	b21a      	sxth	r2, r3
 80007ec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80007ee:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80007f2:	68f8      	ldr	r0, [r7, #12]
 80007f4:	47a0      	blx	r4
  writePixel(x0 + r, y0, color);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	3308      	adds	r3, #8
 80007fc:	681c      	ldr	r4, [r3, #0]
 80007fe:	897a      	ldrh	r2, [r7, #10]
 8000800:	88fb      	ldrh	r3, [r7, #6]
 8000802:	4413      	add	r3, r2
 8000804:	b29b      	uxth	r3, r3
 8000806:	b219      	sxth	r1, r3
 8000808:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800080a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	47a0      	blx	r4
  writePixel(x0 - r, y0, color);
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3308      	adds	r3, #8
 8000818:	681c      	ldr	r4, [r3, #0]
 800081a:	897a      	ldrh	r2, [r7, #10]
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	b29b      	uxth	r3, r3
 8000822:	b219      	sxth	r1, r3
 8000824:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000826:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	47a0      	blx	r4

  while (x < y) {
 800082e:	e0a9      	b.n	8000984 <_ZN12Adafruit_GFX10drawCircleEssst+0x210>
    if (f >= 0) {
 8000830:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000834:	2b00      	cmp	r3, #0
 8000836:	db0e      	blt.n	8000856 <_ZN12Adafruit_GFX10drawCircleEssst+0xe2>
      y--;
 8000838:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800083c:	b29b      	uxth	r3, r3
 800083e:	3b01      	subs	r3, #1
 8000840:	b29b      	uxth	r3, r3
 8000842:	82fb      	strh	r3, [r7, #22]
      ddF_y += 2;
 8000844:	8b7b      	ldrh	r3, [r7, #26]
 8000846:	3302      	adds	r3, #2
 8000848:	b29b      	uxth	r3, r3
 800084a:	837b      	strh	r3, [r7, #26]
      f += ddF_y;
 800084c:	8bfa      	ldrh	r2, [r7, #30]
 800084e:	8b7b      	ldrh	r3, [r7, #26]
 8000850:	4413      	add	r3, r2
 8000852:	b29b      	uxth	r3, r3
 8000854:	83fb      	strh	r3, [r7, #30]
    }
    x++;
 8000856:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800085a:	b29b      	uxth	r3, r3
 800085c:	3301      	adds	r3, #1
 800085e:	b29b      	uxth	r3, r3
 8000860:	833b      	strh	r3, [r7, #24]
    ddF_x += 2;
 8000862:	8bbb      	ldrh	r3, [r7, #28]
 8000864:	3302      	adds	r3, #2
 8000866:	b29b      	uxth	r3, r3
 8000868:	83bb      	strh	r3, [r7, #28]
    f += ddF_x;
 800086a:	8bfa      	ldrh	r2, [r7, #30]
 800086c:	8bbb      	ldrh	r3, [r7, #28]
 800086e:	4413      	add	r3, r2
 8000870:	b29b      	uxth	r3, r3
 8000872:	83fb      	strh	r3, [r7, #30]

    writePixel(x0 + x, y0 + y, color);
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	3308      	adds	r3, #8
 800087a:	681c      	ldr	r4, [r3, #0]
 800087c:	897a      	ldrh	r2, [r7, #10]
 800087e:	8b3b      	ldrh	r3, [r7, #24]
 8000880:	4413      	add	r3, r2
 8000882:	b29b      	uxth	r3, r3
 8000884:	b219      	sxth	r1, r3
 8000886:	893a      	ldrh	r2, [r7, #8]
 8000888:	8afb      	ldrh	r3, [r7, #22]
 800088a:	4413      	add	r3, r2
 800088c:	b29b      	uxth	r3, r3
 800088e:	b21a      	sxth	r2, r3
 8000890:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	47a0      	blx	r4
    writePixel(x0 - x, y0 + y, color);
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	3308      	adds	r3, #8
 800089c:	681c      	ldr	r4, [r3, #0]
 800089e:	897a      	ldrh	r2, [r7, #10]
 80008a0:	8b3b      	ldrh	r3, [r7, #24]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	b219      	sxth	r1, r3
 80008a8:	893a      	ldrh	r2, [r7, #8]
 80008aa:	8afb      	ldrh	r3, [r7, #22]
 80008ac:	4413      	add	r3, r2
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	b21a      	sxth	r2, r3
 80008b2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	47a0      	blx	r4
    writePixel(x0 + x, y0 - y, color);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	3308      	adds	r3, #8
 80008be:	681c      	ldr	r4, [r3, #0]
 80008c0:	897a      	ldrh	r2, [r7, #10]
 80008c2:	8b3b      	ldrh	r3, [r7, #24]
 80008c4:	4413      	add	r3, r2
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	b219      	sxth	r1, r3
 80008ca:	893a      	ldrh	r2, [r7, #8]
 80008cc:	8afb      	ldrh	r3, [r7, #22]
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	b21a      	sxth	r2, r3
 80008d4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80008d6:	68f8      	ldr	r0, [r7, #12]
 80008d8:	47a0      	blx	r4
    writePixel(x0 - x, y0 - y, color);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	3308      	adds	r3, #8
 80008e0:	681c      	ldr	r4, [r3, #0]
 80008e2:	897a      	ldrh	r2, [r7, #10]
 80008e4:	8b3b      	ldrh	r3, [r7, #24]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	b219      	sxth	r1, r3
 80008ec:	893a      	ldrh	r2, [r7, #8]
 80008ee:	8afb      	ldrh	r3, [r7, #22]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	b21a      	sxth	r2, r3
 80008f6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80008f8:	68f8      	ldr	r0, [r7, #12]
 80008fa:	47a0      	blx	r4
    writePixel(x0 + y, y0 + x, color);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3308      	adds	r3, #8
 8000902:	681c      	ldr	r4, [r3, #0]
 8000904:	897a      	ldrh	r2, [r7, #10]
 8000906:	8afb      	ldrh	r3, [r7, #22]
 8000908:	4413      	add	r3, r2
 800090a:	b29b      	uxth	r3, r3
 800090c:	b219      	sxth	r1, r3
 800090e:	893a      	ldrh	r2, [r7, #8]
 8000910:	8b3b      	ldrh	r3, [r7, #24]
 8000912:	4413      	add	r3, r2
 8000914:	b29b      	uxth	r3, r3
 8000916:	b21a      	sxth	r2, r3
 8000918:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800091a:	68f8      	ldr	r0, [r7, #12]
 800091c:	47a0      	blx	r4
    writePixel(x0 - y, y0 + x, color);
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	3308      	adds	r3, #8
 8000924:	681c      	ldr	r4, [r3, #0]
 8000926:	897a      	ldrh	r2, [r7, #10]
 8000928:	8afb      	ldrh	r3, [r7, #22]
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	b29b      	uxth	r3, r3
 800092e:	b219      	sxth	r1, r3
 8000930:	893a      	ldrh	r2, [r7, #8]
 8000932:	8b3b      	ldrh	r3, [r7, #24]
 8000934:	4413      	add	r3, r2
 8000936:	b29b      	uxth	r3, r3
 8000938:	b21a      	sxth	r2, r3
 800093a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800093c:	68f8      	ldr	r0, [r7, #12]
 800093e:	47a0      	blx	r4
    writePixel(x0 + y, y0 - x, color);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3308      	adds	r3, #8
 8000946:	681c      	ldr	r4, [r3, #0]
 8000948:	897a      	ldrh	r2, [r7, #10]
 800094a:	8afb      	ldrh	r3, [r7, #22]
 800094c:	4413      	add	r3, r2
 800094e:	b29b      	uxth	r3, r3
 8000950:	b219      	sxth	r1, r3
 8000952:	893a      	ldrh	r2, [r7, #8]
 8000954:	8b3b      	ldrh	r3, [r7, #24]
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	b29b      	uxth	r3, r3
 800095a:	b21a      	sxth	r2, r3
 800095c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	47a0      	blx	r4
    writePixel(x0 - y, y0 - x, color);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3308      	adds	r3, #8
 8000968:	681c      	ldr	r4, [r3, #0]
 800096a:	897a      	ldrh	r2, [r7, #10]
 800096c:	8afb      	ldrh	r3, [r7, #22]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	b29b      	uxth	r3, r3
 8000972:	b219      	sxth	r1, r3
 8000974:	893a      	ldrh	r2, [r7, #8]
 8000976:	8b3b      	ldrh	r3, [r7, #24]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	b29b      	uxth	r3, r3
 800097c:	b21a      	sxth	r2, r3
 800097e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	47a0      	blx	r4
  while (x < y) {
 8000984:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000988:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800098c:	429a      	cmp	r2, r3
 800098e:	f6ff af4f 	blt.w	8000830 <_ZN12Adafruit_GFX10drawCircleEssst+0xbc>
  }
  endWrite();
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	331c      	adds	r3, #28
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	4798      	blx	r3
}
 800099e:	bf00      	nop
 80009a0:	3724      	adds	r7, #36	@ 0x24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd90      	pop	{r4, r7, pc}

080009a6 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>:
   the circle we're doing
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawCircleHelper(int16_t x0, int16_t y0, int16_t r,
                                    uint8_t cornername, uint16_t color) {
 80009a6:	b590      	push	{r4, r7, lr}
 80009a8:	b089      	sub	sp, #36	@ 0x24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	60f8      	str	r0, [r7, #12]
 80009ae:	4608      	mov	r0, r1
 80009b0:	4611      	mov	r1, r2
 80009b2:	461a      	mov	r2, r3
 80009b4:	4603      	mov	r3, r0
 80009b6:	817b      	strh	r3, [r7, #10]
 80009b8:	460b      	mov	r3, r1
 80009ba:	813b      	strh	r3, [r7, #8]
 80009bc:	4613      	mov	r3, r2
 80009be:	80fb      	strh	r3, [r7, #6]
  int16_t f = 1 - r;
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	f1c3 0301 	rsb	r3, r3, #1
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	83fb      	strh	r3, [r7, #30]
  int16_t ddF_x = 1;
 80009ca:	2301      	movs	r3, #1
 80009cc:	83bb      	strh	r3, [r7, #28]
  int16_t ddF_y = -2 * r;
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	461a      	mov	r2, r3
 80009d2:	03d2      	lsls	r2, r2, #15
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	b29b      	uxth	r3, r3
 80009da:	837b      	strh	r3, [r7, #26]
  int16_t x = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	833b      	strh	r3, [r7, #24]
  int16_t y = r;
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	82fb      	strh	r3, [r7, #22]

  while (x < y) {
 80009e4:	e0c1      	b.n	8000b6a <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x1c4>
    if (f >= 0) {
 80009e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db0e      	blt.n	8000a0c <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x66>
      y--;
 80009ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	3b01      	subs	r3, #1
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	82fb      	strh	r3, [r7, #22]
      ddF_y += 2;
 80009fa:	8b7b      	ldrh	r3, [r7, #26]
 80009fc:	3302      	adds	r3, #2
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	837b      	strh	r3, [r7, #26]
      f += ddF_y;
 8000a02:	8bfa      	ldrh	r2, [r7, #30]
 8000a04:	8b7b      	ldrh	r3, [r7, #26]
 8000a06:	4413      	add	r3, r2
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	83fb      	strh	r3, [r7, #30]
    }
    x++;
 8000a0c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	3301      	adds	r3, #1
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	833b      	strh	r3, [r7, #24]
    ddF_x += 2;
 8000a18:	8bbb      	ldrh	r3, [r7, #28]
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	83bb      	strh	r3, [r7, #28]
    f += ddF_x;
 8000a20:	8bfa      	ldrh	r2, [r7, #30]
 8000a22:	8bbb      	ldrh	r3, [r7, #28]
 8000a24:	4413      	add	r3, r2
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	83fb      	strh	r3, [r7, #30]
    if (cornername & 0x4) {
 8000a2a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d021      	beq.n	8000a7a <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0xd4>
      writePixel(x0 + x, y0 + y, color);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3308      	adds	r3, #8
 8000a3c:	681c      	ldr	r4, [r3, #0]
 8000a3e:	897a      	ldrh	r2, [r7, #10]
 8000a40:	8b3b      	ldrh	r3, [r7, #24]
 8000a42:	4413      	add	r3, r2
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	b219      	sxth	r1, r3
 8000a48:	893a      	ldrh	r2, [r7, #8]
 8000a4a:	8afb      	ldrh	r3, [r7, #22]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	b21a      	sxth	r2, r3
 8000a52:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	47a0      	blx	r4
      writePixel(x0 + y, y0 + x, color);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3308      	adds	r3, #8
 8000a5e:	681c      	ldr	r4, [r3, #0]
 8000a60:	897a      	ldrh	r2, [r7, #10]
 8000a62:	8afb      	ldrh	r3, [r7, #22]
 8000a64:	4413      	add	r3, r2
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	b219      	sxth	r1, r3
 8000a6a:	893a      	ldrh	r2, [r7, #8]
 8000a6c:	8b3b      	ldrh	r3, [r7, #24]
 8000a6e:	4413      	add	r3, r2
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	b21a      	sxth	r2, r3
 8000a74:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	47a0      	blx	r4
    }
    if (cornername & 0x2) {
 8000a7a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d021      	beq.n	8000aca <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x124>
      writePixel(x0 + x, y0 - y, color);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	3308      	adds	r3, #8
 8000a8c:	681c      	ldr	r4, [r3, #0]
 8000a8e:	897a      	ldrh	r2, [r7, #10]
 8000a90:	8b3b      	ldrh	r3, [r7, #24]
 8000a92:	4413      	add	r3, r2
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b219      	sxth	r1, r3
 8000a98:	893a      	ldrh	r2, [r7, #8]
 8000a9a:	8afb      	ldrh	r3, [r7, #22]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	b21a      	sxth	r2, r3
 8000aa2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	47a0      	blx	r4
      writePixel(x0 + y, y0 - x, color);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	3308      	adds	r3, #8
 8000aae:	681c      	ldr	r4, [r3, #0]
 8000ab0:	897a      	ldrh	r2, [r7, #10]
 8000ab2:	8afb      	ldrh	r3, [r7, #22]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	b219      	sxth	r1, r3
 8000aba:	893a      	ldrh	r2, [r7, #8]
 8000abc:	8b3b      	ldrh	r3, [r7, #24]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	47a0      	blx	r4
    }
    if (cornername & 0x8) {
 8000aca:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d021      	beq.n	8000b1a <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x174>
      writePixel(x0 - y, y0 + x, color);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	3308      	adds	r3, #8
 8000adc:	681c      	ldr	r4, [r3, #0]
 8000ade:	897a      	ldrh	r2, [r7, #10]
 8000ae0:	8afb      	ldrh	r3, [r7, #22]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b219      	sxth	r1, r3
 8000ae8:	893a      	ldrh	r2, [r7, #8]
 8000aea:	8b3b      	ldrh	r3, [r7, #24]
 8000aec:	4413      	add	r3, r2
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b21a      	sxth	r2, r3
 8000af2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	47a0      	blx	r4
      writePixel(x0 - x, y0 + y, color);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3308      	adds	r3, #8
 8000afe:	681c      	ldr	r4, [r3, #0]
 8000b00:	897a      	ldrh	r2, [r7, #10]
 8000b02:	8b3b      	ldrh	r3, [r7, #24]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	b219      	sxth	r1, r3
 8000b0a:	893a      	ldrh	r2, [r7, #8]
 8000b0c:	8afb      	ldrh	r3, [r7, #22]
 8000b0e:	4413      	add	r3, r2
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	b21a      	sxth	r2, r3
 8000b14:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	47a0      	blx	r4
    }
    if (cornername & 0x1) {
 8000b1a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d021      	beq.n	8000b6a <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x1c4>
      writePixel(x0 - y, y0 - x, color);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	3308      	adds	r3, #8
 8000b2c:	681c      	ldr	r4, [r3, #0]
 8000b2e:	897a      	ldrh	r2, [r7, #10]
 8000b30:	8afb      	ldrh	r3, [r7, #22]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	b219      	sxth	r1, r3
 8000b38:	893a      	ldrh	r2, [r7, #8]
 8000b3a:	8b3b      	ldrh	r3, [r7, #24]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000b44:	68f8      	ldr	r0, [r7, #12]
 8000b46:	47a0      	blx	r4
      writePixel(x0 - x, y0 - y, color);
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	3308      	adds	r3, #8
 8000b4e:	681c      	ldr	r4, [r3, #0]
 8000b50:	897a      	ldrh	r2, [r7, #10]
 8000b52:	8b3b      	ldrh	r3, [r7, #24]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	b219      	sxth	r1, r3
 8000b5a:	893a      	ldrh	r2, [r7, #8]
 8000b5c:	8afb      	ldrh	r3, [r7, #22]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	47a0      	blx	r4
  while (x < y) {
 8000b6a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000b6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	f6ff af37 	blt.w	80009e6 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x40>
    }
  }
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3724      	adds	r7, #36	@ 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd90      	pop	{r4, r7, pc}

08000b82 <_ZN12Adafruit_GFX10fillCircleEssst>:
    @param    r   Radius of circle
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillCircle(int16_t x0, int16_t y0, int16_t r,
                              uint16_t color) {
 8000b82:	b590      	push	{r4, r7, lr}
 8000b84:	b089      	sub	sp, #36	@ 0x24
 8000b86:	af04      	add	r7, sp, #16
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4603      	mov	r3, r0
 8000b92:	817b      	strh	r3, [r7, #10]
 8000b94:	460b      	mov	r3, r1
 8000b96:	813b      	strh	r3, [r7, #8]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	4798      	blx	r3
  writeFastVLine(x0, y0 - r, 2 * r + 1, color);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3310      	adds	r3, #16
 8000bae:	681c      	ldr	r4, [r3, #0]
 8000bb0:	893a      	ldrh	r2, [r7, #8]
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	b21a      	sxth	r2, r3
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	b218      	sxth	r0, r3
 8000bc6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000bca:	8c3b      	ldrh	r3, [r7, #32]
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	4603      	mov	r3, r0
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	47a0      	blx	r4
  fillCircleHelper(x0, y0, r, 3, 0, color);
 8000bd4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000bd8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000bdc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000be0:	8c3b      	ldrh	r3, [r7, #32]
 8000be2:	9302      	str	r3, [sp, #8]
 8000be4:	2300      	movs	r3, #0
 8000be6:	9301      	str	r3, [sp, #4]
 8000be8:	2303      	movs	r3, #3
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	4603      	mov	r3, r0
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f000 f80a 	bl	8000c08 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  endWrite();
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	331c      	adds	r3, #28
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	4798      	blx	r3
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd90      	pop	{r4, r7, pc}

08000c08 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
    @param  color    16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
                                    uint8_t corners, int16_t delta,
                                    uint16_t color) {
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b08b      	sub	sp, #44	@ 0x2c
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	4608      	mov	r0, r1
 8000c12:	4611      	mov	r1, r2
 8000c14:	461a      	mov	r2, r3
 8000c16:	4603      	mov	r3, r0
 8000c18:	817b      	strh	r3, [r7, #10]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	813b      	strh	r3, [r7, #8]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	80fb      	strh	r3, [r7, #6]

  int16_t f = 1 - r;
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	f1c3 0301 	rsb	r3, r3, #1
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	83fb      	strh	r3, [r7, #30]
  int16_t ddF_x = 1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	83bb      	strh	r3, [r7, #28]
  int16_t ddF_y = -2 * r;
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	461a      	mov	r2, r3
 8000c34:	03d2      	lsls	r2, r2, #15
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	837b      	strh	r3, [r7, #26]
  int16_t x = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	833b      	strh	r3, [r7, #24]
  int16_t y = r;
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	82fb      	strh	r3, [r7, #22]
  int16_t px = x;
 8000c46:	8b3b      	ldrh	r3, [r7, #24]
 8000c48:	82bb      	strh	r3, [r7, #20]
  int16_t py = y;
 8000c4a:	8afb      	ldrh	r3, [r7, #22]
 8000c4c:	827b      	strh	r3, [r7, #18]

  delta++; // Avoid some +1's in the loop
 8000c4e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	3301      	adds	r3, #1
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	86bb      	strh	r3, [r7, #52]	@ 0x34

  while (x < y) {
 8000c5a:	e0b5      	b.n	8000dc8 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x1c0>
    if (f >= 0) {
 8000c5c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0e      	blt.n	8000c82 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x7a>
      y--;
 8000c64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	82fb      	strh	r3, [r7, #22]
      ddF_y += 2;
 8000c70:	8b7b      	ldrh	r3, [r7, #26]
 8000c72:	3302      	adds	r3, #2
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	837b      	strh	r3, [r7, #26]
      f += ddF_y;
 8000c78:	8bfa      	ldrh	r2, [r7, #30]
 8000c7a:	8b7b      	ldrh	r3, [r7, #26]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	83fb      	strh	r3, [r7, #30]
    }
    x++;
 8000c82:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	3301      	adds	r3, #1
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	833b      	strh	r3, [r7, #24]
    ddF_x += 2;
 8000c8e:	8bbb      	ldrh	r3, [r7, #28]
 8000c90:	3302      	adds	r3, #2
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	83bb      	strh	r3, [r7, #28]
    f += ddF_x;
 8000c96:	8bfa      	ldrh	r2, [r7, #30]
 8000c98:	8bbb      	ldrh	r3, [r7, #28]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	83fb      	strh	r3, [r7, #30]
    // These checks avoid double-drawing certain lines, important
    // for the SSD1306 library which has an INVERT drawing mode.
    if (x < (y + 1)) {
 8000ca0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000ca4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	db41      	blt.n	8000d30 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x128>
      if (corners & 1)
 8000cac:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d01a      	beq.n	8000cee <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xe6>
        writeFastVLine(x0 + x, y0 - y, 2 * y + delta, color);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3310      	adds	r3, #16
 8000cbe:	681c      	ldr	r4, [r3, #0]
 8000cc0:	897a      	ldrh	r2, [r7, #10]
 8000cc2:	8b3b      	ldrh	r3, [r7, #24]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	b219      	sxth	r1, r3
 8000cca:	893a      	ldrh	r2, [r7, #8]
 8000ccc:	8afb      	ldrh	r3, [r7, #22]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	b218      	sxth	r0, r3
 8000cd4:	8afb      	ldrh	r3, [r7, #22]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000cdc:	4413      	add	r3, r2
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	47a0      	blx	r4
      if (corners & 2)
 8000cee:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d01a      	beq.n	8000d30 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x128>
        writeFastVLine(x0 - x, y0 - y, 2 * y + delta, color);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3310      	adds	r3, #16
 8000d00:	681c      	ldr	r4, [r3, #0]
 8000d02:	897a      	ldrh	r2, [r7, #10]
 8000d04:	8b3b      	ldrh	r3, [r7, #24]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	b219      	sxth	r1, r3
 8000d0c:	893a      	ldrh	r2, [r7, #8]
 8000d0e:	8afb      	ldrh	r3, [r7, #22]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	b218      	sxth	r0, r3
 8000d16:	8afb      	ldrh	r3, [r7, #22]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000d1e:	4413      	add	r3, r2
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	47a0      	blx	r4
    }
    if (y != py) {
 8000d30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000d34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d043      	beq.n	8000dc4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x1bc>
      if (corners & 1)
 8000d3c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d01a      	beq.n	8000d7e <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x176>
        writeFastVLine(x0 + py, y0 - px, 2 * px + delta, color);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3310      	adds	r3, #16
 8000d4e:	681c      	ldr	r4, [r3, #0]
 8000d50:	897a      	ldrh	r2, [r7, #10]
 8000d52:	8a7b      	ldrh	r3, [r7, #18]
 8000d54:	4413      	add	r3, r2
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	b219      	sxth	r1, r3
 8000d5a:	893a      	ldrh	r2, [r7, #8]
 8000d5c:	8abb      	ldrh	r3, [r7, #20]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	b218      	sxth	r0, r3
 8000d64:	8abb      	ldrh	r3, [r7, #20]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	b21a      	sxth	r2, r3
 8000d72:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	4613      	mov	r3, r2
 8000d78:	4602      	mov	r2, r0
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	47a0      	blx	r4
      if (corners & 2)
 8000d7e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d01a      	beq.n	8000dc0 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x1b8>
        writeFastVLine(x0 - py, y0 - px, 2 * px + delta, color);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3310      	adds	r3, #16
 8000d90:	681c      	ldr	r4, [r3, #0]
 8000d92:	897a      	ldrh	r2, [r7, #10]
 8000d94:	8a7b      	ldrh	r3, [r7, #18]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	b219      	sxth	r1, r3
 8000d9c:	893a      	ldrh	r2, [r7, #8]
 8000d9e:	8abb      	ldrh	r3, [r7, #20]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	b218      	sxth	r0, r3
 8000da6:	8abb      	ldrh	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000dae:	4413      	add	r3, r2
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	4613      	mov	r3, r2
 8000dba:	4602      	mov	r2, r0
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	47a0      	blx	r4
      py = y;
 8000dc0:	8afb      	ldrh	r3, [r7, #22]
 8000dc2:	827b      	strh	r3, [r7, #18]
    }
    px = x;
 8000dc4:	8b3b      	ldrh	r3, [r7, #24]
 8000dc6:	82bb      	strh	r3, [r7, #20]
  while (x < y) {
 8000dc8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000dcc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	f6ff af43 	blt.w	8000c5c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x54>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	bf00      	nop
 8000dda:	3724      	adds	r7, #36	@ 0x24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd90      	pop	{r4, r7, pc}

08000de0 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af02      	add	r7, sp, #8
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	4608      	mov	r0, r1
 8000dea:	4611      	mov	r1, r2
 8000dec:	461a      	mov	r2, r3
 8000dee:	4603      	mov	r3, r0
 8000df0:	817b      	strh	r3, [r7, #10]
 8000df2:	460b      	mov	r3, r1
 8000df4:	813b      	strh	r3, [r7, #8]
 8000df6:	4613      	mov	r3, r2
 8000df8:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3304      	adds	r3, #4
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3314      	adds	r3, #20
 8000e0c:	681c      	ldr	r4, [r3, #0]
 8000e0e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e12:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000e16:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000e1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	4603      	mov	r3, r0
 8000e20:	68f8      	ldr	r0, [r7, #12]
 8000e22:	47a0      	blx	r4
  writeFastHLine(x, y + h - 1, w, color);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3314      	adds	r3, #20
 8000e2a:	681c      	ldr	r4, [r3, #0]
 8000e2c:	893a      	ldrh	r2, [r7, #8]
 8000e2e:	8c3b      	ldrh	r3, [r7, #32]
 8000e30:	4413      	add	r3, r2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	3b01      	subs	r3, #1
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e3e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000e42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	4603      	mov	r3, r0
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	47a0      	blx	r4
  writeFastVLine(x, y, h, color);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3310      	adds	r3, #16
 8000e52:	681c      	ldr	r4, [r3, #0]
 8000e54:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8000e58:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000e5c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000e60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	4603      	mov	r3, r0
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	47a0      	blx	r4
  writeFastVLine(x + w - 1, y, h, color);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	3310      	adds	r3, #16
 8000e70:	681c      	ldr	r4, [r3, #0]
 8000e72:	897a      	ldrh	r2, [r7, #10]
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	4413      	add	r3, r2
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	b219      	sxth	r1, r3
 8000e80:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8000e84:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000e88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	47a0      	blx	r4
  endWrite();
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	331c      	adds	r3, #28
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	4798      	blx	r3
}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd90      	pop	{r4, r7, pc}

08000ea6 <_ZN12Adafruit_GFX13drawRoundRectEssssst>:
    @param    r   Radius of corner rounding
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 int16_t r, uint16_t color) {
 8000ea6:	b590      	push	{r4, r7, lr}
 8000ea8:	b089      	sub	sp, #36	@ 0x24
 8000eaa:	af02      	add	r7, sp, #8
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	4608      	mov	r0, r1
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	817b      	strh	r3, [r7, #10]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	813b      	strh	r3, [r7, #8]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	80fb      	strh	r3, [r7, #6]
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8000ec0:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8000ec4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	bfa8      	it	ge
 8000ecc:	4613      	movge	r3, r2
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	0fda      	lsrs	r2, r3, #31
 8000ed2:	4413      	add	r3, r2
 8000ed4:	105b      	asrs	r3, r3, #1
 8000ed6:	82fb      	strh	r3, [r7, #22]
  if (r > max_radius)
 8000ed8:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8000edc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dd01      	ble.n	8000ee8 <_ZN12Adafruit_GFX13drawRoundRectEssssst+0x42>
    r = max_radius;
 8000ee4:	8afb      	ldrh	r3, [r7, #22]
 8000ee6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  // smarter version
  startWrite();
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3304      	adds	r3, #4
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	4798      	blx	r3
  writeFastHLine(x + r, y, w - 2 * r, color);         // Top
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3314      	adds	r3, #20
 8000efa:	681c      	ldr	r4, [r3, #0]
 8000efc:	897a      	ldrh	r2, [r7, #10]
 8000efe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f00:	4413      	add	r3, r2
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b219      	sxth	r1, r3
 8000f06:	88fa      	ldrh	r2, [r7, #6]
 8000f08:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	b218      	sxth	r0, r3
 8000f14:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f18:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	47a0      	blx	r4
  writeFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	3314      	adds	r3, #20
 8000f28:	681c      	ldr	r4, [r3, #0]
 8000f2a:	897a      	ldrh	r2, [r7, #10]
 8000f2c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f2e:	4413      	add	r3, r2
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	b219      	sxth	r1, r3
 8000f34:	893a      	ldrh	r2, [r7, #8]
 8000f36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000f38:	4413      	add	r3, r2
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	b218      	sxth	r0, r3
 8000f42:	88fa      	ldrh	r2, [r7, #6]
 8000f44:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	4613      	mov	r3, r2
 8000f56:	4602      	mov	r2, r0
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	47a0      	blx	r4
  writeFastVLine(x, y + r, h - 2 * r, color);         // Left
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3310      	adds	r3, #16
 8000f62:	681c      	ldr	r4, [r3, #0]
 8000f64:	893a      	ldrh	r2, [r7, #8]
 8000f66:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f68:	4413      	add	r3, r2
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	b218      	sxth	r0, r3
 8000f6e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000f70:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000f80:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	4613      	mov	r3, r2
 8000f86:	4602      	mov	r2, r0
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	47a0      	blx	r4
  writeFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3310      	adds	r3, #16
 8000f92:	681c      	ldr	r4, [r3, #0]
 8000f94:	897a      	ldrh	r2, [r7, #10]
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	4413      	add	r3, r2
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b219      	sxth	r1, r3
 8000fa2:	893a      	ldrh	r2, [r7, #8]
 8000fa4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	b218      	sxth	r0, r3
 8000fac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000fae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	47a0      	blx	r4
  // draw four corners
  drawCircleHelper(x + r, y + r, r, 1, color);
 8000fc6:	897a      	ldrh	r2, [r7, #10]
 8000fc8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000fca:	4413      	add	r3, r2
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b219      	sxth	r1, r3
 8000fd0:	893a      	ldrh	r2, [r7, #8]
 8000fd2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	f9b7 002c 	ldrsh.w	r0, [r7, #44]	@ 0x2c
 8000fde:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f7ff fcdc 	bl	80009a6 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
  drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 8000fee:	897a      	ldrh	r2, [r7, #10]
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b219      	sxth	r1, r3
 8001002:	893a      	ldrh	r2, [r7, #8]
 8001004:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001006:	4413      	add	r3, r2
 8001008:	b29b      	uxth	r3, r3
 800100a:	b21a      	sxth	r2, r3
 800100c:	f9b7 002c 	ldrsh.w	r0, [r7, #44]	@ 0x2c
 8001010:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	2302      	movs	r3, #2
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	4603      	mov	r3, r0
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f7ff fcc3 	bl	80009a6 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
  drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8001020:	897a      	ldrh	r2, [r7, #10]
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	4413      	add	r3, r2
 8001026:	b29a      	uxth	r2, r3
 8001028:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b29b      	uxth	r3, r3
 800102e:	3b01      	subs	r3, #1
 8001030:	b29b      	uxth	r3, r3
 8001032:	b219      	sxth	r1, r3
 8001034:	893a      	ldrh	r2, [r7, #8]
 8001036:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001038:	4413      	add	r3, r2
 800103a:	b29a      	uxth	r2, r3
 800103c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	b29b      	uxth	r3, r3
 8001042:	3b01      	subs	r3, #1
 8001044:	b29b      	uxth	r3, r3
 8001046:	b21a      	sxth	r2, r3
 8001048:	f9b7 002c 	ldrsh.w	r0, [r7, #44]	@ 0x2c
 800104c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	2304      	movs	r3, #4
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	4603      	mov	r3, r0
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f7ff fca5 	bl	80009a6 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
  drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 800105c:	897a      	ldrh	r2, [r7, #10]
 800105e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001060:	4413      	add	r3, r2
 8001062:	b29b      	uxth	r3, r3
 8001064:	b219      	sxth	r1, r3
 8001066:	893a      	ldrh	r2, [r7, #8]
 8001068:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800106a:	4413      	add	r3, r2
 800106c:	b29a      	uxth	r2, r3
 800106e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	b29b      	uxth	r3, r3
 8001074:	3b01      	subs	r3, #1
 8001076:	b29b      	uxth	r3, r3
 8001078:	b21a      	sxth	r2, r3
 800107a:	f9b7 002c 	ldrsh.w	r0, [r7, #44]	@ 0x2c
 800107e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	2308      	movs	r3, #8
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	4603      	mov	r3, r0
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f7ff fc8c 	bl	80009a6 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
  endWrite();
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	331c      	adds	r3, #28
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	4798      	blx	r3
}
 800109a:	bf00      	nop
 800109c:	371c      	adds	r7, #28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd90      	pop	{r4, r7, pc}

080010a2 <_ZN12Adafruit_GFX13fillRoundRectEssssst>:
    @param    r   Radius of corner rounding
    @param    color 16-bit 5-6-5 Color to draw/fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 int16_t r, uint16_t color) {
 80010a2:	b590      	push	{r4, r7, lr}
 80010a4:	b08b      	sub	sp, #44	@ 0x2c
 80010a6:	af04      	add	r7, sp, #16
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	4608      	mov	r0, r1
 80010ac:	4611      	mov	r1, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	817b      	strh	r3, [r7, #10]
 80010b4:	460b      	mov	r3, r1
 80010b6:	813b      	strh	r3, [r7, #8]
 80010b8:	4613      	mov	r3, r2
 80010ba:	80fb      	strh	r3, [r7, #6]
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 80010bc:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 80010c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c4:	4293      	cmp	r3, r2
 80010c6:	bfa8      	it	ge
 80010c8:	4613      	movge	r3, r2
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	0fda      	lsrs	r2, r3, #31
 80010ce:	4413      	add	r3, r2
 80010d0:	105b      	asrs	r3, r3, #1
 80010d2:	82fb      	strh	r3, [r7, #22]
  if (r > max_radius)
 80010d4:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 80010d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010dc:	429a      	cmp	r2, r3
 80010de:	dd01      	ble.n	80010e4 <_ZN12Adafruit_GFX13fillRoundRectEssssst+0x42>
    r = max_radius;
 80010e0:	8afb      	ldrh	r3, [r7, #22]
 80010e2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  // smarter version
  startWrite();
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3304      	adds	r3, #4
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	4798      	blx	r3
  writeFillRect(x + r, y, w - 2 * r, h, color);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	330c      	adds	r3, #12
 80010f6:	681c      	ldr	r4, [r3, #0]
 80010f8:	897a      	ldrh	r2, [r7, #10]
 80010fa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80010fc:	4413      	add	r3, r2
 80010fe:	b29b      	uxth	r3, r3
 8001100:	b219      	sxth	r1, r3
 8001102:	88fa      	ldrh	r2, [r7, #6]
 8001104:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	b29b      	uxth	r3, r3
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	b29b      	uxth	r3, r3
 800110e:	b218      	sxth	r0, r3
 8001110:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001114:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	4603      	mov	r3, r0
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	47a0      	blx	r4
  // draw four corners
  fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8001124:	897a      	ldrh	r2, [r7, #10]
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	4413      	add	r3, r2
 800112a:	b29a      	uxth	r2, r3
 800112c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	b29b      	uxth	r3, r3
 8001132:	3b01      	subs	r3, #1
 8001134:	b29b      	uxth	r3, r3
 8001136:	b219      	sxth	r1, r3
 8001138:	893a      	ldrh	r2, [r7, #8]
 800113a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800113c:	4413      	add	r3, r2
 800113e:	b29b      	uxth	r3, r3
 8001140:	b218      	sxth	r0, r3
 8001142:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001144:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	b29b      	uxth	r3, r3
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	b29b      	uxth	r3, r3
 800114e:	3b01      	subs	r3, #1
 8001150:	b29b      	uxth	r3, r3
 8001152:	b21b      	sxth	r3, r3
 8001154:	f9b7 402c 	ldrsh.w	r4, [r7, #44]	@ 0x2c
 8001158:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800115a:	9202      	str	r2, [sp, #8]
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	2301      	movs	r3, #1
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	4623      	mov	r3, r4
 8001164:	4602      	mov	r2, r0
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f7ff fd4e 	bl	8000c08 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 800116c:	897a      	ldrh	r2, [r7, #10]
 800116e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001170:	4413      	add	r3, r2
 8001172:	b29b      	uxth	r3, r3
 8001174:	b219      	sxth	r1, r3
 8001176:	893a      	ldrh	r2, [r7, #8]
 8001178:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800117a:	4413      	add	r3, r2
 800117c:	b29b      	uxth	r3, r3
 800117e:	b218      	sxth	r0, r3
 8001180:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001182:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	b29b      	uxth	r3, r3
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	b29b      	uxth	r3, r3
 800118c:	3b01      	subs	r3, #1
 800118e:	b29b      	uxth	r3, r3
 8001190:	b21b      	sxth	r3, r3
 8001192:	f9b7 402c 	ldrsh.w	r4, [r7, #44]	@ 0x2c
 8001196:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001198:	9202      	str	r2, [sp, #8]
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	2302      	movs	r3, #2
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	4623      	mov	r3, r4
 80011a2:	4602      	mov	r2, r0
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f7ff fd2f 	bl	8000c08 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  endWrite();
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	331c      	adds	r3, #28
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	4798      	blx	r3
}
 80011b6:	bf00      	nop
 80011b8:	371c      	adds	r7, #28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd90      	pop	{r4, r7, pc}

080011be <_ZN12Adafruit_GFX12drawTriangleEsssssst>:
    @param    y2  Vertex #2 y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                                int16_t x2, int16_t y2, uint16_t color) {
 80011be:	b590      	push	{r4, r7, lr}
 80011c0:	b087      	sub	sp, #28
 80011c2:	af02      	add	r7, sp, #8
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	4608      	mov	r0, r1
 80011c8:	4611      	mov	r1, r2
 80011ca:	461a      	mov	r2, r3
 80011cc:	4603      	mov	r3, r0
 80011ce:	817b      	strh	r3, [r7, #10]
 80011d0:	460b      	mov	r3, r1
 80011d2:	813b      	strh	r3, [r7, #8]
 80011d4:	4613      	mov	r3, r2
 80011d6:	80fb      	strh	r3, [r7, #6]
  drawLine(x0, y0, x1, y1, color);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3338      	adds	r3, #56	@ 0x38
 80011de:	681c      	ldr	r4, [r3, #0]
 80011e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80011e4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80011e8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80011ec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	4603      	mov	r3, r0
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	47a0      	blx	r4
  drawLine(x1, y1, x2, y2, color);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	3338      	adds	r3, #56	@ 0x38
 8001202:	681c      	ldr	r4, [r3, #0]
 8001204:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
 8001208:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800120c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001210:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	4603      	mov	r3, r0
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	47a0      	blx	r4
  drawLine(x2, y2, x0, y0, color);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3338      	adds	r3, #56	@ 0x38
 8001226:	681c      	ldr	r4, [r3, #0]
 8001228:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 800122c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8001230:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 8001234:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	4603      	mov	r3, r0
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	47a0      	blx	r4
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	bd90      	pop	{r4, r7, pc}

0800124c <_ZN12Adafruit_GFX12fillTriangleEsssssst>:
    @param    y2  Vertex #2 y coordinate
    @param    color 16-bit 5-6-5 Color to fill/draw with
*/
/**************************************************************************/
void Adafruit_GFX::fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                                int16_t x2, int16_t y2, uint16_t color) {
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b093      	sub	sp, #76	@ 0x4c
 8001250:	af02      	add	r7, sp, #8
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	4608      	mov	r0, r1
 8001256:	4611      	mov	r1, r2
 8001258:	461a      	mov	r2, r3
 800125a:	4603      	mov	r3, r0
 800125c:	817b      	strh	r3, [r7, #10]
 800125e:	460b      	mov	r3, r1
 8001260:	813b      	strh	r3, [r7, #8]
 8001262:	4613      	mov	r3, r2
 8001264:	80fb      	strh	r3, [r7, #6]

  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1) {
 8001266:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800126a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 800126e:	429a      	cmp	r2, r3
 8001270:	dd0d      	ble.n	800128e <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x42>
    _swap_int16_t(y0, y1);
 8001272:	893b      	ldrh	r3, [r7, #8]
 8001274:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001276:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800127a:	813b      	strh	r3, [r7, #8]
 800127c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800127e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    _swap_int16_t(x0, x1);
 8001282:	897b      	ldrh	r3, [r7, #10]
 8001284:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	817b      	strh	r3, [r7, #10]
 800128a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800128c:	80fb      	strh	r3, [r7, #6]
  }
  if (y1 > y2) {
 800128e:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	@ 0x50
 8001292:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8001296:	429a      	cmp	r2, r3
 8001298:	dd11      	ble.n	80012be <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x72>
    _swap_int16_t(y2, y1);
 800129a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800129e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80012a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80012a4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80012a8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80012aa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    _swap_int16_t(x2, x1);
 80012ae:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80012b2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 80012ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80012bc:	80fb      	strh	r3, [r7, #6]
  }
  if (y0 > y1) {
 80012be:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80012c2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 80012c6:	429a      	cmp	r2, r3
 80012c8:	dd0d      	ble.n	80012e6 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x9a>
    _swap_int16_t(y0, y1);
 80012ca:	893b      	ldrh	r3, [r7, #8]
 80012cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80012ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80012d2:	813b      	strh	r3, [r7, #8]
 80012d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012d6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    _swap_int16_t(x0, x1);
 80012da:	897b      	ldrh	r3, [r7, #10]
 80012dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	817b      	strh	r3, [r7, #10]
 80012e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80012e4:	80fb      	strh	r3, [r7, #6]
  }

  startWrite();
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3304      	adds	r3, #4
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	4798      	blx	r3
  if (y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80012f2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80012f6:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d143      	bne.n	8001386 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x13a>
    a = b = x0;
 80012fe:	897b      	ldrh	r3, [r7, #10]
 8001300:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001302:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001304:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (x1 < a)
 8001306:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800130a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800130e:	429a      	cmp	r2, r3
 8001310:	da02      	bge.n	8001318 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xcc>
      a = x1;
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001316:	e007      	b.n	8001328 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xdc>
    else if (x1 > b)
 8001318:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800131c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001320:	429a      	cmp	r2, r3
 8001322:	dd01      	ble.n	8001328 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xdc>
      b = x1;
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (x2 < a)
 8001328:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	@ 0x54
 800132c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8001330:	429a      	cmp	r2, r3
 8001332:	da03      	bge.n	800133c <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xf0>
      a = x2;
 8001334:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8001338:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800133a:	e008      	b.n	800134e <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x102>
    else if (x2 > b)
 800133c:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	@ 0x54
 8001340:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001344:	429a      	cmp	r2, r3
 8001346:	dd02      	ble.n	800134e <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x102>
      b = x2;
 8001348:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800134c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    writeFastHLine(a, y0, b - a + 1, color);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3314      	adds	r3, #20
 8001354:	681c      	ldr	r4, [r3, #0]
 8001356:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001358:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	b29b      	uxth	r3, r3
 800135e:	3301      	adds	r3, #1
 8001360:	b29b      	uxth	r3, r3
 8001362:	b218      	sxth	r0, r3
 8001364:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001368:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	@ 0x3e
 800136c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	4603      	mov	r3, r0
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	47a0      	blx	r4
    endWrite();
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	331c      	adds	r3, #28
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	4798      	blx	r3
    return;
 8001384:	e0ea      	b.n	800155c <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x310>
  }

  int16_t dx01 = x1 - x0, dy01 = y1 - y0, dx02 = x2 - x0, dy02 = y2 - y0,
 8001386:	88fa      	ldrh	r2, [r7, #6]
 8001388:	897b      	ldrh	r3, [r7, #10]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	b29b      	uxth	r3, r3
 800138e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001390:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001394:	893b      	ldrh	r3, [r7, #8]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	b29b      	uxth	r3, r3
 800139a:	843b      	strh	r3, [r7, #32]
 800139c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 80013a0:	897b      	ldrh	r3, [r7, #10]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	83fb      	strh	r3, [r7, #30]
 80013a8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80013ac:	893b      	ldrh	r3, [r7, #8]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	83bb      	strh	r3, [r7, #28]
          dx12 = x2 - x1, dy12 = y2 - y1;
 80013b4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	b29b      	uxth	r3, r3
 80013be:	837b      	strh	r3, [r7, #26]
 80013c0:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80013c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	833b      	strh	r3, [r7, #24]
  int32_t sa = 0, sb = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80013d2:	2300      	movs	r3, #0
 80013d4:	633b      	str	r3, [r7, #48]	@ 0x30
  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if (y1 == y2)
 80013d6:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	@ 0x50
 80013da:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 80013de:	429a      	cmp	r2, r3
 80013e0:	d103      	bne.n	80013ea <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x19e>
    last = y1; // Include y1 scanline
 80013e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80013e6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80013e8:	e004      	b.n	80013f4 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x1a8>
  else
    last = y1 - 1; // Skip it
 80013ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80013ee:	3b01      	subs	r3, #1
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	873b      	strh	r3, [r7, #56]	@ 0x38

  for (y = y0; y <= last; y++) {
 80013f4:	893b      	ldrh	r3, [r7, #8]
 80013f6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80013f8:	e044      	b.n	8001484 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x238>
    a = x0 + sa / dy01;
 80013fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80013fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001400:	fb92 f3f3 	sdiv	r3, r2, r3
 8001404:	b29a      	uxth	r2, r3
 8001406:	897b      	ldrh	r3, [r7, #10]
 8001408:	4413      	add	r3, r2
 800140a:	b29b      	uxth	r3, r3
 800140c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    b = x0 + sb / dy02;
 800140e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001414:	fb92 f3f3 	sdiv	r3, r2, r3
 8001418:	b29a      	uxth	r2, r3
 800141a:	897b      	ldrh	r3, [r7, #10]
 800141c:	4413      	add	r3, r2
 800141e:	b29b      	uxth	r3, r3
 8001420:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    sa += dx01;
 8001422:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001426:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001428:	4413      	add	r3, r2
 800142a:	637b      	str	r3, [r7, #52]	@ 0x34
    sb += dx02;
 800142c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001432:	4413      	add	r3, r2
 8001434:	633b      	str	r3, [r7, #48]	@ 0x30
    /* longhand:
    a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
    */
    if (a > b)
 8001436:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 800143a:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800143e:	429a      	cmp	r2, r3
 8001440:	dd05      	ble.n	800144e <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x202>
      _swap_int16_t(a, b);
 8001442:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001444:	82bb      	strh	r3, [r7, #20]
 8001446:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001448:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800144a:	8abb      	ldrh	r3, [r7, #20]
 800144c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    writeFastHLine(a, y, b - a + 1, color);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	3314      	adds	r3, #20
 8001454:	681c      	ldr	r4, [r3, #0]
 8001456:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001458:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	b29b      	uxth	r3, r3
 800145e:	3301      	adds	r3, #1
 8001460:	b29b      	uxth	r3, r3
 8001462:	b218      	sxth	r0, r3
 8001464:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 8001468:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	@ 0x3e
 800146c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	4603      	mov	r3, r0
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	47a0      	blx	r4
  for (y = y0; y <= last; y++) {
 8001478:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800147c:	b29b      	uxth	r3, r3
 800147e:	3301      	adds	r3, #1
 8001480:	b29b      	uxth	r3, r3
 8001482:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001484:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 8001488:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800148c:	429a      	cmp	r2, r3
 800148e:	ddb4      	ble.n	80013fa <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x1ae>
  }

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = (int32_t)dx12 * (y - y1);
 8001490:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001494:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	@ 0x3a
 8001498:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	@ 0x50
 800149c:	1a8a      	subs	r2, r1, r2
 800149e:	fb02 f303 	mul.w	r3, r2, r3
 80014a2:	637b      	str	r3, [r7, #52]	@ 0x34
  sb = (int32_t)dx02 * (y - y0);
 80014a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014a8:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	@ 0x3a
 80014ac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80014b0:	1a8a      	subs	r2, r1, r2
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	633b      	str	r3, [r7, #48]	@ 0x30
  for (; y <= y2; y++) {
 80014b8:	e044      	b.n	8001544 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x2f8>
    a = x1 + sa / dy12;
 80014ba:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	4413      	add	r3, r2
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    b = x0 + sb / dy02;
 80014ce:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80014d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80014d8:	b29a      	uxth	r2, r3
 80014da:	897b      	ldrh	r3, [r7, #10]
 80014dc:	4413      	add	r3, r2
 80014de:	b29b      	uxth	r3, r3
 80014e0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    sa += dx12;
 80014e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014e8:	4413      	add	r3, r2
 80014ea:	637b      	str	r3, [r7, #52]	@ 0x34
    sb += dx02;
 80014ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014f2:	4413      	add	r3, r2
 80014f4:	633b      	str	r3, [r7, #48]	@ 0x30
    /* longhand:
    a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
    */
    if (a > b)
 80014f6:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 80014fa:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 80014fe:	429a      	cmp	r2, r3
 8001500:	dd05      	ble.n	800150e <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x2c2>
      _swap_int16_t(a, b);
 8001502:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001504:	82fb      	strh	r3, [r7, #22]
 8001506:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001508:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800150a:	8afb      	ldrh	r3, [r7, #22]
 800150c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    writeFastHLine(a, y, b - a + 1, color);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3314      	adds	r3, #20
 8001514:	681c      	ldr	r4, [r3, #0]
 8001516:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001518:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	b29b      	uxth	r3, r3
 800151e:	3301      	adds	r3, #1
 8001520:	b29b      	uxth	r3, r3
 8001522:	b218      	sxth	r0, r3
 8001524:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 8001528:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	@ 0x3e
 800152c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4603      	mov	r3, r0
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	47a0      	blx	r4
  for (; y <= y2; y++) {
 8001538:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800153c:	b29b      	uxth	r3, r3
 800153e:	3301      	adds	r3, #1
 8001540:	b29b      	uxth	r3, r3
 8001542:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001544:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 8001548:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 800154c:	429a      	cmp	r2, r3
 800154e:	ddb4      	ble.n	80014ba <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x26e>
  }
  endWrite();
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	331c      	adds	r3, #28
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	4798      	blx	r3
}
 800155c:	3744      	adds	r7, #68	@ 0x44
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}
	...

08001564 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size_x,
                            uint8_t size_y) {
 8001564:	b5b0      	push	{r4, r5, r7, lr}
 8001566:	b08e      	sub	sp, #56	@ 0x38
 8001568:	af02      	add	r7, sp, #8
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	4608      	mov	r0, r1
 800156e:	4611      	mov	r1, r2
 8001570:	461a      	mov	r2, r3
 8001572:	4603      	mov	r3, r0
 8001574:	817b      	strh	r3, [r7, #10]
 8001576:	460b      	mov	r3, r1
 8001578:	813b      	strh	r3, [r7, #8]
 800157a:	4613      	mov	r3, r2
 800157c:	71fb      	strb	r3, [r7, #7]

  if (!gfxFont) { // 'Classic' built-in font
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f040 8153 	bne.w	800182e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ca>

    if ((x >= _width) ||              // Clip right
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800158e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001592:	429a      	cmp	r2, r3
 8001594:	f280 8234 	bge.w	8001a00 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
        (y >= _height) ||             // Clip bottom
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    if ((x >= _width) ||              // Clip right
 800159e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	f280 822c 	bge.w	8001a00 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 80015a8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80015ac:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80015b0:	4613      	mov	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	440b      	add	r3, r1
        (y >= _height) ||             // Clip bottom
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f340 8220 	ble.w	8001a00 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 80015c0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80015c4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4413      	add	r3, r2
        ((x + 6 * size_x - 1) < 0) || // Clip left
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f340 8217 	ble.w	8001a00 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
      return;

    if (!_cp437 && (c >= 176))
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	7e1b      	ldrb	r3, [r3, #24]
 80015d6:	f083 0301 	eor.w	r3, r3, #1
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x88>
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2baf      	cmp	r3, #175	@ 0xaf
 80015e4:	d902      	bls.n	80015ec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x88>
      c++; // Handle 'classic' charset behavior
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	3301      	adds	r3, #1
 80015ea:	71fb      	strb	r3, [r7, #7]

    startWrite();
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3304      	adds	r3, #4
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	4798      	blx	r3
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80015f8:	2300      	movs	r3, #0
 80015fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80015fe:	e0c9      	b.n	8001794 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x230>
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8001600:	79fa      	ldrb	r2, [r7, #7]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	441a      	add	r2, r3
 8001608:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800160c:	4413      	add	r3, r2
 800160e:	4aad      	ldr	r2, [pc, #692]	@ (80018c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x360>)
 8001610:	5cd3      	ldrb	r3, [r2, r3]
 8001612:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8001616:	2300      	movs	r3, #0
 8001618:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800161c:	e0ae      	b.n	800177c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x218>
        if (line & 1) {
 800161e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d04b      	beq.n	80016c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x15e>
          if (size_x == 1 && size_y == 1)
 800162a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800162e:	2b01      	cmp	r3, #1
 8001630:	d11a      	bne.n	8001668 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x104>
 8001632:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001636:	2b01      	cmp	r3, #1
 8001638:	d116      	bne.n	8001668 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x104>
            writePixel(x + i, y + j, color);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3308      	adds	r3, #8
 8001640:	681c      	ldr	r4, [r3, #0]
 8001642:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001646:	b29a      	uxth	r2, r3
 8001648:	897b      	ldrh	r3, [r7, #10]
 800164a:	4413      	add	r3, r2
 800164c:	b29b      	uxth	r3, r3
 800164e:	b219      	sxth	r1, r3
 8001650:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8001654:	b29a      	uxth	r2, r3
 8001656:	893b      	ldrh	r3, [r7, #8]
 8001658:	4413      	add	r3, r2
 800165a:	b29b      	uxth	r3, r3
 800165c:	b21a      	sxth	r2, r3
 800165e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	47a0      	blx	r4
 8001666:	e07d      	b.n	8001764 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	330c      	adds	r3, #12
 800166e:	681c      	ldr	r4, [r3, #0]
 8001670:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001674:	b29b      	uxth	r3, r3
 8001676:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800167a:	b292      	uxth	r2, r2
 800167c:	fb02 f303 	mul.w	r3, r2, r3
 8001680:	b29a      	uxth	r2, r3
 8001682:	897b      	ldrh	r3, [r7, #10]
 8001684:	4413      	add	r3, r2
 8001686:	b29b      	uxth	r3, r3
 8001688:	b219      	sxth	r1, r3
 800168a:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800168e:	b29b      	uxth	r3, r3
 8001690:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8001694:	b292      	uxth	r2, r2
 8001696:	fb02 f303 	mul.w	r3, r2, r3
 800169a:	b29a      	uxth	r2, r3
 800169c:	893b      	ldrh	r3, [r7, #8]
 800169e:	4413      	add	r3, r2
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	b218      	sxth	r0, r3
 80016a4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80016a8:	b21d      	sxth	r5, r3
 80016aa:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80016b4:	9201      	str	r2, [sp, #4]
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	462b      	mov	r3, r5
 80016ba:	4602      	mov	r2, r0
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	47a0      	blx	r4
 80016c0:	e050      	b.n	8001764 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
                          color);
        } else if (bg != color) {
 80016c2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80016c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d04a      	beq.n	8001764 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
          if (size_x == 1 && size_y == 1)
 80016ce:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d11a      	bne.n	800170c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1a8>
 80016d6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d116      	bne.n	800170c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1a8>
            writePixel(x + i, y + j, bg);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3308      	adds	r3, #8
 80016e4:	681c      	ldr	r4, [r3, #0]
 80016e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	897b      	ldrh	r3, [r7, #10]
 80016ee:	4413      	add	r3, r2
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	b219      	sxth	r1, r3
 80016f4:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	893b      	ldrh	r3, [r7, #8]
 80016fc:	4413      	add	r3, r2
 80016fe:	b29b      	uxth	r3, r3
 8001700:	b21a      	sxth	r2, r3
 8001702:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	47a0      	blx	r4
 800170a:	e02b      	b.n	8001764 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	330c      	adds	r3, #12
 8001712:	681c      	ldr	r4, [r3, #0]
 8001714:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001718:	b29b      	uxth	r3, r3
 800171a:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800171e:	b292      	uxth	r2, r2
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	b29a      	uxth	r2, r3
 8001726:	897b      	ldrh	r3, [r7, #10]
 8001728:	4413      	add	r3, r2
 800172a:	b29b      	uxth	r3, r3
 800172c:	b219      	sxth	r1, r3
 800172e:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8001732:	b29b      	uxth	r3, r3
 8001734:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8001738:	b292      	uxth	r2, r2
 800173a:	fb02 f303 	mul.w	r3, r2, r3
 800173e:	b29a      	uxth	r2, r3
 8001740:	893b      	ldrh	r3, [r7, #8]
 8001742:	4413      	add	r3, r2
 8001744:	b29b      	uxth	r3, r3
 8001746:	b218      	sxth	r0, r3
 8001748:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800174c:	b21d      	sxth	r5, r3
 800174e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001752:	b21b      	sxth	r3, r3
 8001754:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8001758:	9201      	str	r2, [sp, #4]
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	462b      	mov	r3, r5
 800175e:	4602      	mov	r2, r0
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	47a0      	blx	r4
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8001764:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8001768:	b2db      	uxtb	r3, r3
 800176a:	3301      	adds	r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001772:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001776:	085b      	lsrs	r3, r3, #1
 8001778:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800177c:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8001780:	2b07      	cmp	r3, #7
 8001782:	f77f af4c 	ble.w	800161e <_ZN12Adafruit_GFX8drawCharEsshtthh+0xba>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8001786:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800178a:	b2db      	uxtb	r3, r3
 800178c:	3301      	adds	r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001794:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001798:	2b04      	cmp	r3, #4
 800179a:	f77f af31 	ble.w	8001600 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x9c>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 800179e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80017a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d03a      	beq.n	8001820 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2bc>
      if (size_x == 1 && size_y == 1)
 80017aa:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d114      	bne.n	80017dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x278>
 80017b2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d110      	bne.n	80017dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x278>
        writeFastVLine(x + 5, y, 8, bg);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3310      	adds	r3, #16
 80017c0:	681c      	ldr	r4, [r3, #0]
 80017c2:	897b      	ldrh	r3, [r7, #10]
 80017c4:	3305      	adds	r3, #5
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	b219      	sxth	r1, r3
 80017ca:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80017ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2308      	movs	r3, #8
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	47a0      	blx	r4
 80017da:	e021      	b.n	8001820 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2bc>
      else
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	330c      	adds	r3, #12
 80017e2:	681c      	ldr	r4, [r3, #0]
 80017e4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	0092      	lsls	r2, r2, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	897b      	ldrh	r3, [r7, #10]
 80017f4:	4413      	add	r3, r2
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	b219      	sxth	r1, r3
 80017fa:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80017fe:	b21d      	sxth	r5, r3
 8001800:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001804:	b29b      	uxth	r3, r3
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	b29b      	uxth	r3, r3
 800180a:	b21b      	sxth	r3, r3
 800180c:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8001810:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8001814:	9201      	str	r2, [sp, #4]
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	462b      	mov	r3, r5
 800181a:	4602      	mov	r2, r0
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	47a0      	blx	r4
    }
    endWrite();
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	331c      	adds	r3, #28
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	4798      	blx	r3
 800182c:	e0e9      	b.n	8001a02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49e>

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling
    // drawChar() directly with 'bad' characters of font may cause mayhem!

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	3308      	adds	r3, #8
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	79fa      	ldrb	r2, [r7, #7]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	71fb      	strb	r3, [r7, #7]
    GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	79fa      	ldrb	r2, [r7, #7]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fcbe 	bl	80001c6 <_Z18pgm_read_glyph_ptrPK7GFXfonth>
 800184a:	61f8      	str	r0, [r7, #28]
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fcc8 	bl	80001e6 <_Z19pgm_read_bitmap_ptrPK7GFXfont>
 8001856:	61b8      	str	r0, [r7, #24]

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3302      	adds	r3, #2
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	75fb      	strb	r3, [r7, #23]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3303      	adds	r3, #3
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	75bb      	strb	r3, [r7, #22]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3305      	adds	r3, #5
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	757b      	strb	r3, [r7, #21]
           yo = pgm_read_byte(&glyph->yOffset);
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3306      	adds	r3, #6
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	753b      	strb	r3, [r7, #20]
    uint8_t xx, yy, bits = 0, bit = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001884:	2300      	movs	r3, #0
 8001886:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int16_t xo16 = 0, yo16 = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800188e:	2300      	movs	r3, #0
 8001890:	847b      	strh	r3, [r7, #34]	@ 0x22

    if (size_x > 1 || size_y > 1) {
 8001892:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001896:	2b01      	cmp	r3, #1
 8001898:	d803      	bhi.n	80018a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x33e>
 800189a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d905      	bls.n	80018ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x34a>
      xo16 = xo;
 80018a2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80018a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
      yo16 = yo;
 80018a8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80018ac:	847b      	strh	r3, [r7, #34]	@ 0x22
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	3304      	adds	r3, #4
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	4798      	blx	r3
    for (yy = 0; yy < h; yy++) {
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80018c0:	e091      	b.n	80019e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x482>
 80018c2:	bf00      	nop
 80018c4:	08005190 	.word	0x08005190
      for (xx = 0; xx < w; xx++) {
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80018ce:	e07f      	b.n	80019d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x46c>
        if (!(bit++ & 7)) {
 80018d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	2b00      	cmp	r3, #0
 80018e0:	bf0c      	ite	eq
 80018e2:	2301      	moveq	r3, #1
 80018e4:	2300      	movne	r3, #0
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x39a>
          bits = pgm_read_byte(&bitmap[bo++]);
 80018ec:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	857a      	strh	r2, [r7, #42]	@ 0x2a
 80018f2:	461a      	mov	r2, r3
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	4413      	add	r3, r2
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
        if (bits & 0x80) {
 80018fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001902:	2b00      	cmp	r3, #0
 8001904:	da5a      	bge.n	80019bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x458>
          if (size_x == 1 && size_y == 1) {
 8001906:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800190a:	2b01      	cmp	r3, #1
 800190c:	d124      	bne.n	8001958 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f4>
 800190e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001912:	2b01      	cmp	r3, #1
 8001914:	d120      	bne.n	8001958 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f4>
            writePixel(x + xo + xx, y + yo + yy, color);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	3308      	adds	r3, #8
 800191c:	681c      	ldr	r4, [r3, #0]
 800191e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001922:	b29a      	uxth	r2, r3
 8001924:	897b      	ldrh	r3, [r7, #10]
 8001926:	4413      	add	r3, r2
 8001928:	b29a      	uxth	r2, r3
 800192a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800192e:	b29b      	uxth	r3, r3
 8001930:	4413      	add	r3, r2
 8001932:	b29b      	uxth	r3, r3
 8001934:	b219      	sxth	r1, r3
 8001936:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800193a:	b29a      	uxth	r2, r3
 800193c:	893b      	ldrh	r3, [r7, #8]
 800193e:	4413      	add	r3, r2
 8001940:	b29a      	uxth	r2, r3
 8001942:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001946:	b29b      	uxth	r3, r3
 8001948:	4413      	add	r3, r2
 800194a:	b29b      	uxth	r3, r3
 800194c:	b21a      	sxth	r2, r3
 800194e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	47a0      	blx	r4
 8001956:	e031      	b.n	80019bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x458>
          } else {
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	330c      	adds	r3, #12
 800195e:	681c      	ldr	r4, [r3, #0]
 8001960:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001964:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001968:	4413      	add	r3, r2
 800196a:	b29b      	uxth	r3, r3
 800196c:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8001970:	b292      	uxth	r2, r2
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	b29a      	uxth	r2, r3
 8001978:	897b      	ldrh	r3, [r7, #10]
 800197a:	4413      	add	r3, r2
 800197c:	b29b      	uxth	r3, r3
 800197e:	b219      	sxth	r1, r3
 8001980:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8001984:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001988:	4413      	add	r3, r2
 800198a:	b29b      	uxth	r3, r3
 800198c:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8001990:	b292      	uxth	r2, r2
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	b29a      	uxth	r2, r3
 8001998:	893b      	ldrh	r3, [r7, #8]
 800199a:	4413      	add	r3, r2
 800199c:	b29b      	uxth	r3, r3
 800199e:	b218      	sxth	r0, r3
 80019a0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80019a4:	b21d      	sxth	r5, r3
 80019a6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80019b0:	9201      	str	r2, [sp, #4]
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	462b      	mov	r3, r5
 80019b6:	4602      	mov	r2, r0
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	47a0      	blx	r4
                          size_x, size_y, color);
          }
        }
        bits <<= 1;
 80019bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      for (xx = 0; xx < w; xx++) {
 80019c6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80019ca:	3301      	adds	r3, #1
 80019cc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80019d0:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	f4ff af7a 	bcc.w	80018d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x36c>
    for (yy = 0; yy < h; yy++) {
 80019dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019e0:	3301      	adds	r3, #1
 80019e2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80019e6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80019ea:	7dbb      	ldrb	r3, [r7, #22]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f4ff af6b 	bcc.w	80018c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x364>
      }
    }
    endWrite();
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	331c      	adds	r3, #28
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	4798      	blx	r3
 80019fe:	e000      	b.n	8001a02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49e>
      return;
 8001a00:	bf00      	nop

  } // End classic vs custom font
}
 8001a02:	3730      	adds	r7, #48	@ 0x30
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bdb0      	pop	{r4, r5, r7, pc}

08001a08 <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
 8001a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0a:	b08b      	sub	sp, #44	@ 0x2c
 8001a0c:	af04      	add	r7, sp, #16
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	70fb      	strb	r3, [r7, #3]
  if (!gfxFont) { // 'Classic' built-in font
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d166      	bne.n	8001aea <_ZN12Adafruit_GFX5writeEh+0xe2>

    if (c == '\n') {              // Newline?
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	2b0a      	cmp	r3, #10
 8001a20:	d110      	bne.n	8001a44 <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	819a      	strh	r2, [r3, #12]
      cursor_y += textsize_y * 8; // advance y one line
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7d5b      	ldrb	r3, [r3, #21]
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	b21a      	sxth	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	81da      	strh	r2, [r3, #14]
 8001a42:	e0f5      	b.n	8001c30 <_ZN12Adafruit_GFX5writeEh+0x228>
    } else if (c != '\r') {       // Ignore carriage returns
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	2b0d      	cmp	r3, #13
 8001a48:	f000 80f2 	beq.w	8001c30 <_ZN12Adafruit_GFX5writeEh+0x228>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7ddb      	ldrb	r3, [r3, #23]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d020      	beq.n	8001a96 <_ZN12Adafruit_GFX5writeEh+0x8e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7d1b      	ldrb	r3, [r3, #20]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	440b      	add	r3, r1
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001a72:	4293      	cmp	r3, r2
 8001a74:	dd0f      	ble.n	8001a96 <_ZN12Adafruit_GFX5writeEh+0x8e>
        cursor_x = 0;                                       // Reset x to zero,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	819a      	strh	r2, [r3, #12]
        cursor_y += textsize_y * 8; // advance y one line
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7d5b      	ldrb	r3, [r3, #21]
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	b21a      	sxth	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	81da      	strh	r2, [r3, #14]
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f9b3 500e 	ldrsh.w	r5, [r3, #14]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	8a1b      	ldrh	r3, [r3, #16]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	8a52      	ldrh	r2, [r2, #18]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	7d09      	ldrb	r1, [r1, #20]
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	7d40      	ldrb	r0, [r0, #21]
 8001ab2:	78fe      	ldrb	r6, [r7, #3]
 8001ab4:	9003      	str	r0, [sp, #12]
 8001ab6:	9102      	str	r1, [sp, #8]
 8001ab8:	9201      	str	r2, [sp, #4]
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4633      	mov	r3, r6
 8001abe:	462a      	mov	r2, r5
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fd4e 	bl	8001564 <_ZN12Adafruit_GFX8drawCharEsshtthh>
               textsize_y);
      cursor_x += textsize_x * 6; // Advance x one char
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7d1b      	ldrb	r3, [r3, #20]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	0049      	lsls	r1, r1, #1
 8001ad8:	440b      	add	r3, r1
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	4413      	add	r3, r2
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	819a      	strh	r2, [r3, #12]
 8001ae8:	e0a2      	b.n	8001c30 <_ZN12Adafruit_GFX5writeEh+0x228>
    }

  } else { // Custom font

    if (c == '\n') {
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	2b0a      	cmp	r3, #10
 8001aee:	d116      	bne.n	8001b1e <_ZN12Adafruit_GFX5writeEh+0x116>
      cursor_x = 0;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	819a      	strh	r2, [r3, #12]
      cursor_y +=
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001afc:	b29a      	uxth	r2, r3
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7d5b      	ldrb	r3, [r3, #21]
 8001b02:	4619      	mov	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	330c      	adds	r3, #12
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	fb01 f303 	mul.w	r3, r1, r3
 8001b10:	b29b      	uxth	r3, r3
      cursor_y +=
 8001b12:	4413      	add	r3, r2
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	81da      	strh	r2, [r3, #14]
 8001b1c:	e088      	b.n	8001c30 <_ZN12Adafruit_GFX5writeEh+0x228>
    } else if (c != '\r') {
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	2b0d      	cmp	r3, #13
 8001b22:	f000 8085 	beq.w	8001c30 <_ZN12Adafruit_GFX5writeEh+0x228>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	3308      	adds	r3, #8
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	75fb      	strb	r3, [r7, #23]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	7dfb      	ldrb	r3, [r7, #23]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d37b      	bcc.n	8001c30 <_ZN12Adafruit_GFX5writeEh+0x228>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	330a      	adds	r3, #10
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	78fa      	ldrb	r2, [r7, #3]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d874      	bhi.n	8001c30 <_ZN12Adafruit_GFX5writeEh+0x228>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69d8      	ldr	r0, [r3, #28]
 8001b4a:	78fa      	ldrb	r2, [r7, #3]
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	4619      	mov	r1, r3
 8001b54:	f7fe fb37 	bl	80001c6 <_Z18pgm_read_glyph_ptrPK7GFXfonth>
 8001b58:	6138      	str	r0, [r7, #16]
        uint8_t w = pgm_read_byte(&glyph->width),
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	73fb      	strb	r3, [r7, #15]
                h = pgm_read_byte(&glyph->height);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	3303      	adds	r3, #3
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	73bb      	strb	r3, [r7, #14]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d04d      	beq.n	8001c0c <_ZN12Adafruit_GFX5writeEh+0x204>
 8001b70:	7bbb      	ldrb	r3, [r7, #14]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d04a      	beq.n	8001c0c <_ZN12Adafruit_GFX5writeEh+0x204>
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	3305      	adds	r3, #5
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	81bb      	strh	r3, [r7, #12]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7ddb      	ldrb	r3, [r3, #23]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d028      	beq.n	8001bda <_ZN12Adafruit_GFX5writeEh+0x1d2>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	7d1b      	ldrb	r3, [r3, #20]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	fb00 f303 	mul.w	r3, r0, r3
 8001ba2:	440b      	add	r3, r1
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001baa:	4293      	cmp	r3, r2
 8001bac:	dd15      	ble.n	8001bda <_ZN12Adafruit_GFX5writeEh+0x1d2>
            cursor_x = 0;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	819a      	strh	r2, [r3, #12]
            cursor_y += (int16_t)textsize_y *
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7d5b      	ldrb	r3, [r3, #21]
 8001bc0:	4619      	mov	r1, r3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	330c      	adds	r3, #12
 8001bc8:	781b      	ldrb	r3, [r3, #0]
            cursor_y += (int16_t)textsize_y *
 8001bca:	fb01 f303 	mul.w	r3, r1, r3
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	b21a      	sxth	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	81da      	strh	r2, [r3, #14]
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f9b3 500e 	ldrsh.w	r5, [r3, #14]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	8a1b      	ldrh	r3, [r3, #16]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	8a52      	ldrh	r2, [r2, #18]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	7d09      	ldrb	r1, [r1, #20]
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	7d40      	ldrb	r0, [r0, #21]
 8001bf6:	78fe      	ldrb	r6, [r7, #3]
 8001bf8:	9003      	str	r0, [sp, #12]
 8001bfa:	9102      	str	r1, [sp, #8]
 8001bfc:	9201      	str	r2, [sp, #4]
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	4633      	mov	r3, r6
 8001c02:	462a      	mov	r2, r5
 8001c04:	4621      	mov	r1, r4
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fcac 	bl	8001564 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                   textsize_y);
        }
        cursor_x +=
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c12:	b29a      	uxth	r2, r3
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	3304      	adds	r3, #4
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	7d1b      	ldrb	r3, [r3, #20]
 8001c20:	fb01 f303 	mul.w	r3, r1, r3
 8001c24:	b29b      	uxth	r3, r3
        cursor_x +=
 8001c26:	4413      	add	r3, r2
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	b21a      	sxth	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	819a      	strh	r2, [r3, #12]
      }
    }
  }
  return 1;
 8001c30:	2301      	movs	r3, #1
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	371c      	adds	r7, #28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c3a <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	70fb      	strb	r3, [r7, #3]
 8001c46:	78fa      	ldrb	r2, [r7, #3]
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f804 	bl	8001c5a <_ZN12Adafruit_GFX11setTextSizeEhh>
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_ZN12Adafruit_GFX11setTextSizeEhh>:
   that much bigger.
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	70fb      	strb	r3, [r7, #3]
 8001c66:	4613      	mov	r3, r2
 8001c68:	70bb      	strb	r3, [r7, #2]
  textsize_x = (s_x > 0) ? s_x : 1;
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <_ZN12Adafruit_GFX11setTextSizeEhh+0x1a>
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	e000      	b.n	8001c76 <_ZN12Adafruit_GFX11setTextSizeEhh+0x1c>
 8001c74:	2201      	movs	r2, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	751a      	strb	r2, [r3, #20]
  textsize_y = (s_y > 0) ? s_y : 1;
 8001c7a:	78bb      	ldrb	r3, [r7, #2]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <_ZN12Adafruit_GFX11setTextSizeEhh+0x2a>
 8001c80:	78ba      	ldrb	r2, [r7, #2]
 8001c82:	e000      	b.n	8001c86 <_ZN12Adafruit_GFX11setTextSizeEhh+0x2c>
 8001c84:	2201      	movs	r2, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	755a      	strb	r2, [r3, #21]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <_ZN12Adafruit_GFX11setRotationEh>:
/*!
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	70fb      	strb	r3, [r7, #3]
  rotation = (x & 3);
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	759a      	strb	r2, [r3, #22]
  switch (rotation) {
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7d9b      	ldrb	r3, [r3, #22]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d821      	bhi.n	8001cf8 <_ZN12Adafruit_GFX11setRotationEh+0x64>
 8001cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8001cbc <_ZN12Adafruit_GFX11setRotationEh+0x28>)
 8001cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cba:	bf00      	nop
 8001cbc:	08001ccd 	.word	0x08001ccd
 8001cc0:	08001ce3 	.word	0x08001ce3
 8001cc4:	08001ccd 	.word	0x08001ccd
 8001cc8:	08001ce3 	.word	0x08001ce3
  case 0:
  case 2:
    _width = WIDTH;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	811a      	strh	r2, [r3, #8]
    _height = HEIGHT;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	815a      	strh	r2, [r3, #10]
    break;
 8001ce0:	e00a      	b.n	8001cf8 <_ZN12Adafruit_GFX11setRotationEh+0x64>
  case 1:
  case 3:
    _width = HEIGHT;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	811a      	strh	r2, [r3, #8]
    _height = WIDTH;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	815a      	strh	r2, [r3, #10]
    break;
 8001cf6:	bf00      	nop
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop

08001d04 <_ZN12Adafruit_GFX13invertDisplayEb>:
/*!
    @brief      Invert the display (ideally using built-in hardware command)
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	70fb      	strb	r3, [r7, #3]
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
	...

08001d1c <_ZN15Adafruit_SPITFT11SPI_CS_HIGHEv>:
      @brief  Set the chip-select line HIGH. Does NOT check whether CS pin
              is set (>=0), that should be handled in calling function.
              Despite function name, this is used even if the display
              connection is parallel.
  */
  void SPI_CS_HIGH(void) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_CS_GPIO,_cs,GPIO_PIN_SET);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4803      	ldr	r0, [pc, #12]	@ (8001d40 <_ZN15Adafruit_SPITFT11SPI_CS_HIGHEv+0x24>)
 8001d32:	f002 fac4 	bl	80042be <HAL_GPIO_WritePin>
  }
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40010800 	.word	0x40010800

08001d44 <_ZN15Adafruit_SPITFT10SPI_CS_LOWEv>:
      @brief  Set the chip-select line LOW. Does NOT check whether CS pin
              is set (>=0), that should be handled in calling function.
              Despite function name, this is used even if the display
              connection is parallel.
  */
  void SPI_CS_LOW(void) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_CS_GPIO,_cs,GPIO_PIN_RESET);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2200      	movs	r2, #0
 8001d56:	4619      	mov	r1, r3
 8001d58:	4803      	ldr	r0, [pc, #12]	@ (8001d68 <_ZN15Adafruit_SPITFT10SPI_CS_LOWEv+0x24>)
 8001d5a:	f002 fab0 	bl	80042be <HAL_GPIO_WritePin>
  }
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40010800 	.word	0x40010800

08001d6c <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv>:

  /*!
      @brief  Set the data/command line HIGH (data mode).
  */
  void SPI_DC_HIGH(void) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_DC_GPIO,_dc,GPIO_PIN_SET);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4803      	ldr	r0, [pc, #12]	@ (8001d90 <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv+0x24>)
 8001d82:	f002 fa9c 	bl	80042be <HAL_GPIO_WritePin>
  }
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40010800 	.word	0x40010800

08001d94 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv>:

  /*!
      @brief  Set the data/command line LOW (command mode).
  */
  void SPI_DC_LOW(void) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_DC_GPIO,_dc,GPIO_PIN_RESET);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	2200      	movs	r2, #0
 8001da6:	4619      	mov	r1, r3
 8001da8:	4803      	ldr	r0, [pc, #12]	@ (8001db8 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv+0x24>)
 8001daa:	f002 fa88 	bl	80042be <HAL_GPIO_WritePin>
  }
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40010800 	.word	0x40010800

08001dbc <_ZN15Adafruit_SPITFTC1Ettaa>:
                   -1 default, many displays don't support SPI read).
    @note    Output pins are not initialized; application typically will
             need to call subclass' begin() function, which in turn calls
             this library's initSPI() function to initialize pins.
*/
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, int8_t cs, int8_t dc)
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	4608      	mov	r0, r1
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4603      	mov	r3, r0
 8001dcc:	817b      	strh	r3, [r7, #10]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	813b      	strh	r3, [r7, #8]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	71fb      	strb	r3, [r7, #7]
    : Adafruit_GFX(w, h), _cs(cs), _dc(dc){
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001ddc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fa0b 	bl	80001fc <_ZN12Adafruit_GFXC1Ess>
 8001de6:	4a0f      	ldr	r2, [pc, #60]	@ (8001e24 <_ZN15Adafruit_SPITFTC1Ettaa+0x68>)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	79fa      	ldrb	r2, [r7, #7]
 8001df0:	f883 2020 	strb.w	r2, [r3, #32]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	7e3a      	ldrb	r2, [r7, #24]
 8001df8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	845a      	strh	r2, [r3, #34]	@ 0x22
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	849a      	strh	r2, [r3, #36]	@ 0x24
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	080056e4 	.word	0x080056e4

08001e28 <_ZN15Adafruit_SPITFT10startWriteEv>:
    @brief  Call before issuing command(s) or data to display. Performs
            chip-select (if required) and starts an SPI transaction (if
            using hardware SPI and transactions are supported). Required
            for all display types; not an SPI-specific function.
*/
void Adafruit_SPITFT::startWrite(void) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if (hspi1.Init.NSS == SPI_NSS_SOFT)
 8001e30:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <_ZN15Adafruit_SPITFT10startWriteEv+0x20>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e38:	d102      	bne.n	8001e40 <_ZN15Adafruit_SPITFT10startWriteEv+0x18>
    SPI_CS_LOW();
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ff82 	bl	8001d44 <_ZN15Adafruit_SPITFT10SPI_CS_LOWEv>
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000074 	.word	0x20000074

08001e4c <_ZN15Adafruit_SPITFT8endWriteEv>:
    @brief  Call after issuing command(s) or data to display. Performs
            chip-deselect (if required) and ends an SPI transaction (if
            using hardware SPI and transactions are supported). Required
            for all display types; not an SPI-specific function.
*/
void Adafruit_SPITFT::endWrite(void) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if (hspi1.Init.NSS == SPI_NSS_SOFT)
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <_ZN15Adafruit_SPITFT8endWriteEv+0x20>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e5c:	d102      	bne.n	8001e64 <_ZN15Adafruit_SPITFT8endWriteEv+0x18>
    SPI_CS_HIGH();
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ff5c 	bl	8001d1c <_ZN15Adafruit_SPITFT11SPI_CS_HIGHEv>
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000074 	.word	0x20000074

08001e70 <_ZN15Adafruit_SPITFT10writePixelEsst>:
            Not self-contained; should follow a startWrite() call.
    @param  x      Horizontal position (0 = left).
    @param  y      Vertical position   (0 = top).
    @param  color  16-bit pixel color in '565' RGB format.
*/
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	4608      	mov	r0, r1
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4603      	mov	r3, r0
 8001e80:	817b      	strh	r3, [r7, #10]
 8001e82:	460b      	mov	r3, r1
 8001e84:	813b      	strh	r3, [r7, #8]
 8001e86:	4613      	mov	r3, r2
 8001e88:	80fb      	strh	r3, [r7, #6]
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8001e8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	db21      	blt.n	8001ed6 <_ZN15Adafruit_SPITFT10writePixelEsst+0x66>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e98:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	da1a      	bge.n	8001ed6 <_ZN15Adafruit_SPITFT10writePixelEsst+0x66>
 8001ea0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db16      	blt.n	8001ed6 <_ZN15Adafruit_SPITFT10writePixelEsst+0x66>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001eae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	da0f      	bge.n	8001ed6 <_ZN15Adafruit_SPITFT10writePixelEsst+0x66>
    setAddrWindow(x, y, 1, 1);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3344      	adds	r3, #68	@ 0x44
 8001ebc:	681c      	ldr	r4, [r3, #0]
 8001ebe:	8979      	ldrh	r1, [r7, #10]
 8001ec0:	893a      	ldrh	r2, [r7, #8]
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	47a0      	blx	r4
    SPI_WRITE16(color);
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 fc95 	bl	8002800 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd90      	pop	{r4, r7, pc}

08001ede <_ZN15Adafruit_SPITFT11writePixelsEPtmbb>:
                       uint16_t array having the byte values already ordered
                       big-endian, this can save time here, ESPECIALLY if
                       using this function's non-blocking DMA mode.
*/
void Adafruit_SPITFT::writePixels(uint16_t *colors, uint32_t len, bool block,
                                  bool bigEndian) {
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	70fb      	strb	r3, [r7, #3]

  if (!len)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d02e      	beq.n	8001f50 <_ZN15Adafruit_SPITFT11writePixelsEPtmbb+0x72>

  // avoid paramater-not-used complaints
  (void)block;
  (void)bigEndian;

  if (!bigEndian) {
 8001ef2:	7e3b      	ldrb	r3, [r7, #24]
 8001ef4:	f083 0301 	eor.w	r3, r3, #1
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d01d      	beq.n	8001f3a <_ZN15Adafruit_SPITFT11writePixelsEPtmbb+0x5c>
    while (len--) {
 8001efe:	e007      	b.n	8001f10 <_ZN15Adafruit_SPITFT11writePixelsEPtmbb+0x32>
      SPI_WRITE16(*colors++);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	1c9a      	adds	r2, r3, #2
 8001f04:	60ba      	str	r2, [r7, #8]
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 fc78 	bl	8002800 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
    while (len--) {
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	1e5a      	subs	r2, r3, #1
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	bf14      	ite	ne
 8001f1a:	2301      	movne	r3, #1
 8001f1c:	2300      	moveq	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1ed      	bne.n	8001f00 <_ZN15Adafruit_SPITFT11writePixelsEPtmbb+0x22>
 8001f24:	e015      	b.n	8001f52 <_ZN15Adafruit_SPITFT11writePixelsEPtmbb+0x74>
    // order...so each pixel needs byte-swapping before being issued.
    // Rather than having a separate big-endian SPI_WRITE16 (adding more
    // bloat), it's preferred if calling function is smart and only uses
    // bigEndian where DMA is supported. But we gotta handle this...
    while (len--) {
      SPI_WRITE16(__builtin_bswap16(*colors++));
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	1c9a      	adds	r2, r3, #2
 8001f2a:	60ba      	str	r2, [r7, #8]
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	ba5b      	rev16	r3, r3
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	4619      	mov	r1, r3
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 fc63 	bl	8002800 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
    while (len--) {
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	1e5a      	subs	r2, r3, #1
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf14      	ite	ne
 8001f44:	2301      	movne	r3, #1
 8001f46:	2300      	moveq	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1eb      	bne.n	8001f26 <_ZN15Adafruit_SPITFT11writePixelsEPtmbb+0x48>
 8001f4e:	e000      	b.n	8001f52 <_ZN15Adafruit_SPITFT11writePixelsEPtmbb+0x74>
    return; // Avoid 0-byte transfers
 8001f50:	bf00      	nop
    }
  }
}
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_ZN15Adafruit_SPITFT10writeColorEtm>:
    @brief  Issue a series of pixels, all the same color. Not self-
            contained; should follow startWrite() and setAddrWindow() calls.
    @param  color  16-bit pixel color in '565' RGB format.
    @param  len    Number of pixels to draw.
*/
void Adafruit_SPITFT::writeColor(uint16_t color, uint32_t len) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	460b      	mov	r3, r1
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	817b      	strh	r3, [r7, #10]

  if (!len)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d02a      	beq.n	8001fc2 <_ZN15Adafruit_SPITFT10writeColorEtm+0x6a>
    return; // Avoid 0-byte transfers
  // The value of 16 was randomly picked. you can always change this
  static uint16_t temp[16];
  uint16_t bufLen = (len < 16u) ? len : 16u, xferLen;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b10      	cmp	r3, #16
 8001f70:	bf28      	it	cs
 8001f72:	2310      	movcs	r3, #16
 8001f74:	82bb      	strh	r3, [r7, #20]
  for (uint16_t t = 0; t < bufLen; t++) {
 8001f76:	2300      	movs	r3, #0
 8001f78:	82fb      	strh	r3, [r7, #22]
 8001f7a:	e007      	b.n	8001f8c <_ZN15Adafruit_SPITFT10writeColorEtm+0x34>
	temp[t] = color;
 8001f7c:	8afb      	ldrh	r3, [r7, #22]
 8001f7e:	4913      	ldr	r1, [pc, #76]	@ (8001fcc <_ZN15Adafruit_SPITFT10writeColorEtm+0x74>)
 8001f80:	897a      	ldrh	r2, [r7, #10]
 8001f82:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (uint16_t t = 0; t < bufLen; t++) {
 8001f86:	8afb      	ldrh	r3, [r7, #22]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	82fb      	strh	r3, [r7, #22]
 8001f8c:	8afa      	ldrh	r2, [r7, #22]
 8001f8e:	8abb      	ldrh	r3, [r7, #20]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d3f3      	bcc.n	8001f7c <_ZN15Adafruit_SPITFT10writeColorEtm+0x24>
  }
  // Issue pixels in blocks from temp buffer
  while (len) {                              // While pixels remain
 8001f94:	e011      	b.n	8001fba <_ZN15Adafruit_SPITFT10writeColorEtm+0x62>
	xferLen = (bufLen < len) ? bufLen : len; // How many this pass?
 8001f96:	8aba      	ldrh	r2, [r7, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	bf28      	it	cs
 8001f9e:	4613      	movcs	r3, r2
 8001fa0:	827b      	strh	r3, [r7, #18]
	writePixels((uint16_t *)temp, xferLen);
 8001fa2:	8a7a      	ldrh	r2, [r7, #18]
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2301      	movs	r3, #1
 8001faa:	4908      	ldr	r1, [pc, #32]	@ (8001fcc <_ZN15Adafruit_SPITFT10writeColorEtm+0x74>)
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f7ff ff96 	bl	8001ede <_ZN15Adafruit_SPITFT11writePixelsEPtmbb>
	len -= xferLen;
 8001fb2:	8a7b      	ldrh	r3, [r7, #18]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	607b      	str	r3, [r7, #4]
  while (len) {                              // While pixels remain
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1ea      	bne.n	8001f96 <_ZN15Adafruit_SPITFT10writeColorEtm+0x3e>
  }
  return;
 8001fc0:	e000      	b.n	8001fc4 <_ZN15Adafruit_SPITFT10writeColorEtm+0x6c>
    return; // Avoid 0-byte transfers
 8001fc2:	bf00      	nop
}
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000028 	.word	0x20000028

08001fd0 <_ZN15Adafruit_SPITFT13writeFillRectEsssst>:
    @note   Written in this deep-nested way because C by definition will
            optimize for the 'if' case, not the 'else' -- avoids branches
            and rejects clipped rectangles at the least-work possibility.
*/
void Adafruit_SPITFT::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                    uint16_t color) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	4608      	mov	r0, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	817b      	strh	r3, [r7, #10]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	813b      	strh	r3, [r7, #8]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	80fb      	strh	r3, [r7, #6]
  if (w && h) {   // Nonzero width and height?
 8001fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8088 	beq.w	8002104 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x134>
 8001ff4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8083 	beq.w	8002104 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x134>
    if (w < 0) {  // If negative width...
 8001ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002002:	2b00      	cmp	r3, #0
 8002004:	da0a      	bge.n	800201c <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x4c>
      x += w + 1; //   Move X to left edge
 8002006:	88fa      	ldrh	r2, [r7, #6]
 8002008:	897b      	ldrh	r3, [r7, #10]
 800200a:	4413      	add	r3, r2
 800200c:	b29b      	uxth	r3, r3
 800200e:	3301      	adds	r3, #1
 8002010:	b29b      	uxth	r3, r3
 8002012:	817b      	strh	r3, [r7, #10]
      w = -w;     //   Use positive width
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	425b      	negs	r3, r3
 8002018:	b29b      	uxth	r3, r3
 800201a:	80fb      	strh	r3, [r7, #6]
    }
    if (x < _width) { // Not off right
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002022:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002026:	429a      	cmp	r2, r3
 8002028:	da6c      	bge.n	8002104 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x134>
      if (h < 0) {    // If negative height...
 800202a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800202e:	2b00      	cmp	r3, #0
 8002030:	da0a      	bge.n	8002048 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x78>
        y += h + 1;   //   Move Y to top edge
 8002032:	8c3a      	ldrh	r2, [r7, #32]
 8002034:	893b      	ldrh	r3, [r7, #8]
 8002036:	4413      	add	r3, r2
 8002038:	b29b      	uxth	r3, r3
 800203a:	3301      	adds	r3, #1
 800203c:	b29b      	uxth	r3, r3
 800203e:	813b      	strh	r3, [r7, #8]
        h = -h;       //   Use positive height
 8002040:	8c3b      	ldrh	r3, [r7, #32]
 8002042:	425b      	negs	r3, r3
 8002044:	b29b      	uxth	r3, r3
 8002046:	843b      	strh	r3, [r7, #32]
      }
      if (y < _height) { // Not off bottom
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800204e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002052:	429a      	cmp	r2, r3
 8002054:	da56      	bge.n	8002104 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x134>
        int16_t x2 = x + w - 1;
 8002056:	897a      	ldrh	r2, [r7, #10]
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	4413      	add	r3, r2
 800205c:	b29b      	uxth	r3, r3
 800205e:	3b01      	subs	r3, #1
 8002060:	b29b      	uxth	r3, r3
 8002062:	82fb      	strh	r3, [r7, #22]
        if (x2 >= 0) { // Not off left
 8002064:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002068:	2b00      	cmp	r3, #0
 800206a:	db4b      	blt.n	8002104 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x134>
          int16_t y2 = y + h - 1;
 800206c:	893a      	ldrh	r2, [r7, #8]
 800206e:	8c3b      	ldrh	r3, [r7, #32]
 8002070:	4413      	add	r3, r2
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29b      	uxth	r3, r3
 8002078:	82bb      	strh	r3, [r7, #20]
          if (y2 >= 0) { // Not off top
 800207a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800207e:	2b00      	cmp	r3, #0
 8002080:	db40      	blt.n	8002104 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x134>
            // Rectangle partly or fully overlaps screen
            if (x < 0) {
 8002082:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002086:	2b00      	cmp	r3, #0
 8002088:	da05      	bge.n	8002096 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xc6>
              x = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	817b      	strh	r3, [r7, #10]
              w = x2 + 1;
 800208e:	8afb      	ldrh	r3, [r7, #22]
 8002090:	3301      	adds	r3, #1
 8002092:	b29b      	uxth	r3, r3
 8002094:	80fb      	strh	r3, [r7, #6]
            } // Clip left
            if (y < 0) {
 8002096:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	da05      	bge.n	80020aa <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xda>
              y = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	813b      	strh	r3, [r7, #8]
              h = y2 + 1;
 80020a2:	8abb      	ldrh	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	843b      	strh	r3, [r7, #32]
            } // Clip top
            if (x2 >= _width) {
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	db07      	blt.n	80020c8 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xf8>
              w = _width - x;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020be:	b29a      	uxth	r2, r3
 80020c0:	897b      	ldrh	r3, [r7, #10]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	80fb      	strh	r3, [r7, #6]
            } // Clip right
            if (y2 >= _height) {
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80020ce:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	db07      	blt.n	80020e6 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x116>
              h = _height - y;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80020dc:	b29a      	uxth	r2, r3
 80020de:	893b      	ldrh	r3, [r7, #8]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	843b      	strh	r3, [r7, #32]
            } // Clip bottom
            writeFillRectPreclipped(x, y, w, h, color);
 80020e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80020ea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80020ee:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80020f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	4603      	mov	r3, r0
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f8d3 	bl	80022aa <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
          }
        }
      }
    }
  }
}
 8002104:	bf00      	nop
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <_ZN15Adafruit_SPITFT14writeFastHLineEssst>:
    @param  w      Line width in pixels (positive = right of first point,
                   negative = point of first corner).
    @param  color  16-bit line color in '565' RGB format.
*/
void inline Adafruit_SPITFT::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                            uint16_t color) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af02      	add	r7, sp, #8
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	4608      	mov	r0, r1
 8002116:	4611      	mov	r1, r2
 8002118:	461a      	mov	r2, r3
 800211a:	4603      	mov	r3, r0
 800211c:	817b      	strh	r3, [r7, #10]
 800211e:	460b      	mov	r3, r1
 8002120:	813b      	strh	r3, [r7, #8]
 8002122:	4613      	mov	r3, r2
 8002124:	80fb      	strh	r3, [r7, #6]
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 8002126:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	db52      	blt.n	80021d4 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0xc8>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002134:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002138:	429a      	cmp	r2, r3
 800213a:	da4b      	bge.n	80021d4 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0xc8>
 800213c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d047      	beq.n	80021d4 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0xc8>
    if (w < 0) {                        // If negative width...
 8002144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002148:	2b00      	cmp	r3, #0
 800214a:	da0a      	bge.n	8002162 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x56>
      x += w + 1;                       //   Move X to left edge
 800214c:	88fa      	ldrh	r2, [r7, #6]
 800214e:	897b      	ldrh	r3, [r7, #10]
 8002150:	4413      	add	r3, r2
 8002152:	b29b      	uxth	r3, r3
 8002154:	3301      	adds	r3, #1
 8002156:	b29b      	uxth	r3, r3
 8002158:	817b      	strh	r3, [r7, #10]
      w = -w;                           //   Use positive width
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	425b      	negs	r3, r3
 800215e:	b29b      	uxth	r3, r3
 8002160:	80fb      	strh	r3, [r7, #6]
    }
    if (x < _width) { // Not off right
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002168:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800216c:	429a      	cmp	r2, r3
 800216e:	da31      	bge.n	80021d4 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0xc8>
      int16_t x2 = x + w - 1;
 8002170:	897a      	ldrh	r2, [r7, #10]
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	4413      	add	r3, r2
 8002176:	b29b      	uxth	r3, r3
 8002178:	3b01      	subs	r3, #1
 800217a:	b29b      	uxth	r3, r3
 800217c:	82fb      	strh	r3, [r7, #22]
      if (x2 >= 0) { // Not off left
 800217e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002182:	2b00      	cmp	r3, #0
 8002184:	db26      	blt.n	80021d4 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0xc8>
        // Line partly or fully overlaps screen
        if (x < 0) {
 8002186:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800218a:	2b00      	cmp	r3, #0
 800218c:	da05      	bge.n	800219a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x8e>
          x = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	817b      	strh	r3, [r7, #10]
          w = x2 + 1;
 8002192:	8afb      	ldrh	r3, [r7, #22]
 8002194:	3301      	adds	r3, #1
 8002196:	b29b      	uxth	r3, r3
 8002198:	80fb      	strh	r3, [r7, #6]
        } // Clip left
        if (x2 >= _width) {
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80021a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	db07      	blt.n	80021b8 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0xac>
          w = _width - x;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	897b      	ldrh	r3, [r7, #10]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	80fb      	strh	r3, [r7, #6]
        } // Clip right
        writeFillRectPreclipped(x, y, w, 1, color);
 80021b8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80021bc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80021c0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80021c4:	8c3b      	ldrh	r3, [r7, #32]
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	2301      	movs	r3, #1
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	4603      	mov	r3, r0
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f86b 	bl	80022aa <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
      }
    }
  }
}
 80021d4:	bf00      	nop
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <_ZN15Adafruit_SPITFT14writeFastVLineEssst>:
    @param  h      Line height in pixels (positive = below first point,
                   negative = above first point).
    @param  color  16-bit line color in '565' RGB format.
*/
void inline Adafruit_SPITFT::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                            uint16_t color) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	4608      	mov	r0, r1
 80021e6:	4611      	mov	r1, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	4603      	mov	r3, r0
 80021ec:	817b      	strh	r3, [r7, #10]
 80021ee:	460b      	mov	r3, r1
 80021f0:	813b      	strh	r3, [r7, #8]
 80021f2:	4613      	mov	r3, r2
 80021f4:	80fb      	strh	r3, [r7, #6]
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 80021f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	db51      	blt.n	80022a2 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0xc6>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002204:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002208:	429a      	cmp	r2, r3
 800220a:	da4a      	bge.n	80022a2 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0xc6>
 800220c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d046      	beq.n	80022a2 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0xc6>
    if (h < 0) {                       // If negative height...
 8002214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002218:	2b00      	cmp	r3, #0
 800221a:	da0a      	bge.n	8002232 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x56>
      y += h + 1;                      //   Move Y to top edge
 800221c:	88fa      	ldrh	r2, [r7, #6]
 800221e:	893b      	ldrh	r3, [r7, #8]
 8002220:	4413      	add	r3, r2
 8002222:	b29b      	uxth	r3, r3
 8002224:	3301      	adds	r3, #1
 8002226:	b29b      	uxth	r3, r3
 8002228:	813b      	strh	r3, [r7, #8]
      h = -h;                          //   Use positive height
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	425b      	negs	r3, r3
 800222e:	b29b      	uxth	r3, r3
 8002230:	80fb      	strh	r3, [r7, #6]
    }
    if (y < _height) { // Not off bottom
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002238:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800223c:	429a      	cmp	r2, r3
 800223e:	da30      	bge.n	80022a2 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0xc6>
      int16_t y2 = y + h - 1;
 8002240:	893a      	ldrh	r2, [r7, #8]
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	4413      	add	r3, r2
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29b      	uxth	r3, r3
 800224c:	82fb      	strh	r3, [r7, #22]
      if (y2 >= 0) { // Not off top
 800224e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002252:	2b00      	cmp	r3, #0
 8002254:	db25      	blt.n	80022a2 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0xc6>
        // Line partly or fully overlaps screen
        if (y < 0) {
 8002256:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	da05      	bge.n	800226a <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x8e>
          y = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	813b      	strh	r3, [r7, #8]
          h = y2 + 1;
 8002262:	8afb      	ldrh	r3, [r7, #22]
 8002264:	3301      	adds	r3, #1
 8002266:	b29b      	uxth	r3, r3
 8002268:	80fb      	strh	r3, [r7, #6]
        } // Clip top
        if (y2 >= _height) {
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002270:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002274:	429a      	cmp	r2, r3
 8002276:	db07      	blt.n	8002288 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0xac>
          h = _height - y;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800227e:	b29a      	uxth	r2, r3
 8002280:	893b      	ldrh	r3, [r7, #8]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	b29b      	uxth	r3, r3
 8002286:	80fb      	strh	r3, [r7, #6]
        } // Clip bottom
        writeFillRectPreclipped(x, y, 1, h, color);
 8002288:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800228c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002290:	8c3b      	ldrh	r3, [r7, #32]
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2301      	movs	r3, #1
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f804 	bl	80022aa <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
      }
    }
  }
}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>:
    @note   This is a new function, no graphics primitives besides rects
            and horizontal/vertical lines are written to best use this yet.
*/
inline void Adafruit_SPITFT::writeFillRectPreclipped(int16_t x, int16_t y,
                                                     int16_t w, int16_t h,
                                                     uint16_t color) {
 80022aa:	b590      	push	{r4, r7, lr}
 80022ac:	b087      	sub	sp, #28
 80022ae:	af02      	add	r7, sp, #8
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	4608      	mov	r0, r1
 80022b4:	4611      	mov	r1, r2
 80022b6:	461a      	mov	r2, r3
 80022b8:	4603      	mov	r3, r0
 80022ba:	817b      	strh	r3, [r7, #10]
 80022bc:	460b      	mov	r3, r1
 80022be:	813b      	strh	r3, [r7, #8]
 80022c0:	4613      	mov	r3, r2
 80022c2:	80fb      	strh	r3, [r7, #6]
  setAddrWindow(x, y, w, h);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	3344      	adds	r3, #68	@ 0x44
 80022ca:	681c      	ldr	r4, [r3, #0]
 80022cc:	8979      	ldrh	r1, [r7, #10]
 80022ce:	893a      	ldrh	r2, [r7, #8]
 80022d0:	88f8      	ldrh	r0, [r7, #6]
 80022d2:	8c3b      	ldrh	r3, [r7, #32]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	4603      	mov	r3, r0
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	47a0      	blx	r4
  writeColor(color, (uint32_t)w * h);
 80022dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80022e4:	fb03 f202 	mul.w	r2, r3, r2
 80022e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022ea:	4619      	mov	r1, r3
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7ff fe33 	bl	8001f58 <_ZN15Adafruit_SPITFT10writeColorEtm>
}
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd90      	pop	{r4, r7, pc}

080022fa <_ZN15Adafruit_SPITFT9drawPixelEsst>:
            Edge clipping is performed here.
    @param  x      Horizontal position (0 = left).
    @param  y      Vertical position   (0 = top).
    @param  color  16-bit pixel color in '565' RGB format.
*/
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80022fa:	b590      	push	{r4, r7, lr}
 80022fc:	b087      	sub	sp, #28
 80022fe:	af02      	add	r7, sp, #8
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	4608      	mov	r0, r1
 8002304:	4611      	mov	r1, r2
 8002306:	461a      	mov	r2, r3
 8002308:	4603      	mov	r3, r0
 800230a:	817b      	strh	r3, [r7, #10]
 800230c:	460b      	mov	r3, r1
 800230e:	813b      	strh	r3, [r7, #8]
 8002310:	4613      	mov	r3, r2
 8002312:	80fb      	strh	r3, [r7, #6]
  // Clip first...
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8002314:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db2d      	blt.n	8002378 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x7e>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002322:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002326:	429a      	cmp	r2, r3
 8002328:	da26      	bge.n	8002378 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x7e>
 800232a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	db22      	blt.n	8002378 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x7e>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002338:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800233c:	429a      	cmp	r2, r3
 800233e:	da1b      	bge.n	8002378 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x7e>
    // THEN set up transaction (if needed) and draw...
    startWrite();
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3304      	adds	r3, #4
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	4798      	blx	r3
    setAddrWindow(x, y, 1, 1);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3344      	adds	r3, #68	@ 0x44
 8002352:	681c      	ldr	r4, [r3, #0]
 8002354:	8979      	ldrh	r1, [r7, #10]
 8002356:	893a      	ldrh	r2, [r7, #8]
 8002358:	2301      	movs	r3, #1
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	2301      	movs	r3, #1
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	47a0      	blx	r4
    SPI_WRITE16(color);
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	4619      	mov	r1, r3
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fa4a 	bl	8002800 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
    endWrite();
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	331c      	adds	r3, #28
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	4798      	blx	r3
  }
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	bd90      	pop	{r4, r7, pc}

08002380 <_ZN15Adafruit_SPITFT8fillRectEsssst>:
            to handle clipping and so forth) so that the transaction isn't
            performed at all if the rectangle is rejected. It's really not
            that much code.
*/
void Adafruit_SPITFT::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                               uint16_t color) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af02      	add	r7, sp, #8
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	4608      	mov	r0, r1
 800238a:	4611      	mov	r1, r2
 800238c:	461a      	mov	r2, r3
 800238e:	4603      	mov	r3, r0
 8002390:	817b      	strh	r3, [r7, #10]
 8002392:	460b      	mov	r3, r1
 8002394:	813b      	strh	r3, [r7, #8]
 8002396:	4613      	mov	r3, r2
 8002398:	80fb      	strh	r3, [r7, #6]
  if (w && h) {   // Nonzero width and height?
 800239a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 8094 	beq.w	80024cc <_ZN15Adafruit_SPITFT8fillRectEsssst+0x14c>
 80023a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 808f 	beq.w	80024cc <_ZN15Adafruit_SPITFT8fillRectEsssst+0x14c>
    if (w < 0) {  // If negative width...
 80023ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	da0a      	bge.n	80023cc <_ZN15Adafruit_SPITFT8fillRectEsssst+0x4c>
      x += w + 1; //   Move X to left edge
 80023b6:	88fa      	ldrh	r2, [r7, #6]
 80023b8:	897b      	ldrh	r3, [r7, #10]
 80023ba:	4413      	add	r3, r2
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	817b      	strh	r3, [r7, #10]
      w = -w;     //   Use positive width
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	425b      	negs	r3, r3
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	80fb      	strh	r3, [r7, #6]
    }
    if (x < _width) { // Not off right
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80023d2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	da78      	bge.n	80024cc <_ZN15Adafruit_SPITFT8fillRectEsssst+0x14c>
      if (h < 0) {    // If negative height...
 80023da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	da0a      	bge.n	80023f8 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x78>
        y += h + 1;   //   Move Y to top edge
 80023e2:	8c3a      	ldrh	r2, [r7, #32]
 80023e4:	893b      	ldrh	r3, [r7, #8]
 80023e6:	4413      	add	r3, r2
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	813b      	strh	r3, [r7, #8]
        h = -h;       //   Use positive height
 80023f0:	8c3b      	ldrh	r3, [r7, #32]
 80023f2:	425b      	negs	r3, r3
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	843b      	strh	r3, [r7, #32]
      }
      if (y < _height) { // Not off bottom
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80023fe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002402:	429a      	cmp	r2, r3
 8002404:	da62      	bge.n	80024cc <_ZN15Adafruit_SPITFT8fillRectEsssst+0x14c>
        int16_t x2 = x + w - 1;
 8002406:	897a      	ldrh	r2, [r7, #10]
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	4413      	add	r3, r2
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29b      	uxth	r3, r3
 8002412:	82fb      	strh	r3, [r7, #22]
        if (x2 >= 0) { // Not off left
 8002414:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002418:	2b00      	cmp	r3, #0
 800241a:	db57      	blt.n	80024cc <_ZN15Adafruit_SPITFT8fillRectEsssst+0x14c>
          int16_t y2 = y + h - 1;
 800241c:	893a      	ldrh	r2, [r7, #8]
 800241e:	8c3b      	ldrh	r3, [r7, #32]
 8002420:	4413      	add	r3, r2
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29b      	uxth	r3, r3
 8002428:	82bb      	strh	r3, [r7, #20]
          if (y2 >= 0) { // Not off top
 800242a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	db4c      	blt.n	80024cc <_ZN15Adafruit_SPITFT8fillRectEsssst+0x14c>
            // Rectangle partly or fully overlaps screen
            if (x < 0) {
 8002432:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002436:	2b00      	cmp	r3, #0
 8002438:	da05      	bge.n	8002446 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xc6>
              x = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	817b      	strh	r3, [r7, #10]
              w = x2 + 1;
 800243e:	8afb      	ldrh	r3, [r7, #22]
 8002440:	3301      	adds	r3, #1
 8002442:	b29b      	uxth	r3, r3
 8002444:	80fb      	strh	r3, [r7, #6]
            } // Clip left
            if (y < 0) {
 8002446:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	da05      	bge.n	800245a <_ZN15Adafruit_SPITFT8fillRectEsssst+0xda>
              y = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	813b      	strh	r3, [r7, #8]
              h = y2 + 1;
 8002452:	8abb      	ldrh	r3, [r7, #20]
 8002454:	3301      	adds	r3, #1
 8002456:	b29b      	uxth	r3, r3
 8002458:	843b      	strh	r3, [r7, #32]
            } // Clip top
            if (x2 >= _width) {
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002460:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002464:	429a      	cmp	r2, r3
 8002466:	db07      	blt.n	8002478 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xf8>
              w = _width - x;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800246e:	b29a      	uxth	r2, r3
 8002470:	897b      	ldrh	r3, [r7, #10]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	b29b      	uxth	r3, r3
 8002476:	80fb      	strh	r3, [r7, #6]
            } // Clip right
            if (y2 >= _height) {
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800247e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002482:	429a      	cmp	r2, r3
 8002484:	db07      	blt.n	8002496 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
              h = _height - y;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800248c:	b29a      	uxth	r2, r3
 800248e:	893b      	ldrh	r3, [r7, #8]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	b29b      	uxth	r3, r3
 8002494:	843b      	strh	r3, [r7, #32]
            } // Clip bottom
            startWrite();
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3304      	adds	r3, #4
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	4798      	blx	r3
            writeFillRectPreclipped(x, y, w, h, color);
 80024a2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80024a6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80024aa:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80024ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	4603      	mov	r3, r0
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f7ff fef5 	bl	80022aa <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
            endWrite();
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	331c      	adds	r3, #28
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	4798      	blx	r3
          }
        }
      }
    }
  }
}
 80024cc:	bf00      	nop
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst>:
            done this way (rather than starting the transaction and calling
            writeFastHLine() to handle clipping and so forth) so that the
            transaction isn't performed at all if the line is rejected.
*/
void Adafruit_SPITFT::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                    uint16_t color) {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	4608      	mov	r0, r1
 80024de:	4611      	mov	r1, r2
 80024e0:	461a      	mov	r2, r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	817b      	strh	r3, [r7, #10]
 80024e6:	460b      	mov	r3, r1
 80024e8:	813b      	strh	r3, [r7, #8]
 80024ea:	4613      	mov	r3, r2
 80024ec:	80fb      	strh	r3, [r7, #6]
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 80024ee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	db5e      	blt.n	80025b4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xe0>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80024fc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002500:	429a      	cmp	r2, r3
 8002502:	da57      	bge.n	80025b4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xe0>
 8002504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d053      	beq.n	80025b4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xe0>
    if (w < 0) {                        // If negative width...
 800250c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002510:	2b00      	cmp	r3, #0
 8002512:	da0a      	bge.n	800252a <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x56>
      x += w + 1;                       //   Move X to left edge
 8002514:	88fa      	ldrh	r2, [r7, #6]
 8002516:	897b      	ldrh	r3, [r7, #10]
 8002518:	4413      	add	r3, r2
 800251a:	b29b      	uxth	r3, r3
 800251c:	3301      	adds	r3, #1
 800251e:	b29b      	uxth	r3, r3
 8002520:	817b      	strh	r3, [r7, #10]
      w = -w;                           //   Use positive width
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	425b      	negs	r3, r3
 8002526:	b29b      	uxth	r3, r3
 8002528:	80fb      	strh	r3, [r7, #6]
    }
    if (x < _width) { // Not off right
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002530:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002534:	429a      	cmp	r2, r3
 8002536:	da3d      	bge.n	80025b4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xe0>
      int16_t x2 = x + w - 1;
 8002538:	897a      	ldrh	r2, [r7, #10]
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	4413      	add	r3, r2
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29b      	uxth	r3, r3
 8002544:	82fb      	strh	r3, [r7, #22]
      if (x2 >= 0) { // Not off left
 8002546:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800254a:	2b00      	cmp	r3, #0
 800254c:	db32      	blt.n	80025b4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xe0>
        // Line partly or fully overlaps screen
        if (x < 0) {
 800254e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002552:	2b00      	cmp	r3, #0
 8002554:	da05      	bge.n	8002562 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x8e>
          x = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	817b      	strh	r3, [r7, #10]
          w = x2 + 1;
 800255a:	8afb      	ldrh	r3, [r7, #22]
 800255c:	3301      	adds	r3, #1
 800255e:	b29b      	uxth	r3, r3
 8002560:	80fb      	strh	r3, [r7, #6]
        } // Clip left
        if (x2 >= _width) {
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002568:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800256c:	429a      	cmp	r2, r3
 800256e:	db07      	blt.n	8002580 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xac>
          w = _width - x;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002576:	b29a      	uxth	r2, r3
 8002578:	897b      	ldrh	r3, [r7, #10]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	b29b      	uxth	r3, r3
 800257e:	80fb      	strh	r3, [r7, #6]
        } // Clip right
        startWrite();
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	3304      	adds	r3, #4
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	4798      	blx	r3
        writeFillRectPreclipped(x, y, w, 1, color);
 800258c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002590:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002594:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002598:	8c3b      	ldrh	r3, [r7, #32]
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	2301      	movs	r3, #1
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	4603      	mov	r3, r0
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f7ff fe81 	bl	80022aa <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
        endWrite();
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	331c      	adds	r3, #28
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	4798      	blx	r3
      }
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <_ZN15Adafruit_SPITFT13drawFastVLineEssst>:
            done this way (rather than starting the transaction and calling
            writeFastVLine() to handle clipping and so forth) so that the
            transaction isn't performed at all if the line is rejected.
*/
void Adafruit_SPITFT::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                    uint16_t color) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	4608      	mov	r0, r1
 80025c6:	4611      	mov	r1, r2
 80025c8:	461a      	mov	r2, r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	817b      	strh	r3, [r7, #10]
 80025ce:	460b      	mov	r3, r1
 80025d0:	813b      	strh	r3, [r7, #8]
 80025d2:	4613      	mov	r3, r2
 80025d4:	80fb      	strh	r3, [r7, #6]
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 80025d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	db5d      	blt.n	800269a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xde>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025e4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	da56      	bge.n	800269a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xde>
 80025ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d052      	beq.n	800269a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xde>
    if (h < 0) {                       // If negative height...
 80025f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	da0a      	bge.n	8002612 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x56>
      y += h + 1;                      //   Move Y to top edge
 80025fc:	88fa      	ldrh	r2, [r7, #6]
 80025fe:	893b      	ldrh	r3, [r7, #8]
 8002600:	4413      	add	r3, r2
 8002602:	b29b      	uxth	r3, r3
 8002604:	3301      	adds	r3, #1
 8002606:	b29b      	uxth	r3, r3
 8002608:	813b      	strh	r3, [r7, #8]
      h = -h;                          //   Use positive height
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	425b      	negs	r3, r3
 800260e:	b29b      	uxth	r3, r3
 8002610:	80fb      	strh	r3, [r7, #6]
    }
    if (y < _height) { // Not off bottom
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002618:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800261c:	429a      	cmp	r2, r3
 800261e:	da3c      	bge.n	800269a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xde>
      int16_t y2 = y + h - 1;
 8002620:	893a      	ldrh	r2, [r7, #8]
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	4413      	add	r3, r2
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29b      	uxth	r3, r3
 800262c:	82fb      	strh	r3, [r7, #22]
      if (y2 >= 0) { // Not off top
 800262e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002632:	2b00      	cmp	r3, #0
 8002634:	db31      	blt.n	800269a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xde>
        // Line partly or fully overlaps screen
        if (y < 0) {
 8002636:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	da05      	bge.n	800264a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x8e>
          y = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	813b      	strh	r3, [r7, #8]
          h = y2 + 1;
 8002642:	8afb      	ldrh	r3, [r7, #22]
 8002644:	3301      	adds	r3, #1
 8002646:	b29b      	uxth	r3, r3
 8002648:	80fb      	strh	r3, [r7, #6]
        } // Clip top
        if (y2 >= _height) {
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002650:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002654:	429a      	cmp	r2, r3
 8002656:	db07      	blt.n	8002668 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xac>
          h = _height - y;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800265e:	b29a      	uxth	r2, r3
 8002660:	893b      	ldrh	r3, [r7, #8]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	b29b      	uxth	r3, r3
 8002666:	80fb      	strh	r3, [r7, #6]
        } // Clip bottom
        startWrite();
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3304      	adds	r3, #4
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	4798      	blx	r3
        writeFillRectPreclipped(x, y, 1, h, color);
 8002674:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002678:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800267c:	8c3b      	ldrh	r3, [r7, #32]
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	2301      	movs	r3, #1
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f7ff fe0e 	bl	80022aa <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
        endWrite();
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	331c      	adds	r3, #28
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	4798      	blx	r3
      }
    }
  }
}
 800269a:	bf00      	nop
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <_ZN15Adafruit_SPITFT13invertDisplayEb>:
/*!
    @brief  Invert the colors of the display (if supported by hardware).
            Self-contained, no transaction setup required.
    @param  i  true = inverted display, false = normal display.
*/
void Adafruit_SPITFT::invertDisplay(bool i) {
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	460b      	mov	r3, r1
 80026ac:	70fb      	strb	r3, [r7, #3]
  startWrite();
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3304      	adds	r3, #4
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	4798      	blx	r3
  writeCommand(i ? invertOnCommand : invertOffCommand);
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x26>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80026c6:	e002      	b.n	80026ce <_ZN15Adafruit_SPITFT13invertDisplayEb+0x2c>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80026ce:	4619      	mov	r1, r3
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f87f 	bl	80027d4 <_ZN15Adafruit_SPITFT12writeCommandEh>
  endWrite();
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	331c      	adds	r3, #28
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4798      	blx	r3
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <_ZN15Adafruit_SPITFT11sendCommandEhPhh>:
@param   commandByte       The Command Byte
@param   dataBytes         A pointer to the Data bytes to send
@param   numDataBytes      The number of bytes we should send
*/
void Adafruit_SPITFT::sendCommand(uint8_t commandByte, uint8_t *dataBytes,
                                  uint8_t numDataBytes) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	461a      	mov	r2, r3
 80026f8:	460b      	mov	r3, r1
 80026fa:	72fb      	strb	r3, [r7, #11]
 80026fc:	4613      	mov	r3, r2
 80026fe:	72bb      	strb	r3, [r7, #10]
  if ((hspi1.Init.NSS == SPI_NSS_SOFT) && (HAL_GPIO_ReadPin(_CS_GPIO,_cs) >= 0))
 8002700:	4b28      	ldr	r3, [pc, #160]	@ (80027a4 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0xb8>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002708:	d10c      	bne.n	8002724 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x38>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8002710:	b29b      	uxth	r3, r3
 8002712:	4619      	mov	r1, r3
 8002714:	4824      	ldr	r0, [pc, #144]	@ (80027a8 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0xbc>)
 8002716:	f001 fdbb 	bl	8004290 <HAL_GPIO_ReadPin>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	db01      	blt.n	8002724 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x38>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x3a>
 8002724:	2300      	movs	r3, #0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x44>
    SPI_CS_LOW();
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f7ff fb0a 	bl	8001d44 <_ZN15Adafruit_SPITFT10SPI_CS_LOWEv>

  SPI_DC_LOW();          // Command mode
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff fb2f 	bl	8001d94 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv>
  spiWrite(commandByte); // Send the command byte
 8002736:	7afb      	ldrb	r3, [r7, #11]
 8002738:	4619      	mov	r1, r3
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f836 	bl	80027ac <_ZN15Adafruit_SPITFT8spiWriteEh>

  SPI_DC_HIGH();
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f7ff fb13 	bl	8001d6c <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv>
  for (int i = 0; i < numDataBytes; i++) {
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	e00b      	b.n	8002764 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x78>
      spiWrite(*dataBytes); // Send the data bytes
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4619      	mov	r1, r3
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f82a 	bl	80027ac <_ZN15Adafruit_SPITFT8spiWriteEh>
      dataBytes++;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3301      	adds	r3, #1
 800275c:	607b      	str	r3, [r7, #4]
  for (int i = 0; i < numDataBytes; i++) {
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3301      	adds	r3, #1
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	7abb      	ldrb	r3, [r7, #10]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	429a      	cmp	r2, r3
 800276a:	dbef      	blt.n	800274c <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x60>
    }

  if ((hspi1.Init.NSS == SPI_NSS_SOFT) && (HAL_GPIO_ReadPin(_CS_GPIO,_cs) >= 0))
 800276c:	4b0d      	ldr	r3, [pc, #52]	@ (80027a4 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0xb8>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002774:	d10c      	bne.n	8002790 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0xa4>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800277c:	b29b      	uxth	r3, r3
 800277e:	4619      	mov	r1, r3
 8002780:	4809      	ldr	r0, [pc, #36]	@ (80027a8 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0xbc>)
 8002782:	f001 fd85 	bl	8004290 <HAL_GPIO_ReadPin>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	db01      	blt.n	8002790 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0xa4>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0xa6>
 8002790:	2300      	movs	r3, #0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0xb0>
    SPI_CS_HIGH();
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f7ff fac0 	bl	8001d1c <_ZN15Adafruit_SPITFT11SPI_CS_HIGHEv>
}
 800279c:	bf00      	nop
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000074 	.word	0x20000074
 80027a8:	40010800 	.word	0x40010800

080027ac <_ZN15Adafruit_SPITFT8spiWriteEh>:
            those functions in the library with a now-not-accurate name
            that's being maintained for compatibility with outside code.
            This function is used even if display connection is parallel.
    @param  b  8-bit value to write.
*/
void Adafruit_SPITFT::spiWrite(uint8_t b) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&hspi1,&b, 1, HAL_MAX_DELAY);
 80027b8:	1cf9      	adds	r1, r7, #3
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
 80027be:	2201      	movs	r2, #1
 80027c0:	4803      	ldr	r0, [pc, #12]	@ (80027d0 <_ZN15Adafruit_SPITFT8spiWriteEh+0x24>)
 80027c2:	f002 f9f7 	bl	8004bb4 <HAL_SPI_Transmit>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000074 	.word	0x20000074

080027d4 <_ZN15Adafruit_SPITFT12writeCommandEh>:
            the device to COMMAND mode, issues the byte and then restores
            DATA mode. There is no corresponding explicit writeData()
            function -- just use spiWrite().
    @param  cmd  8-bit command to write.
*/
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	70fb      	strb	r3, [r7, #3]
  SPI_DC_LOW();
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff fad7 	bl	8001d94 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv>
  spiWrite(cmd);
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	4619      	mov	r1, r3
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ffde 	bl	80027ac <_ZN15Adafruit_SPITFT8spiWriteEh>
  SPI_DC_HIGH();
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff fabb 	bl	8001d6c <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>:
            name was maintaned for backward compatibility. Naming is also
            not consistent with the 8-bit version, spiWrite(). Sorry about
            that. Again, staying compatible with outside code.
    @param  w  16-bit value to write.
*/
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
    // MSB, LSB because TFTs are generally big-endian
	w = __builtin_bswap16(w);
 800280c:	887b      	ldrh	r3, [r7, #2]
 800280e:	ba5b      	rev16	r3, r3
 8002810:	b29b      	uxth	r3, r3
 8002812:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1,(uint8_t *)(&w), 2, HAL_MAX_DELAY);
 8002814:	1cb9      	adds	r1, r7, #2
 8002816:	f04f 33ff 	mov.w	r3, #4294967295
 800281a:	2202      	movs	r2, #2
 800281c:	4803      	ldr	r0, [pc, #12]	@ (800282c <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x2c>)
 800281e:	f002 f9c9 	bl	8004bb4 <HAL_SPI_Transmit>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000074 	.word	0x20000074

08002830 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>:
            parallel; name was maintaned for backward compatibility. Naming
            is also not consistent with the 8-bit version, spiWrite().
            Sorry about that. Again, staying compatible with outside code.
    @param  l  32-bit value to write.
*/
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
	l = __builtin_bswap32(l);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	ba1b      	rev	r3, r3
 800283e:	603b      	str	r3, [r7, #0]
	HAL_SPI_Transmit(&hspi1,(uint8_t *)(&l), sizeof(uint32_t), HAL_MAX_DELAY);
 8002840:	4639      	mov	r1, r7
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
 8002846:	2204      	movs	r2, #4
 8002848:	4803      	ldr	r0, [pc, #12]	@ (8002858 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x28>)
 800284a:	f002 f9b3 	bl	8004bb4 <HAL_SPI_Transmit>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000074 	.word	0x20000074

0800285c <_ZN15Adafruit_ST7735C1Eaa>:
    @param  dc    Data/Command pin #
    @param  mosi  SPI MOSI pin #
    @param  sclk  SPI Clock pin #
    @param  rst   Reset pin # (optional, pass -1 if unused)
*/
Adafruit_ST7735::Adafruit_ST7735(int8_t cs, int8_t dc)
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af02      	add	r7, sp, #8
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	70fb      	strb	r3, [r7, #3]
 8002868:	4613      	mov	r3, r2
 800286a:	70bb      	strb	r3, [r7, #2]
    : Adafruit_ST77xx(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc) {}
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8002872:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	22a0      	movs	r2, #160	@ 0xa0
 800287c:	2180      	movs	r1, #128	@ 0x80
 800287e:	f000 f945 	bl	8002b0c <_ZN15Adafruit_ST77xxC1Ettaa>
 8002882:	4a04      	ldr	r2, [pc, #16]	@ (8002894 <_ZN15Adafruit_ST7735C1Eaa+0x38>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	08005734 	.word	0x08005734

08002898 <_ZN15Adafruit_ST773511setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST7735::setRotation(uint8_t m) {
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	70fb      	strb	r3, [r7, #3]
  uint8_t madctl = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]

  rotation = m & 3; // can't be higher than 3
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	759a      	strb	r2, [r3, #22]

  // For ST7735 with GREEN TAB (including HalloWing)...
  if ((tabcolor == INITR_144GREENTAB) || (tabcolor == INITR_HALLOWING)) {
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d004      	beq.n	80028c8 <_ZN15Adafruit_ST773511setRotationEh+0x30>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80028c4:	2b05      	cmp	r3, #5
 80028c6:	d109      	bne.n	80028dc <_ZN15Adafruit_ST773511setRotationEh+0x44>
    // ..._rowstart is 3 for rotations 0&1, 1 for rotations 2&3
    _rowstart = (rotation < 2) ? 3 : 1;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	7d9b      	ldrb	r3, [r3, #22]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d801      	bhi.n	80028d4 <_ZN15Adafruit_ST773511setRotationEh+0x3c>
 80028d0:	2203      	movs	r2, #3
 80028d2:	e000      	b.n	80028d6 <_ZN15Adafruit_ST773511setRotationEh+0x3e>
 80028d4:	2201      	movs	r2, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  }

  switch (rotation) {
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7d9b      	ldrb	r3, [r3, #22]
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	f200 8107 	bhi.w	8002af4 <_ZN15Adafruit_ST773511setRotationEh+0x25c>
 80028e6:	a201      	add	r2, pc, #4	@ (adr r2, 80028ec <_ZN15Adafruit_ST773511setRotationEh+0x54>)
 80028e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ec:	080028fd 	.word	0x080028fd
 80028f0:	0800297b 	.word	0x0800297b
 80028f4:	080029f9 	.word	0x080029f9
 80028f8:	08002a77 	.word	0x08002a77
  case 0:
    if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002902:	2b02      	cmp	r3, #2
 8002904:	d004      	beq.n	8002910 <_ZN15Adafruit_ST773511setRotationEh+0x78>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800290c:	2b04      	cmp	r3, #4
 800290e:	d102      	bne.n	8002916 <_ZN15Adafruit_ST773511setRotationEh+0x7e>
      madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8002910:	23c0      	movs	r3, #192	@ 0xc0
 8002912:	73fb      	strb	r3, [r7, #15]
 8002914:	e001      	b.n	800291a <_ZN15Adafruit_ST773511setRotationEh+0x82>
    } else {
      madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST7735_MADCTL_BGR;
 8002916:	23c8      	movs	r3, #200	@ 0xc8
 8002918:	73fb      	strb	r3, [r7, #15]
    }

    if (tabcolor == INITR_144GREENTAB) {
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002920:	2b01      	cmp	r3, #1
 8002922:	d106      	bne.n	8002932 <_ZN15Adafruit_ST773511setRotationEh+0x9a>
      _height = ST7735_TFTHEIGHT_128;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2280      	movs	r2, #128	@ 0x80
 8002928:	815a      	strh	r2, [r3, #10]
      _width = ST7735_TFTWIDTH_128;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2280      	movs	r2, #128	@ 0x80
 800292e:	811a      	strh	r2, [r3, #8]
 8002930:	e016      	b.n	8002960 <_ZN15Adafruit_ST773511setRotationEh+0xc8>
    } else if (tabcolor == INITR_MINI160x80 ||
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002938:	2b04      	cmp	r3, #4
 800293a:	d004      	beq.n	8002946 <_ZN15Adafruit_ST773511setRotationEh+0xae>
               tabcolor == INITR_MINI160x80_PLUGIN) {
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    } else if (tabcolor == INITR_MINI160x80 ||
 8002942:	2b06      	cmp	r3, #6
 8002944:	d106      	bne.n	8002954 <_ZN15Adafruit_ST773511setRotationEh+0xbc>
      _height = ST7735_TFTHEIGHT_160;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	22a0      	movs	r2, #160	@ 0xa0
 800294a:	815a      	strh	r2, [r3, #10]
      _width = ST7735_TFTWIDTH_80;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2250      	movs	r2, #80	@ 0x50
 8002950:	811a      	strh	r2, [r3, #8]
 8002952:	e005      	b.n	8002960 <_ZN15Adafruit_ST773511setRotationEh+0xc8>
    } else {
      _height = ST7735_TFTHEIGHT_160;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	22a0      	movs	r2, #160	@ 0xa0
 8002958:	815a      	strh	r2, [r3, #10]
      _width = ST7735_TFTWIDTH_128;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2280      	movs	r2, #128	@ 0x80
 800295e:	811a      	strh	r2, [r3, #8]
    }
    _xstart = _colstart;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002966:	b21a      	sxth	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	845a      	strh	r2, [r3, #34]	@ 0x22
    _ystart = _rowstart;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002972:	b21a      	sxth	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	849a      	strh	r2, [r3, #36]	@ 0x24
    break;
 8002978:	e0bc      	b.n	8002af4 <_ZN15Adafruit_ST773511setRotationEh+0x25c>
  case 1:
    if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002980:	2b02      	cmp	r3, #2
 8002982:	d004      	beq.n	800298e <_ZN15Adafruit_ST773511setRotationEh+0xf6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800298a:	2b04      	cmp	r3, #4
 800298c:	d102      	bne.n	8002994 <_ZN15Adafruit_ST773511setRotationEh+0xfc>
      madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 800298e:	23a0      	movs	r3, #160	@ 0xa0
 8002990:	73fb      	strb	r3, [r7, #15]
 8002992:	e001      	b.n	8002998 <_ZN15Adafruit_ST773511setRotationEh+0x100>
    } else {
      madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST7735_MADCTL_BGR;
 8002994:	23a8      	movs	r3, #168	@ 0xa8
 8002996:	73fb      	strb	r3, [r7, #15]
    }

    if (tabcolor == INITR_144GREENTAB) {
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d106      	bne.n	80029b0 <_ZN15Adafruit_ST773511setRotationEh+0x118>
      _width = ST7735_TFTHEIGHT_128;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2280      	movs	r2, #128	@ 0x80
 80029a6:	811a      	strh	r2, [r3, #8]
      _height = ST7735_TFTWIDTH_128;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2280      	movs	r2, #128	@ 0x80
 80029ac:	815a      	strh	r2, [r3, #10]
 80029ae:	e016      	b.n	80029de <_ZN15Adafruit_ST773511setRotationEh+0x146>
    } else if (tabcolor == INITR_MINI160x80 ||
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d004      	beq.n	80029c4 <_ZN15Adafruit_ST773511setRotationEh+0x12c>
               tabcolor == INITR_MINI160x80_PLUGIN) {
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    } else if (tabcolor == INITR_MINI160x80 ||
 80029c0:	2b06      	cmp	r3, #6
 80029c2:	d106      	bne.n	80029d2 <_ZN15Adafruit_ST773511setRotationEh+0x13a>
      _width = ST7735_TFTHEIGHT_160;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	22a0      	movs	r2, #160	@ 0xa0
 80029c8:	811a      	strh	r2, [r3, #8]
      _height = ST7735_TFTWIDTH_80;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2250      	movs	r2, #80	@ 0x50
 80029ce:	815a      	strh	r2, [r3, #10]
 80029d0:	e005      	b.n	80029de <_ZN15Adafruit_ST773511setRotationEh+0x146>
    } else {
      _width = ST7735_TFTHEIGHT_160;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	22a0      	movs	r2, #160	@ 0xa0
 80029d6:	811a      	strh	r2, [r3, #8]
      _height = ST7735_TFTWIDTH_128;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2280      	movs	r2, #128	@ 0x80
 80029dc:	815a      	strh	r2, [r3, #10]
    }
    _ystart = _colstart;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80029e4:	b21a      	sxth	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    _xstart = _rowstart;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80029f0:	b21a      	sxth	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	845a      	strh	r2, [r3, #34]	@ 0x22
    break;
 80029f6:	e07d      	b.n	8002af4 <_ZN15Adafruit_ST773511setRotationEh+0x25c>
  case 2:
    if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d004      	beq.n	8002a0c <_ZN15Adafruit_ST773511setRotationEh+0x174>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d102      	bne.n	8002a12 <_ZN15Adafruit_ST773511setRotationEh+0x17a>
      madctl = ST77XX_MADCTL_RGB;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	73fb      	strb	r3, [r7, #15]
 8002a10:	e001      	b.n	8002a16 <_ZN15Adafruit_ST773511setRotationEh+0x17e>
    } else {
      madctl = ST7735_MADCTL_BGR;
 8002a12:	2308      	movs	r3, #8
 8002a14:	73fb      	strb	r3, [r7, #15]
    }

    if (tabcolor == INITR_144GREENTAB) {
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d106      	bne.n	8002a2e <_ZN15Adafruit_ST773511setRotationEh+0x196>
      _height = ST7735_TFTHEIGHT_128;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2280      	movs	r2, #128	@ 0x80
 8002a24:	815a      	strh	r2, [r3, #10]
      _width = ST7735_TFTWIDTH_128;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2280      	movs	r2, #128	@ 0x80
 8002a2a:	811a      	strh	r2, [r3, #8]
 8002a2c:	e016      	b.n	8002a5c <_ZN15Adafruit_ST773511setRotationEh+0x1c4>
    } else if (tabcolor == INITR_MINI160x80 ||
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d004      	beq.n	8002a42 <_ZN15Adafruit_ST773511setRotationEh+0x1aa>
               tabcolor == INITR_MINI160x80_PLUGIN) {
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    } else if (tabcolor == INITR_MINI160x80 ||
 8002a3e:	2b06      	cmp	r3, #6
 8002a40:	d106      	bne.n	8002a50 <_ZN15Adafruit_ST773511setRotationEh+0x1b8>
      _height = ST7735_TFTHEIGHT_160;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	22a0      	movs	r2, #160	@ 0xa0
 8002a46:	815a      	strh	r2, [r3, #10]
      _width = ST7735_TFTWIDTH_80;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2250      	movs	r2, #80	@ 0x50
 8002a4c:	811a      	strh	r2, [r3, #8]
 8002a4e:	e005      	b.n	8002a5c <_ZN15Adafruit_ST773511setRotationEh+0x1c4>
    } else {
      _height = ST7735_TFTHEIGHT_160;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	22a0      	movs	r2, #160	@ 0xa0
 8002a54:	815a      	strh	r2, [r3, #10]
      _width = ST7735_TFTWIDTH_128;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2280      	movs	r2, #128	@ 0x80
 8002a5a:	811a      	strh	r2, [r3, #8]
    }
    _xstart = _colstart;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a62:	b21a      	sxth	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	845a      	strh	r2, [r3, #34]	@ 0x22
    _ystart = _rowstart;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002a6e:	b21a      	sxth	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	849a      	strh	r2, [r3, #36]	@ 0x24
    break;
 8002a74:	e03e      	b.n	8002af4 <_ZN15Adafruit_ST773511setRotationEh+0x25c>
  case 3:
    if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d004      	beq.n	8002a8a <_ZN15Adafruit_ST773511setRotationEh+0x1f2>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d102      	bne.n	8002a90 <_ZN15Adafruit_ST773511setRotationEh+0x1f8>
      madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8002a8a:	2360      	movs	r3, #96	@ 0x60
 8002a8c:	73fb      	strb	r3, [r7, #15]
 8002a8e:	e001      	b.n	8002a94 <_ZN15Adafruit_ST773511setRotationEh+0x1fc>
    } else {
      madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST7735_MADCTL_BGR;
 8002a90:	2368      	movs	r3, #104	@ 0x68
 8002a92:	73fb      	strb	r3, [r7, #15]
    }

    if (tabcolor == INITR_144GREENTAB) {
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d106      	bne.n	8002aac <_ZN15Adafruit_ST773511setRotationEh+0x214>
      _width = ST7735_TFTHEIGHT_128;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2280      	movs	r2, #128	@ 0x80
 8002aa2:	811a      	strh	r2, [r3, #8]
      _height = ST7735_TFTWIDTH_128;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2280      	movs	r2, #128	@ 0x80
 8002aa8:	815a      	strh	r2, [r3, #10]
 8002aaa:	e016      	b.n	8002ada <_ZN15Adafruit_ST773511setRotationEh+0x242>
    } else if (tabcolor == INITR_MINI160x80 ||
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d004      	beq.n	8002ac0 <_ZN15Adafruit_ST773511setRotationEh+0x228>
               tabcolor == INITR_MINI160x80_PLUGIN) {
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    } else if (tabcolor == INITR_MINI160x80 ||
 8002abc:	2b06      	cmp	r3, #6
 8002abe:	d106      	bne.n	8002ace <_ZN15Adafruit_ST773511setRotationEh+0x236>
      _width = ST7735_TFTHEIGHT_160;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	22a0      	movs	r2, #160	@ 0xa0
 8002ac4:	811a      	strh	r2, [r3, #8]
      _height = ST7735_TFTWIDTH_80;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2250      	movs	r2, #80	@ 0x50
 8002aca:	815a      	strh	r2, [r3, #10]
 8002acc:	e005      	b.n	8002ada <_ZN15Adafruit_ST773511setRotationEh+0x242>
    } else {
      _width = ST7735_TFTHEIGHT_160;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	22a0      	movs	r2, #160	@ 0xa0
 8002ad2:	811a      	strh	r2, [r3, #8]
      _height = ST7735_TFTWIDTH_128;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2280      	movs	r2, #128	@ 0x80
 8002ad8:	815a      	strh	r2, [r3, #10]
    }
    _ystart = _colstart;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ae0:	b21a      	sxth	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	849a      	strh	r2, [r3, #36]	@ 0x24
    _xstart = _rowstart;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002aec:	b21a      	sxth	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	845a      	strh	r2, [r3, #34]	@ 0x22
    break;
 8002af2:	bf00      	nop
  }

  sendCommand(ST77XX_MADCTL, &madctl, 1);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f107 020f 	add.w	r2, r7, #15
 8002afa:	2301      	movs	r3, #1
 8002afc:	2136      	movs	r1, #54	@ 0x36
 8002afe:	f7ff fdf5 	bl	80026ec <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop

08002b0c <_ZN15Adafruit_ST77xxC1Ettaa>:
    @param  sclk  SPI Clock pin #
    @param  rst   Reset pin # (optional, pass -1 if unused)
    @param  miso  SPI MISO pin # (optional, pass -1 if unused)
*/
/**************************************************************************/
Adafruit_ST77xx::Adafruit_ST77xx(uint16_t w, uint16_t h, int8_t cs, int8_t dc)
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	4608      	mov	r0, r1
 8002b16:	4611      	mov	r1, r2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	817b      	strh	r3, [r7, #10]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	813b      	strh	r3, [r7, #8]
 8002b22:	4613      	mov	r3, r2
 8002b24:	71fb      	strb	r3, [r7, #7]
    : Adafruit_SPITFT(w, h, cs, dc) {}
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f997 4007 	ldrsb.w	r4, [r7, #7]
 8002b2c:	893a      	ldrh	r2, [r7, #8]
 8002b2e:	8979      	ldrh	r1, [r7, #10]
 8002b30:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	4623      	mov	r3, r4
 8002b38:	f7ff f940 	bl	8001dbc <_ZN15Adafruit_SPITFTC1Ettaa>
 8002b3c:	4a07      	ldr	r2, [pc, #28]	@ (8002b5c <_ZN15Adafruit_ST77xxC1Ettaa+0x50>)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd90      	pop	{r4, r7, pc}
 8002b5c:	08005784 	.word	0x08005784

08002b60 <_ZN15Adafruit_ST77xx13setAddrWindowEtttt>:
  @param  w  Width of window
  @param  h  Height of window
*/
/**************************************************************************/
void Adafruit_ST77xx::setAddrWindow(uint16_t x, uint16_t y, uint16_t w,
                                    uint16_t h) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	4608      	mov	r0, r1
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	817b      	strh	r3, [r7, #10]
 8002b72:	460b      	mov	r3, r1
 8002b74:	813b      	strh	r3, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	80fb      	strh	r3, [r7, #6]
  x += _xstart;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	897b      	ldrh	r3, [r7, #10]
 8002b84:	4413      	add	r3, r2
 8002b86:	817b      	strh	r3, [r7, #10]
  y += _ystart;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	893b      	ldrh	r3, [r7, #8]
 8002b92:	4413      	add	r3, r2
 8002b94:	813b      	strh	r3, [r7, #8]
  uint32_t xa = ((uint32_t)x << 16) | (x + w - 1);
 8002b96:	897b      	ldrh	r3, [r7, #10]
 8002b98:	041b      	lsls	r3, r3, #16
 8002b9a:	8979      	ldrh	r1, [r7, #10]
 8002b9c:	88fa      	ldrh	r2, [r7, #6]
 8002b9e:	440a      	add	r2, r1
 8002ba0:	3a01      	subs	r2, #1
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]
  uint32_t ya = ((uint32_t)y << 16) | (y + h - 1);
 8002ba6:	893b      	ldrh	r3, [r7, #8]
 8002ba8:	041b      	lsls	r3, r3, #16
 8002baa:	8939      	ldrh	r1, [r7, #8]
 8002bac:	8c3a      	ldrh	r2, [r7, #32]
 8002bae:	440a      	add	r2, r1
 8002bb0:	3a01      	subs	r2, #1
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]

  writeCommand(ST77XX_CASET); // Column addr set
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	212a      	movs	r1, #42	@ 0x2a
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fe0a 	bl	80027d4 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(xa);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6979      	ldr	r1, [r7, #20]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fe33 	bl	8002830 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>

  writeCommand(ST77XX_RASET); // Row addr set
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	212b      	movs	r1, #43	@ 0x2b
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fe00 	bl	80027d4 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(ya);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6939      	ldr	r1, [r7, #16]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fe29 	bl	8002830 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>

  writeCommand(ST77XX_RAMWR); // write to RAM
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	212c      	movs	r1, #44	@ 0x2c
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fdf6 	bl	80027d4 <_ZN15Adafruit_SPITFT12writeCommandEh>
}
 8002be8:	bf00      	nop
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <_ZN15Adafruit_ST77xx11setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST77xx::setRotation(uint8_t m) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	70fb      	strb	r3, [r7, #3]
  uint8_t madctl = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	759a      	strb	r2, [r3, #22]

  switch (rotation) {
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7d9b      	ldrb	r3, [r3, #22]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d847      	bhi.n	8002ca4 <_ZN15Adafruit_ST77xx11setRotationEh+0xb4>
 8002c14:	a201      	add	r2, pc, #4	@ (adr r2, 8002c1c <_ZN15Adafruit_ST77xx11setRotationEh+0x2c>)
 8002c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1a:	bf00      	nop
 8002c1c:	08002c2d 	.word	0x08002c2d
 8002c20:	08002c4b 	.word	0x08002c4b
 8002c24:	08002c69 	.word	0x08002c69
 8002c28:	08002c87 	.word	0x08002c87
  case 0:
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8002c2c:	23c0      	movs	r3, #192	@ 0xc0
 8002c2e:	73fb      	strb	r3, [r7, #15]
    _xstart = _colstart;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c36:	b21a      	sxth	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	845a      	strh	r2, [r3, #34]	@ 0x22
    _ystart = _rowstart;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002c42:	b21a      	sxth	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	849a      	strh	r2, [r3, #36]	@ 0x24
    break;
 8002c48:	e02c      	b.n	8002ca4 <_ZN15Adafruit_ST77xx11setRotationEh+0xb4>
  case 1:
    madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8002c4a:	23a0      	movs	r3, #160	@ 0xa0
 8002c4c:	73fb      	strb	r3, [r7, #15]
    _ystart = _colstart;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c54:	b21a      	sxth	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	849a      	strh	r2, [r3, #36]	@ 0x24
    _xstart = _rowstart;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002c60:	b21a      	sxth	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	845a      	strh	r2, [r3, #34]	@ 0x22
    break;
 8002c66:	e01d      	b.n	8002ca4 <_ZN15Adafruit_ST77xx11setRotationEh+0xb4>
  case 2:
    madctl = ST77XX_MADCTL_RGB;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]
    _xstart = _colstart;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c72:	b21a      	sxth	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	845a      	strh	r2, [r3, #34]	@ 0x22
    _ystart = _rowstart;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002c7e:	b21a      	sxth	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	849a      	strh	r2, [r3, #36]	@ 0x24
    break;
 8002c84:	e00e      	b.n	8002ca4 <_ZN15Adafruit_ST77xx11setRotationEh+0xb4>
  case 3:
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8002c86:	2360      	movs	r3, #96	@ 0x60
 8002c88:	73fb      	strb	r3, [r7, #15]
    _ystart = _colstart;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c90:	b21a      	sxth	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	849a      	strh	r2, [r3, #36]	@ 0x24
    _xstart = _rowstart;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002c9c:	b21a      	sxth	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	845a      	strh	r2, [r3, #34]	@ 0x22
    break;
 8002ca2:	bf00      	nop
  }

  sendCommand(ST77XX_MADCTL, &madctl, 1);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f107 020f 	add.w	r2, r7, #15
 8002caa:	2301      	movs	r3, #1
 8002cac:	2136      	movs	r1, #54	@ 0x36
 8002cae:	f7ff fd1d 	bl	80026ec <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop

08002cbc <_ZN12Adafruit_GFX11setTextWrapEb>:
  void setTextWrap(bool w) { wrap = w; }
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	70fb      	strb	r3, [r7, #3]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	75da      	strb	r2, [r3, #23]
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <_ZN15Adafruit_SPITFTD1Ev>:
  ~Adafruit_SPITFT(){};
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	4a04      	ldr	r2, [pc, #16]	@ (8002cf4 <_ZN15Adafruit_SPITFTD1Ev+0x1c>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	080056e4 	.word	0x080056e4

08002cf8 <_ZN15Adafruit_ST77xxD1Ev>:
#define ST77XX_MAGENTA 0xF81F
#define ST77XX_YELLOW 0xFFE0
#define ST77XX_ORANGE 0xFC00

/// Subclass of SPITFT for ST77xx displays (lots in common!)
class Adafruit_ST77xx : public Adafruit_SPITFT {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	4a05      	ldr	r2, [pc, #20]	@ (8002d18 <_ZN15Adafruit_ST77xxD1Ev+0x20>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ffe5 	bl	8002cd8 <_ZN15Adafruit_SPITFTD1Ev>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	08005784 	.word	0x08005784

08002d1c <_ZN15Adafruit_ST7735D1Ev>:
#define ST7735_MAGENTA ST77XX_MAGENTA
#define ST7735_YELLOW ST77XX_YELLOW
#define ST7735_ORANGE ST77XX_ORANGE

/// Subclass of ST77XX for ST7735B and ST7735R TFT Drivers:
class Adafruit_ST7735 : public Adafruit_ST77xx {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	4a05      	ldr	r2, [pc, #20]	@ (8002d3c <_ZN15Adafruit_ST7735D1Ev+0x20>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ffe3 	bl	8002cf8 <_ZN15Adafruit_ST77xxD1Ev>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	08005734 	.word	0x08005734

08002d40 <_Z9testlinest>:
#include "Adafruit_ST7735_mod.h" // Hardware-specific library for ST7735
#include "Adafruit_ST7789_mod.h" // Hardware-specific library for ST7789

Adafruit_ST7735 tft = Adafruit_ST7735();

void testlines(uint16_t color) {
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b089      	sub	sp, #36	@ 0x24
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	4603      	mov	r3, r0
 8002d48:	80fb      	strh	r3, [r7, #6]
  tft.fillScreen(ST77XX_BLACK);
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	48aa      	ldr	r0, [pc, #680]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002d4e:	f7fd fc78 	bl	8000642 <_ZN12Adafruit_GFX10fillScreenEt>
  for (int16_t x=0; x < tft.width(); x+=6) {
 8002d52:	2300      	movs	r3, #0
 8002d54:	82fb      	strh	r3, [r7, #22]
 8002d56:	e019      	b.n	8002d8c <_Z9testlinest+0x4c>
    tft.drawLine(0, 0, x, tft.height()-1, color);
 8002d58:	48a7      	ldr	r0, [pc, #668]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002d5a:	f7fd fa28 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	b21b      	sxth	r3, r3
 8002d68:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8002d6c:	88fa      	ldrh	r2, [r7, #6]
 8002d6e:	9201      	str	r2, [sp, #4]
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	460b      	mov	r3, r1
 8002d74:	2200      	movs	r2, #0
 8002d76:	2100      	movs	r1, #0
 8002d78:	489f      	ldr	r0, [pc, #636]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002d7a:	f7fd fc7e 	bl	800067a <_ZN12Adafruit_GFX8drawLineEsssst>
    HAL_Delay(0);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f000 fffa 	bl	8003d78 <HAL_Delay>
  for (int16_t x=0; x < tft.width(); x+=6) {
 8002d84:	8afb      	ldrh	r3, [r7, #22]
 8002d86:	3306      	adds	r3, #6
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	82fb      	strh	r3, [r7, #22]
 8002d8c:	489a      	ldr	r0, [pc, #616]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002d8e:	f7fd fa02 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 8002d92:	4603      	mov	r3, r0
 8002d94:	461a      	mov	r2, r3
 8002d96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	bfb4      	ite	lt
 8002d9e:	2301      	movlt	r3, #1
 8002da0:	2300      	movge	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1d7      	bne.n	8002d58 <_Z9testlinest+0x18>
  }
  for (int16_t y=0; y < tft.height(); y+=6) {
 8002da8:	2300      	movs	r3, #0
 8002daa:	82bb      	strh	r3, [r7, #20]
 8002dac:	e019      	b.n	8002de2 <_Z9testlinest+0xa2>
    tft.drawLine(0, 0, tft.width()-1, y, color);
 8002dae:	4892      	ldr	r0, [pc, #584]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002db0:	f7fd f9f1 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 8002db4:	4603      	mov	r3, r0
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	b21a      	sxth	r2, r3
 8002dbe:	88fb      	ldrh	r3, [r7, #6]
 8002dc0:	9301      	str	r3, [sp, #4]
 8002dc2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2100      	movs	r1, #0
 8002dce:	488a      	ldr	r0, [pc, #552]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002dd0:	f7fd fc53 	bl	800067a <_ZN12Adafruit_GFX8drawLineEsssst>
    HAL_Delay(0);
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f000 ffcf 	bl	8003d78 <HAL_Delay>
  for (int16_t y=0; y < tft.height(); y+=6) {
 8002dda:	8abb      	ldrh	r3, [r7, #20]
 8002ddc:	3306      	adds	r3, #6
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	82bb      	strh	r3, [r7, #20]
 8002de2:	4885      	ldr	r0, [pc, #532]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002de4:	f7fd f9e3 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 8002de8:	4603      	mov	r3, r0
 8002dea:	461a      	mov	r2, r3
 8002dec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002df0:	4293      	cmp	r3, r2
 8002df2:	bfb4      	ite	lt
 8002df4:	2301      	movlt	r3, #1
 8002df6:	2300      	movge	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1d7      	bne.n	8002dae <_Z9testlinest+0x6e>
  }

  tft.fillScreen(ST77XX_BLACK);
 8002dfe:	2100      	movs	r1, #0
 8002e00:	487d      	ldr	r0, [pc, #500]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002e02:	f7fd fc1e 	bl	8000642 <_ZN12Adafruit_GFX10fillScreenEt>
  for (int16_t x=0; x < tft.width(); x+=6) {
 8002e06:	2300      	movs	r3, #0
 8002e08:	827b      	strh	r3, [r7, #18]
 8002e0a:	e021      	b.n	8002e50 <_Z9testlinest+0x110>
    tft.drawLine(tft.width()-1, 0, x, tft.height()-1, color);
 8002e0c:	487a      	ldr	r0, [pc, #488]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002e0e:	f7fd f9c2 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 8002e12:	4603      	mov	r3, r0
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	b21c      	sxth	r4, r3
 8002e1c:	4876      	ldr	r0, [pc, #472]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002e1e:	f7fd f9c6 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 8002e22:	4603      	mov	r3, r0
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	b21b      	sxth	r3, r3
 8002e2c:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8002e30:	88fa      	ldrh	r2, [r7, #6]
 8002e32:	9201      	str	r2, [sp, #4]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	460b      	mov	r3, r1
 8002e38:	2200      	movs	r2, #0
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	486e      	ldr	r0, [pc, #440]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002e3e:	f7fd fc1c 	bl	800067a <_ZN12Adafruit_GFX8drawLineEsssst>
    HAL_Delay(0);
 8002e42:	2000      	movs	r0, #0
 8002e44:	f000 ff98 	bl	8003d78 <HAL_Delay>
  for (int16_t x=0; x < tft.width(); x+=6) {
 8002e48:	8a7b      	ldrh	r3, [r7, #18]
 8002e4a:	3306      	adds	r3, #6
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	827b      	strh	r3, [r7, #18]
 8002e50:	4869      	ldr	r0, [pc, #420]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002e52:	f7fd f9a0 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 8002e56:	4603      	mov	r3, r0
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	bfb4      	ite	lt
 8002e62:	2301      	movlt	r3, #1
 8002e64:	2300      	movge	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1cf      	bne.n	8002e0c <_Z9testlinest+0xcc>
  }
  for (int16_t y=0; y < tft.height(); y+=6) {
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	823b      	strh	r3, [r7, #16]
 8002e70:	e018      	b.n	8002ea4 <_Z9testlinest+0x164>
    tft.drawLine(tft.width()-1, 0, 0, y, color);
 8002e72:	4861      	ldr	r0, [pc, #388]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002e74:	f7fd f98f 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	b219      	sxth	r1, r3
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	9301      	str	r3, [sp, #4]
 8002e86:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2200      	movs	r2, #0
 8002e90:	4859      	ldr	r0, [pc, #356]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002e92:	f7fd fbf2 	bl	800067a <_ZN12Adafruit_GFX8drawLineEsssst>
    HAL_Delay(0);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f000 ff6e 	bl	8003d78 <HAL_Delay>
  for (int16_t y=0; y < tft.height(); y+=6) {
 8002e9c:	8a3b      	ldrh	r3, [r7, #16]
 8002e9e:	3306      	adds	r3, #6
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	823b      	strh	r3, [r7, #16]
 8002ea4:	4854      	ldr	r0, [pc, #336]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002ea6:	f7fd f982 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	461a      	mov	r2, r3
 8002eae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	bfb4      	ite	lt
 8002eb6:	2301      	movlt	r3, #1
 8002eb8:	2300      	movge	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1d8      	bne.n	8002e72 <_Z9testlinest+0x132>
  }

  tft.fillScreen(ST77XX_BLACK);
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	484d      	ldr	r0, [pc, #308]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002ec4:	f7fd fbbd 	bl	8000642 <_ZN12Adafruit_GFX10fillScreenEt>
  for (int16_t x=0; x < tft.width(); x+=6) {
 8002ec8:	2300      	movs	r3, #0
 8002eca:	81fb      	strh	r3, [r7, #14]
 8002ecc:	e019      	b.n	8002f02 <_Z9testlinest+0x1c2>
    tft.drawLine(0, tft.height()-1, x, 0, color);
 8002ece:	484a      	ldr	r0, [pc, #296]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002ed0:	f7fd f96d 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	b21a      	sxth	r2, r3
 8002ede:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	9301      	str	r3, [sp, #4]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	460b      	mov	r3, r1
 8002eec:	2100      	movs	r1, #0
 8002eee:	4842      	ldr	r0, [pc, #264]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002ef0:	f7fd fbc3 	bl	800067a <_ZN12Adafruit_GFX8drawLineEsssst>
    HAL_Delay(0);
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f000 ff3f 	bl	8003d78 <HAL_Delay>
  for (int16_t x=0; x < tft.width(); x+=6) {
 8002efa:	89fb      	ldrh	r3, [r7, #14]
 8002efc:	3306      	adds	r3, #6
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	81fb      	strh	r3, [r7, #14]
 8002f02:	483d      	ldr	r0, [pc, #244]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002f04:	f7fd f947 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f10:	4293      	cmp	r3, r2
 8002f12:	bfb4      	ite	lt
 8002f14:	2301      	movlt	r3, #1
 8002f16:	2300      	movge	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1d7      	bne.n	8002ece <_Z9testlinest+0x18e>
  }
  for (int16_t y=0; y < tft.height(); y+=6) {
 8002f1e:	2300      	movs	r3, #0
 8002f20:	81bb      	strh	r3, [r7, #12]
 8002f22:	e021      	b.n	8002f68 <_Z9testlinest+0x228>
    tft.drawLine(0, tft.height()-1, tft.width()-1, y, color);
 8002f24:	4834      	ldr	r0, [pc, #208]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002f26:	f7fd f942 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	b21c      	sxth	r4, r3
 8002f34:	4830      	ldr	r0, [pc, #192]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002f36:	f7fd f92e 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	b21a      	sxth	r2, r3
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	4622      	mov	r2, r4
 8002f52:	2100      	movs	r1, #0
 8002f54:	4828      	ldr	r0, [pc, #160]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002f56:	f7fd fb90 	bl	800067a <_ZN12Adafruit_GFX8drawLineEsssst>
    HAL_Delay(0);
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f000 ff0c 	bl	8003d78 <HAL_Delay>
  for (int16_t y=0; y < tft.height(); y+=6) {
 8002f60:	89bb      	ldrh	r3, [r7, #12]
 8002f62:	3306      	adds	r3, #6
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	81bb      	strh	r3, [r7, #12]
 8002f68:	4823      	ldr	r0, [pc, #140]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002f6a:	f7fd f920 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	461a      	mov	r2, r3
 8002f72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f76:	4293      	cmp	r3, r2
 8002f78:	bfb4      	ite	lt
 8002f7a:	2301      	movlt	r3, #1
 8002f7c:	2300      	movge	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1cf      	bne.n	8002f24 <_Z9testlinest+0x1e4>
  }

  tft.fillScreen(ST77XX_BLACK);
 8002f84:	2100      	movs	r1, #0
 8002f86:	481c      	ldr	r0, [pc, #112]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002f88:	f7fd fb5b 	bl	8000642 <_ZN12Adafruit_GFX10fillScreenEt>
  for (int16_t x=0; x < tft.width(); x+=6) {
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	817b      	strh	r3, [r7, #10]
 8002f90:	e021      	b.n	8002fd6 <_Z9testlinest+0x296>
    tft.drawLine(tft.width()-1, tft.height()-1, x, 0, color);
 8002f92:	4819      	ldr	r0, [pc, #100]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002f94:	f7fd f8ff 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	b21c      	sxth	r4, r3
 8002fa2:	4815      	ldr	r0, [pc, #84]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002fa4:	f7fd f903 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	b21a      	sxth	r2, r3
 8002fb2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	9301      	str	r3, [sp, #4]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	480d      	ldr	r0, [pc, #52]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002fc4:	f7fd fb59 	bl	800067a <_ZN12Adafruit_GFX8drawLineEsssst>
    HAL_Delay(0);
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f000 fed5 	bl	8003d78 <HAL_Delay>
  for (int16_t x=0; x < tft.width(); x+=6) {
 8002fce:	897b      	ldrh	r3, [r7, #10]
 8002fd0:	3306      	adds	r3, #6
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	817b      	strh	r3, [r7, #10]
 8002fd6:	4808      	ldr	r0, [pc, #32]	@ (8002ff8 <_Z9testlinest+0x2b8>)
 8002fd8:	f7fd f8dd 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	bfb4      	ite	lt
 8002fe8:	2301      	movlt	r3, #1
 8002fea:	2300      	movge	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1cf      	bne.n	8002f92 <_Z9testlinest+0x252>
  }
  for (int16_t y=0; y < tft.height(); y+=6) {
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	813b      	strh	r3, [r7, #8]
 8002ff6:	e022      	b.n	800303e <_Z9testlinest+0x2fe>
 8002ff8:	20000048 	.word	0x20000048
    tft.drawLine(tft.width()-1, tft.height()-1, 0, y, color);
 8002ffc:	4819      	ldr	r0, [pc, #100]	@ (8003064 <_Z9testlinest+0x324>)
 8002ffe:	f7fd f8ca 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 8003002:	4603      	mov	r3, r0
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29b      	uxth	r3, r3
 800300a:	b21c      	sxth	r4, r3
 800300c:	4815      	ldr	r0, [pc, #84]	@ (8003064 <_Z9testlinest+0x324>)
 800300e:	f7fd f8ce 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 8003012:	4603      	mov	r3, r0
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29b      	uxth	r3, r3
 800301a:	b21a      	sxth	r2, r3
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	9301      	str	r3, [sp, #4]
 8003020:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	2300      	movs	r3, #0
 8003028:	4621      	mov	r1, r4
 800302a:	480e      	ldr	r0, [pc, #56]	@ (8003064 <_Z9testlinest+0x324>)
 800302c:	f7fd fb25 	bl	800067a <_ZN12Adafruit_GFX8drawLineEsssst>
    HAL_Delay(0);
 8003030:	2000      	movs	r0, #0
 8003032:	f000 fea1 	bl	8003d78 <HAL_Delay>
  for (int16_t y=0; y < tft.height(); y+=6) {
 8003036:	893b      	ldrh	r3, [r7, #8]
 8003038:	3306      	adds	r3, #6
 800303a:	b29b      	uxth	r3, r3
 800303c:	813b      	strh	r3, [r7, #8]
 800303e:	4809      	ldr	r0, [pc, #36]	@ (8003064 <_Z9testlinest+0x324>)
 8003040:	f7fd f8b5 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 8003044:	4603      	mov	r3, r0
 8003046:	461a      	mov	r2, r3
 8003048:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800304c:	4293      	cmp	r3, r2
 800304e:	bfb4      	ite	lt
 8003050:	2301      	movlt	r3, #1
 8003052:	2300      	movge	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1d0      	bne.n	8002ffc <_Z9testlinest+0x2bc>
  }
}
 800305a:	bf00      	nop
 800305c:	bf00      	nop
 800305e:	371c      	adds	r7, #28
 8003060:	46bd      	mov	sp, r7
 8003062:	bd90      	pop	{r4, r7, pc}
 8003064:	20000048 	.word	0x20000048

08003068 <_Z12testdrawtextPKct>:

void testdrawtext(const char *text, uint16_t color) {
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	807b      	strh	r3, [r7, #2]
  tft.setCursor(0, 0);
 8003074:	2200      	movs	r2, #0
 8003076:	2100      	movs	r1, #0
 8003078:	4807      	ldr	r0, [pc, #28]	@ (8003098 <_Z12testdrawtextPKct+0x30>)
 800307a:	f7fd f867 	bl	800014c <_ZN12Adafruit_GFX9setCursorEss>
  tft.setTextColor(color);
 800307e:	887b      	ldrh	r3, [r7, #2]
 8003080:	4619      	mov	r1, r3
 8003082:	4805      	ldr	r0, [pc, #20]	@ (8003098 <_Z12testdrawtextPKct+0x30>)
 8003084:	f7fd f875 	bl	8000172 <_ZN12Adafruit_GFX12setTextColorEt>
  tft.setTextWrap(true);
 8003088:	2101      	movs	r1, #1
 800308a:	4803      	ldr	r0, [pc, #12]	@ (8003098 <_Z12testdrawtextPKct+0x30>)
 800308c:	f7ff fe16 	bl	8002cbc <_ZN12Adafruit_GFX11setTextWrapEb>
  //tft.print(text);
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000048 	.word	0x20000048

0800309c <_Z13testfastlinestt>:

void testfastlines(uint16_t color1, uint16_t color2) {
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	4603      	mov	r3, r0
 80030a4:	460a      	mov	r2, r1
 80030a6:	80fb      	strh	r3, [r7, #6]
 80030a8:	4613      	mov	r3, r2
 80030aa:	80bb      	strh	r3, [r7, #4]
  tft.fillScreen(ST77XX_BLACK);
 80030ac:	2100      	movs	r1, #0
 80030ae:	4827      	ldr	r0, [pc, #156]	@ (800314c <_Z13testfastlinestt+0xb0>)
 80030b0:	f7fd fac7 	bl	8000642 <_ZN12Adafruit_GFX10fillScreenEt>
  for (int16_t y=0; y < tft.height(); y+=5) {
 80030b4:	2300      	movs	r3, #0
 80030b6:	81fb      	strh	r3, [r7, #14]
 80030b8:	e011      	b.n	80030de <_Z13testfastlinestt+0x42>
    tft.drawFastHLine(0, y, tft.width(), color1);
 80030ba:	4824      	ldr	r0, [pc, #144]	@ (800314c <_Z13testfastlinestt+0xb0>)
 80030bc:	f7fd f86b 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 80030c0:	4603      	mov	r3, r0
 80030c2:	4619      	mov	r1, r3
 80030c4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	460b      	mov	r3, r1
 80030ce:	2100      	movs	r1, #0
 80030d0:	481e      	ldr	r0, [pc, #120]	@ (800314c <_Z13testfastlinestt+0xb0>)
 80030d2:	f7ff f9ff 	bl	80024d4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst>
  for (int16_t y=0; y < tft.height(); y+=5) {
 80030d6:	89fb      	ldrh	r3, [r7, #14]
 80030d8:	3305      	adds	r3, #5
 80030da:	b29b      	uxth	r3, r3
 80030dc:	81fb      	strh	r3, [r7, #14]
 80030de:	481b      	ldr	r0, [pc, #108]	@ (800314c <_Z13testfastlinestt+0xb0>)
 80030e0:	f7fd f865 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461a      	mov	r2, r3
 80030e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030ec:	4293      	cmp	r3, r2
 80030ee:	bfb4      	ite	lt
 80030f0:	2301      	movlt	r3, #1
 80030f2:	2300      	movge	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1df      	bne.n	80030ba <_Z13testfastlinestt+0x1e>
  }
  for (int16_t x=0; x < tft.width(); x+=5) {
 80030fa:	2300      	movs	r3, #0
 80030fc:	81bb      	strh	r3, [r7, #12]
 80030fe:	e011      	b.n	8003124 <_Z13testfastlinestt+0x88>
    tft.drawFastVLine(x, 0, tft.height(), color2);
 8003100:	4812      	ldr	r0, [pc, #72]	@ (800314c <_Z13testfastlinestt+0xb0>)
 8003102:	f7fd f854 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 8003106:	4603      	mov	r3, r0
 8003108:	461a      	mov	r2, r3
 800310a:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800310e:	88bb      	ldrh	r3, [r7, #4]
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	4613      	mov	r3, r2
 8003114:	2200      	movs	r2, #0
 8003116:	480d      	ldr	r0, [pc, #52]	@ (800314c <_Z13testfastlinestt+0xb0>)
 8003118:	f7ff fa50 	bl	80025bc <_ZN15Adafruit_SPITFT13drawFastVLineEssst>
  for (int16_t x=0; x < tft.width(); x+=5) {
 800311c:	89bb      	ldrh	r3, [r7, #12]
 800311e:	3305      	adds	r3, #5
 8003120:	b29b      	uxth	r3, r3
 8003122:	81bb      	strh	r3, [r7, #12]
 8003124:	4809      	ldr	r0, [pc, #36]	@ (800314c <_Z13testfastlinestt+0xb0>)
 8003126:	f7fd f836 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 800312a:	4603      	mov	r3, r0
 800312c:	461a      	mov	r2, r3
 800312e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003132:	4293      	cmp	r3, r2
 8003134:	bfb4      	ite	lt
 8003136:	2301      	movlt	r3, #1
 8003138:	2300      	movge	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1df      	bne.n	8003100 <_Z13testfastlinestt+0x64>
  }
}
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000048 	.word	0x20000048

08003150 <_Z13testdrawrectst>:

void testdrawrects(uint16_t color) {
 8003150:	b590      	push	{r4, r7, lr}
 8003152:	b087      	sub	sp, #28
 8003154:	af02      	add	r7, sp, #8
 8003156:	4603      	mov	r3, r0
 8003158:	80fb      	strh	r3, [r7, #6]
  tft.fillScreen(ST77XX_BLACK);
 800315a:	2100      	movs	r1, #0
 800315c:	4827      	ldr	r0, [pc, #156]	@ (80031fc <_Z13testdrawrectst+0xac>)
 800315e:	f7fd fa70 	bl	8000642 <_ZN12Adafruit_GFX10fillScreenEt>
  for (int16_t x=0; x < tft.width(); x+=6) {
 8003162:	2300      	movs	r3, #0
 8003164:	81fb      	strh	r3, [r7, #14]
 8003166:	e035      	b.n	80031d4 <_Z13testdrawrectst+0x84>
    tft.drawRect(tft.width()/2 -x/2, tft.height()/2 -x/2 , x, x, color);
 8003168:	4824      	ldr	r0, [pc, #144]	@ (80031fc <_Z13testdrawrectst+0xac>)
 800316a:	f7fd f814 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 800316e:	4603      	mov	r3, r0
 8003170:	0fda      	lsrs	r2, r3, #31
 8003172:	4413      	add	r3, r2
 8003174:	105b      	asrs	r3, r3, #1
 8003176:	b21b      	sxth	r3, r3
 8003178:	b29a      	uxth	r2, r3
 800317a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800317e:	0fd9      	lsrs	r1, r3, #31
 8003180:	440b      	add	r3, r1
 8003182:	105b      	asrs	r3, r3, #1
 8003184:	b21b      	sxth	r3, r3
 8003186:	b29b      	uxth	r3, r3
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	b29b      	uxth	r3, r3
 800318c:	b21c      	sxth	r4, r3
 800318e:	481b      	ldr	r0, [pc, #108]	@ (80031fc <_Z13testdrawrectst+0xac>)
 8003190:	f7fd f80d 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 8003194:	4603      	mov	r3, r0
 8003196:	0fda      	lsrs	r2, r3, #31
 8003198:	4413      	add	r3, r2
 800319a:	105b      	asrs	r3, r3, #1
 800319c:	b21b      	sxth	r3, r3
 800319e:	b29a      	uxth	r2, r3
 80031a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031a4:	0fd9      	lsrs	r1, r3, #31
 80031a6:	440b      	add	r3, r1
 80031a8:	105b      	asrs	r3, r3, #1
 80031aa:	b21b      	sxth	r3, r3
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	b21a      	sxth	r2, r3
 80031b4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	9301      	str	r3, [sp, #4]
 80031bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	460b      	mov	r3, r1
 80031c4:	4621      	mov	r1, r4
 80031c6:	480d      	ldr	r0, [pc, #52]	@ (80031fc <_Z13testdrawrectst+0xac>)
 80031c8:	f7fd fe0a 	bl	8000de0 <_ZN12Adafruit_GFX8drawRectEsssst>
  for (int16_t x=0; x < tft.width(); x+=6) {
 80031cc:	89fb      	ldrh	r3, [r7, #14]
 80031ce:	3306      	adds	r3, #6
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	81fb      	strh	r3, [r7, #14]
 80031d4:	4809      	ldr	r0, [pc, #36]	@ (80031fc <_Z13testdrawrectst+0xac>)
 80031d6:	f7fc ffde 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 80031da:	4603      	mov	r3, r0
 80031dc:	461a      	mov	r2, r3
 80031de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031e2:	4293      	cmp	r3, r2
 80031e4:	bfb4      	ite	lt
 80031e6:	2301      	movlt	r3, #1
 80031e8:	2300      	movge	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1bb      	bne.n	8003168 <_Z13testdrawrectst+0x18>
  }
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd90      	pop	{r4, r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000048 	.word	0x20000048

08003200 <_Z13testfillrectstt>:

void testfillrects(uint16_t color1, uint16_t color2) {
 8003200:	b590      	push	{r4, r7, lr}
 8003202:	b087      	sub	sp, #28
 8003204:	af02      	add	r7, sp, #8
 8003206:	4603      	mov	r3, r0
 8003208:	460a      	mov	r2, r1
 800320a:	80fb      	strh	r3, [r7, #6]
 800320c:	4613      	mov	r3, r2
 800320e:	80bb      	strh	r3, [r7, #4]
  tft.fillScreen(ST77XX_BLACK);
 8003210:	2100      	movs	r1, #0
 8003212:	483e      	ldr	r0, [pc, #248]	@ (800330c <_Z13testfillrectstt+0x10c>)
 8003214:	f7fd fa15 	bl	8000642 <_ZN12Adafruit_GFX10fillScreenEt>
  for (int16_t x=tft.width()-1; x > 6; x-=6) {
 8003218:	483c      	ldr	r0, [pc, #240]	@ (800330c <_Z13testfillrectstt+0x10c>)
 800321a:	f7fc ffbc 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 800321e:	4603      	mov	r3, r0
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29b      	uxth	r3, r3
 8003226:	81fb      	strh	r3, [r7, #14]
 8003228:	e067      	b.n	80032fa <_Z13testfillrectstt+0xfa>
    tft.fillRect(tft.width()/2 -x/2, tft.height()/2 -x/2 , x, x, color1);
 800322a:	4838      	ldr	r0, [pc, #224]	@ (800330c <_Z13testfillrectstt+0x10c>)
 800322c:	f7fc ffb3 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 8003230:	4603      	mov	r3, r0
 8003232:	0fda      	lsrs	r2, r3, #31
 8003234:	4413      	add	r3, r2
 8003236:	105b      	asrs	r3, r3, #1
 8003238:	b21b      	sxth	r3, r3
 800323a:	b29a      	uxth	r2, r3
 800323c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003240:	0fd9      	lsrs	r1, r3, #31
 8003242:	440b      	add	r3, r1
 8003244:	105b      	asrs	r3, r3, #1
 8003246:	b21b      	sxth	r3, r3
 8003248:	b29b      	uxth	r3, r3
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	b29b      	uxth	r3, r3
 800324e:	b21c      	sxth	r4, r3
 8003250:	482e      	ldr	r0, [pc, #184]	@ (800330c <_Z13testfillrectstt+0x10c>)
 8003252:	f7fc ffac 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 8003256:	4603      	mov	r3, r0
 8003258:	0fda      	lsrs	r2, r3, #31
 800325a:	4413      	add	r3, r2
 800325c:	105b      	asrs	r3, r3, #1
 800325e:	b21b      	sxth	r3, r3
 8003260:	b29a      	uxth	r2, r3
 8003262:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003266:	0fd9      	lsrs	r1, r3, #31
 8003268:	440b      	add	r3, r1
 800326a:	105b      	asrs	r3, r3, #1
 800326c:	b21b      	sxth	r3, r3
 800326e:	b29b      	uxth	r3, r3
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	b29b      	uxth	r3, r3
 8003274:	b21a      	sxth	r2, r3
 8003276:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	460b      	mov	r3, r1
 8003286:	4621      	mov	r1, r4
 8003288:	4820      	ldr	r0, [pc, #128]	@ (800330c <_Z13testfillrectstt+0x10c>)
 800328a:	f7ff f879 	bl	8002380 <_ZN15Adafruit_SPITFT8fillRectEsssst>
    tft.drawRect(tft.width()/2 -x/2, tft.height()/2 -x/2 , x, x, color2);
 800328e:	481f      	ldr	r0, [pc, #124]	@ (800330c <_Z13testfillrectstt+0x10c>)
 8003290:	f7fc ff81 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 8003294:	4603      	mov	r3, r0
 8003296:	0fda      	lsrs	r2, r3, #31
 8003298:	4413      	add	r3, r2
 800329a:	105b      	asrs	r3, r3, #1
 800329c:	b21b      	sxth	r3, r3
 800329e:	b29a      	uxth	r2, r3
 80032a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032a4:	0fd9      	lsrs	r1, r3, #31
 80032a6:	440b      	add	r3, r1
 80032a8:	105b      	asrs	r3, r3, #1
 80032aa:	b21b      	sxth	r3, r3
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	b21c      	sxth	r4, r3
 80032b4:	4815      	ldr	r0, [pc, #84]	@ (800330c <_Z13testfillrectstt+0x10c>)
 80032b6:	f7fc ff7a 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 80032ba:	4603      	mov	r3, r0
 80032bc:	0fda      	lsrs	r2, r3, #31
 80032be:	4413      	add	r3, r2
 80032c0:	105b      	asrs	r3, r3, #1
 80032c2:	b21b      	sxth	r3, r3
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032ca:	0fd9      	lsrs	r1, r3, #31
 80032cc:	440b      	add	r3, r1
 80032ce:	105b      	asrs	r3, r3, #1
 80032d0:	b21b      	sxth	r3, r3
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	b21a      	sxth	r2, r3
 80032da:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80032de:	88bb      	ldrh	r3, [r7, #4]
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	460b      	mov	r3, r1
 80032ea:	4621      	mov	r1, r4
 80032ec:	4807      	ldr	r0, [pc, #28]	@ (800330c <_Z13testfillrectstt+0x10c>)
 80032ee:	f7fd fd77 	bl	8000de0 <_ZN12Adafruit_GFX8drawRectEsssst>
  for (int16_t x=tft.width()-1; x > 6; x-=6) {
 80032f2:	89fb      	ldrh	r3, [r7, #14]
 80032f4:	3b06      	subs	r3, #6
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	81fb      	strh	r3, [r7, #14]
 80032fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032fe:	2b06      	cmp	r3, #6
 8003300:	dc93      	bgt.n	800322a <_Z13testfillrectstt+0x2a>
  }
}
 8003302:	bf00      	nop
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	bd90      	pop	{r4, r7, pc}
 800330c:	20000048 	.word	0x20000048

08003310 <_Z15testfillcirclesht>:

void testfillcircles(uint8_t radius, uint16_t color) {
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af02      	add	r7, sp, #8
 8003316:	4603      	mov	r3, r0
 8003318:	460a      	mov	r2, r1
 800331a:	71fb      	strb	r3, [r7, #7]
 800331c:	4613      	mov	r3, r2
 800331e:	80bb      	strh	r3, [r7, #4]
  for (int16_t x=radius; x < tft.width(); x+=radius*2) {
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	81fb      	strh	r3, [r7, #14]
 8003324:	e02c      	b.n	8003380 <_Z15testfillcirclesht+0x70>
    for (int16_t y=radius; y < tft.height(); y+=radius*2) {
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	81bb      	strh	r3, [r7, #12]
 800332a:	e013      	b.n	8003354 <_Z15testfillcirclesht+0x44>
      tft.fillCircle(x, y, radius, color);
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	b218      	sxth	r0, r3
 8003330:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003334:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003338:	88bb      	ldrh	r3, [r7, #4]
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	4603      	mov	r3, r0
 800333e:	481a      	ldr	r0, [pc, #104]	@ (80033a8 <_Z15testfillcirclesht+0x98>)
 8003340:	f7fd fc1f 	bl	8000b82 <_ZN12Adafruit_GFX10fillCircleEssst>
    for (int16_t y=radius; y < tft.height(); y+=radius*2) {
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	b29b      	uxth	r3, r3
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	89bb      	ldrh	r3, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	81bb      	strh	r3, [r7, #12]
 8003354:	4814      	ldr	r0, [pc, #80]	@ (80033a8 <_Z15testfillcirclesht+0x98>)
 8003356:	f7fc ff2a 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 800335a:	4603      	mov	r3, r0
 800335c:	461a      	mov	r2, r3
 800335e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003362:	4293      	cmp	r3, r2
 8003364:	bfb4      	ite	lt
 8003366:	2301      	movlt	r3, #1
 8003368:	2300      	movge	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1dd      	bne.n	800332c <_Z15testfillcirclesht+0x1c>
  for (int16_t x=radius; x < tft.width(); x+=radius*2) {
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	b29b      	uxth	r3, r3
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	89fb      	ldrh	r3, [r7, #14]
 800337a:	4413      	add	r3, r2
 800337c:	b29b      	uxth	r3, r3
 800337e:	81fb      	strh	r3, [r7, #14]
 8003380:	4809      	ldr	r0, [pc, #36]	@ (80033a8 <_Z15testfillcirclesht+0x98>)
 8003382:	f7fc ff08 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 8003386:	4603      	mov	r3, r0
 8003388:	461a      	mov	r2, r3
 800338a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800338e:	4293      	cmp	r3, r2
 8003390:	bfb4      	ite	lt
 8003392:	2301      	movlt	r3, #1
 8003394:	2300      	movge	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1c4      	bne.n	8003326 <_Z15testfillcirclesht+0x16>
    }
  }
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000048 	.word	0x20000048

080033ac <_Z15testdrawcirclesht>:

void testdrawcircles(uint8_t radius, uint16_t color) {
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	4603      	mov	r3, r0
 80033b4:	460a      	mov	r2, r1
 80033b6:	71fb      	strb	r3, [r7, #7]
 80033b8:	4613      	mov	r3, r2
 80033ba:	80bb      	strh	r3, [r7, #4]
  for (int16_t x=0; x < tft.width()+radius; x+=radius*2) {
 80033bc:	2300      	movs	r3, #0
 80033be:	81fb      	strh	r3, [r7, #14]
 80033c0:	e02e      	b.n	8003420 <_Z15testdrawcirclesht+0x74>
    for (int16_t y=0; y < tft.height()+radius; y+=radius*2) {
 80033c2:	2300      	movs	r3, #0
 80033c4:	81bb      	strh	r3, [r7, #12]
 80033c6:	e013      	b.n	80033f0 <_Z15testdrawcirclesht+0x44>
      tft.drawCircle(x, y, radius, color);
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	b218      	sxth	r0, r3
 80033cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80033d0:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80033d4:	88bb      	ldrh	r3, [r7, #4]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	4603      	mov	r3, r0
 80033da:	481c      	ldr	r0, [pc, #112]	@ (800344c <_Z15testdrawcirclesht+0xa0>)
 80033dc:	f7fd f9ca 	bl	8000774 <_ZN12Adafruit_GFX10drawCircleEssst>
    for (int16_t y=0; y < tft.height()+radius; y+=radius*2) {
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	89bb      	ldrh	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	81bb      	strh	r3, [r7, #12]
 80033f0:	f9b7 400c 	ldrsh.w	r4, [r7, #12]
 80033f4:	4815      	ldr	r0, [pc, #84]	@ (800344c <_Z15testdrawcirclesht+0xa0>)
 80033f6:	f7fc feda 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 80033fa:	4603      	mov	r3, r0
 80033fc:	461a      	mov	r2, r3
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	4413      	add	r3, r2
 8003402:	429c      	cmp	r4, r3
 8003404:	bfb4      	ite	lt
 8003406:	2301      	movlt	r3, #1
 8003408:	2300      	movge	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1db      	bne.n	80033c8 <_Z15testdrawcirclesht+0x1c>
  for (int16_t x=0; x < tft.width()+radius; x+=radius*2) {
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	b29b      	uxth	r3, r3
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	89fb      	ldrh	r3, [r7, #14]
 800341a:	4413      	add	r3, r2
 800341c:	b29b      	uxth	r3, r3
 800341e:	81fb      	strh	r3, [r7, #14]
 8003420:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8003424:	4809      	ldr	r0, [pc, #36]	@ (800344c <_Z15testdrawcirclesht+0xa0>)
 8003426:	f7fc feb6 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 800342a:	4603      	mov	r3, r0
 800342c:	461a      	mov	r2, r3
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	4413      	add	r3, r2
 8003432:	429c      	cmp	r4, r3
 8003434:	bfb4      	ite	lt
 8003436:	2301      	movlt	r3, #1
 8003438:	2300      	movge	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1c0      	bne.n	80033c2 <_Z15testdrawcirclesht+0x16>
    }
  }
}
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	bd90      	pop	{r4, r7, pc}
 800344a:	bf00      	nop
 800344c:	20000048 	.word	0x20000048

08003450 <_Z13testtrianglesv>:

void testtriangles() {
 8003450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003452:	b08b      	sub	sp, #44	@ 0x2c
 8003454:	af04      	add	r7, sp, #16
  tft.fillScreen(ST77XX_BLACK);
 8003456:	2100      	movs	r1, #0
 8003458:	4826      	ldr	r0, [pc, #152]	@ (80034f4 <_Z13testtrianglesv+0xa4>)
 800345a:	f7fd f8f2 	bl	8000642 <_ZN12Adafruit_GFX10fillScreenEt>
  uint16_t color = 0xF800;
 800345e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003462:	82fb      	strh	r3, [r7, #22]
  int t;
  int w = tft.width()/2;
 8003464:	4823      	ldr	r0, [pc, #140]	@ (80034f4 <_Z13testtrianglesv+0xa4>)
 8003466:	f7fc fe96 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 800346a:	4603      	mov	r3, r0
 800346c:	0fda      	lsrs	r2, r3, #31
 800346e:	4413      	add	r3, r2
 8003470:	105b      	asrs	r3, r3, #1
 8003472:	b21b      	sxth	r3, r3
 8003474:	603b      	str	r3, [r7, #0]
  int x = tft.height()-1;
 8003476:	481f      	ldr	r0, [pc, #124]	@ (80034f4 <_Z13testtrianglesv+0xa4>)
 8003478:	f7fc fe99 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 800347c:	4603      	mov	r3, r0
 800347e:	3b01      	subs	r3, #1
 8003480:	60fb      	str	r3, [r7, #12]
  int y = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
  int z = tft.width();
 8003486:	481b      	ldr	r0, [pc, #108]	@ (80034f4 <_Z13testtrianglesv+0xa4>)
 8003488:	f7fc fe85 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 800348c:	4603      	mov	r3, r0
 800348e:	607b      	str	r3, [r7, #4]
  for(t = 0 ; t <= 15; t++) {
 8003490:	2300      	movs	r3, #0
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	e025      	b.n	80034e2 <_Z13testtrianglesv+0x92>
    tft.drawTriangle(w, y, y, x, z, x, color);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	b21c      	sxth	r4, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	b21d      	sxth	r5, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	b21e      	sxth	r6, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	b21b      	sxth	r3, r3
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	b212      	sxth	r2, r2
 80034aa:	68f9      	ldr	r1, [r7, #12]
 80034ac:	b209      	sxth	r1, r1
 80034ae:	8af8      	ldrh	r0, [r7, #22]
 80034b0:	9003      	str	r0, [sp, #12]
 80034b2:	9102      	str	r1, [sp, #8]
 80034b4:	9201      	str	r2, [sp, #4]
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	4633      	mov	r3, r6
 80034ba:	462a      	mov	r2, r5
 80034bc:	4621      	mov	r1, r4
 80034be:	480d      	ldr	r0, [pc, #52]	@ (80034f4 <_Z13testtrianglesv+0xa4>)
 80034c0:	f7fd fe7d 	bl	80011be <_ZN12Adafruit_GFX12drawTriangleEsssssst>
    x-=4;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	3b04      	subs	r3, #4
 80034c8:	60fb      	str	r3, [r7, #12]
    y+=4;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3304      	adds	r3, #4
 80034ce:	60bb      	str	r3, [r7, #8]
    z-=4;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3b04      	subs	r3, #4
 80034d4:	607b      	str	r3, [r7, #4]
    color+=100;
 80034d6:	8afb      	ldrh	r3, [r7, #22]
 80034d8:	3364      	adds	r3, #100	@ 0x64
 80034da:	82fb      	strh	r3, [r7, #22]
  for(t = 0 ; t <= 15; t++) {
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	3301      	adds	r3, #1
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	2b0f      	cmp	r3, #15
 80034e6:	ddd6      	ble.n	8003496 <_Z13testtrianglesv+0x46>
  }
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000048 	.word	0x20000048

080034f8 <_Z14testroundrectsv>:

void testroundrects() {
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	b08d      	sub	sp, #52	@ 0x34
 80034fc:	af04      	add	r7, sp, #16
  tft.fillScreen(ST77XX_BLACK);
 80034fe:	2100      	movs	r1, #0
 8003500:	4828      	ldr	r0, [pc, #160]	@ (80035a4 <_Z14testroundrectsv+0xac>)
 8003502:	f7fd f89e 	bl	8000642 <_ZN12Adafruit_GFX10fillScreenEt>
  uint16_t color = 100;
 8003506:	2364      	movs	r3, #100	@ 0x64
 8003508:	83fb      	strh	r3, [r7, #30]
  int i;
  int t;
  for(t = 0 ; t <= 4; t+=1) {
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	e040      	b.n	8003592 <_Z14testroundrectsv+0x9a>
    int x = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
    int y = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
    int w = tft.width()-2;
 8003518:	4822      	ldr	r0, [pc, #136]	@ (80035a4 <_Z14testroundrectsv+0xac>)
 800351a:	f7fc fe3c 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 800351e:	4603      	mov	r3, r0
 8003520:	3b02      	subs	r3, #2
 8003522:	60bb      	str	r3, [r7, #8]
    int h = tft.height()-2;
 8003524:	481f      	ldr	r0, [pc, #124]	@ (80035a4 <_Z14testroundrectsv+0xac>)
 8003526:	f7fc fe42 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 800352a:	4603      	mov	r3, r0
 800352c:	3b02      	subs	r3, #2
 800352e:	607b      	str	r3, [r7, #4]
    for(i = 0 ; i <= 16; i+=1) {
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	e024      	b.n	8003580 <_Z14testroundrectsv+0x88>
      tft.drawRoundRect(x, y, w, h, 5, color);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	b219      	sxth	r1, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	b218      	sxth	r0, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	b21c      	sxth	r4, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	b21b      	sxth	r3, r3
 8003546:	8bfa      	ldrh	r2, [r7, #30]
 8003548:	9202      	str	r2, [sp, #8]
 800354a:	2205      	movs	r2, #5
 800354c:	9201      	str	r2, [sp, #4]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	4623      	mov	r3, r4
 8003552:	4602      	mov	r2, r0
 8003554:	4813      	ldr	r0, [pc, #76]	@ (80035a4 <_Z14testroundrectsv+0xac>)
 8003556:	f7fd fca6 	bl	8000ea6 <_ZN12Adafruit_GFX13drawRoundRectEssssst>
      x+=2;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	3302      	adds	r3, #2
 800355e:	613b      	str	r3, [r7, #16]
      y+=3;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3303      	adds	r3, #3
 8003564:	60fb      	str	r3, [r7, #12]
      w-=4;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	3b04      	subs	r3, #4
 800356a:	60bb      	str	r3, [r7, #8]
      h-=6;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3b06      	subs	r3, #6
 8003570:	607b      	str	r3, [r7, #4]
      color+=1100;
 8003572:	8bfb      	ldrh	r3, [r7, #30]
 8003574:	f203 434c 	addw	r3, r3, #1100	@ 0x44c
 8003578:	83fb      	strh	r3, [r7, #30]
    for(i = 0 ; i <= 16; i+=1) {
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	3301      	adds	r3, #1
 800357e:	61bb      	str	r3, [r7, #24]
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b10      	cmp	r3, #16
 8003584:	ddd7      	ble.n	8003536 <_Z14testroundrectsv+0x3e>
    }
    color+=100;
 8003586:	8bfb      	ldrh	r3, [r7, #30]
 8003588:	3364      	adds	r3, #100	@ 0x64
 800358a:	83fb      	strh	r3, [r7, #30]
  for(t = 0 ; t <= 4; t+=1) {
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	3301      	adds	r3, #1
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b04      	cmp	r3, #4
 8003596:	ddbb      	ble.n	8003510 <_Z14testroundrectsv+0x18>
  }
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	3724      	adds	r7, #36	@ 0x24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd90      	pop	{r4, r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000048 	.word	0x20000048

080035a8 <_Z12tftPrintTestv>:

void tftPrintTest() {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  tft.setTextWrap(false);
 80035ac:	2100      	movs	r1, #0
 80035ae:	482a      	ldr	r0, [pc, #168]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 80035b0:	f7ff fb84 	bl	8002cbc <_ZN12Adafruit_GFX11setTextWrapEb>
  tft.fillScreen(ST77XX_BLACK);
 80035b4:	2100      	movs	r1, #0
 80035b6:	4828      	ldr	r0, [pc, #160]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 80035b8:	f7fd f843 	bl	8000642 <_ZN12Adafruit_GFX10fillScreenEt>
  tft.setCursor(0, 30);
 80035bc:	221e      	movs	r2, #30
 80035be:	2100      	movs	r1, #0
 80035c0:	4825      	ldr	r0, [pc, #148]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 80035c2:	f7fc fdc3 	bl	800014c <_ZN12Adafruit_GFX9setCursorEss>
  tft.setTextColor(ST77XX_RED);
 80035c6:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80035ca:	4823      	ldr	r0, [pc, #140]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 80035cc:	f7fc fdd1 	bl	8000172 <_ZN12Adafruit_GFX12setTextColorEt>
  tft.setTextSize(1);
 80035d0:	2101      	movs	r1, #1
 80035d2:	4821      	ldr	r0, [pc, #132]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 80035d4:	f7fe fb31 	bl	8001c3a <_ZN12Adafruit_GFX11setTextSizeEh>
  //tft.println("Hello World!");
  tft.setTextColor(ST77XX_YELLOW);
 80035d8:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 80035dc:	481e      	ldr	r0, [pc, #120]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 80035de:	f7fc fdc8 	bl	8000172 <_ZN12Adafruit_GFX12setTextColorEt>
  tft.setTextSize(2);
 80035e2:	2102      	movs	r1, #2
 80035e4:	481c      	ldr	r0, [pc, #112]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 80035e6:	f7fe fb28 	bl	8001c3a <_ZN12Adafruit_GFX11setTextSizeEh>
  //tft.println("Hello World!");
  tft.setTextColor(ST77XX_GREEN);
 80035ea:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80035ee:	481a      	ldr	r0, [pc, #104]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 80035f0:	f7fc fdbf 	bl	8000172 <_ZN12Adafruit_GFX12setTextColorEt>
  tft.setTextSize(3);
 80035f4:	2103      	movs	r1, #3
 80035f6:	4818      	ldr	r0, [pc, #96]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 80035f8:	f7fe fb1f 	bl	8001c3a <_ZN12Adafruit_GFX11setTextSizeEh>
  //tft.println("Hello World!");
  tft.setTextColor(ST77XX_BLUE);
 80035fc:	211f      	movs	r1, #31
 80035fe:	4816      	ldr	r0, [pc, #88]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 8003600:	f7fc fdb7 	bl	8000172 <_ZN12Adafruit_GFX12setTextColorEt>
  tft.setTextSize(4);
 8003604:	2104      	movs	r1, #4
 8003606:	4814      	ldr	r0, [pc, #80]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 8003608:	f7fe fb17 	bl	8001c3a <_ZN12Adafruit_GFX11setTextSizeEh>
  //tft.print(1234.567);
  HAL_Delay(1500);
 800360c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003610:	f000 fbb2 	bl	8003d78 <HAL_Delay>
  tft.setCursor(0, 0);
 8003614:	2200      	movs	r2, #0
 8003616:	2100      	movs	r1, #0
 8003618:	480f      	ldr	r0, [pc, #60]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 800361a:	f7fc fd97 	bl	800014c <_ZN12Adafruit_GFX9setCursorEss>
  tft.fillScreen(ST77XX_BLACK);
 800361e:	2100      	movs	r1, #0
 8003620:	480d      	ldr	r0, [pc, #52]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 8003622:	f7fd f80e 	bl	8000642 <_ZN12Adafruit_GFX10fillScreenEt>
  tft.setTextColor(ST77XX_WHITE);
 8003626:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800362a:	480b      	ldr	r0, [pc, #44]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 800362c:	f7fc fda1 	bl	8000172 <_ZN12Adafruit_GFX12setTextColorEt>
  tft.setTextSize(0);
 8003630:	2100      	movs	r1, #0
 8003632:	4809      	ldr	r0, [pc, #36]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 8003634:	f7fe fb01 	bl	8001c3a <_ZN12Adafruit_GFX11setTextSizeEh>
  //tft.println("Hello World!");
  tft.setTextSize(1);
 8003638:	2101      	movs	r1, #1
 800363a:	4807      	ldr	r0, [pc, #28]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 800363c:	f7fe fafd 	bl	8001c3a <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.setTextColor(ST77XX_GREEN);
 8003640:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8003644:	4804      	ldr	r0, [pc, #16]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 8003646:	f7fc fd94 	bl	8000172 <_ZN12Adafruit_GFX12setTextColorEt>
  //tft.setTextColor(ST77XX_WHITE);
  //tft.println("Sketch has been");
  //tft.println("running for: ");
  //tft.setTextColor(ST77XX_MAGENTA);
  //tft.print(millis() / 1000);
  tft.setTextColor(ST77XX_WHITE);
 800364a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800364e:	4802      	ldr	r0, [pc, #8]	@ (8003658 <_Z12tftPrintTestv+0xb0>)
 8003650:	f7fc fd8f 	bl	8000172 <_ZN12Adafruit_GFX12setTextColorEt>
  //tft.print(" seconds.");
}
 8003654:	bf00      	nop
 8003656:	bd80      	pop	{r7, pc}
 8003658:	20000048 	.word	0x20000048

0800365c <_Z12mediabuttonsv>:

void mediabuttons() {
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af04      	add	r7, sp, #16
  // play
  tft.fillScreen(ST77XX_BLACK);
 8003662:	2100      	movs	r1, #0
 8003664:	4845      	ldr	r0, [pc, #276]	@ (800377c <_Z12mediabuttonsv+0x120>)
 8003666:	f7fc ffec 	bl	8000642 <_ZN12Adafruit_GFX10fillScreenEt>
  tft.fillRoundRect(25, 10, 78, 60, 8, ST77XX_WHITE);
 800366a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800366e:	9302      	str	r3, [sp, #8]
 8003670:	2308      	movs	r3, #8
 8003672:	9301      	str	r3, [sp, #4]
 8003674:	233c      	movs	r3, #60	@ 0x3c
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	234e      	movs	r3, #78	@ 0x4e
 800367a:	220a      	movs	r2, #10
 800367c:	2119      	movs	r1, #25
 800367e:	483f      	ldr	r0, [pc, #252]	@ (800377c <_Z12mediabuttonsv+0x120>)
 8003680:	f7fd fd0f 	bl	80010a2 <_ZN12Adafruit_GFX13fillRoundRectEssssst>
  tft.fillTriangle(42, 20, 42, 60, 90, 40, ST77XX_RED);
 8003684:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003688:	9303      	str	r3, [sp, #12]
 800368a:	2328      	movs	r3, #40	@ 0x28
 800368c:	9302      	str	r3, [sp, #8]
 800368e:	235a      	movs	r3, #90	@ 0x5a
 8003690:	9301      	str	r3, [sp, #4]
 8003692:	233c      	movs	r3, #60	@ 0x3c
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	232a      	movs	r3, #42	@ 0x2a
 8003698:	2214      	movs	r2, #20
 800369a:	212a      	movs	r1, #42	@ 0x2a
 800369c:	4837      	ldr	r0, [pc, #220]	@ (800377c <_Z12mediabuttonsv+0x120>)
 800369e:	f7fd fdd5 	bl	800124c <_ZN12Adafruit_GFX12fillTriangleEsssssst>
  HAL_Delay(500);
 80036a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80036a6:	f000 fb67 	bl	8003d78 <HAL_Delay>
  // pause
  tft.fillRoundRect(25, 90, 78, 60, 8, ST77XX_WHITE);
 80036aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036ae:	9302      	str	r3, [sp, #8]
 80036b0:	2308      	movs	r3, #8
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	233c      	movs	r3, #60	@ 0x3c
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	234e      	movs	r3, #78	@ 0x4e
 80036ba:	225a      	movs	r2, #90	@ 0x5a
 80036bc:	2119      	movs	r1, #25
 80036be:	482f      	ldr	r0, [pc, #188]	@ (800377c <_Z12mediabuttonsv+0x120>)
 80036c0:	f7fd fcef 	bl	80010a2 <_ZN12Adafruit_GFX13fillRoundRectEssssst>
  tft.fillRoundRect(39, 98, 20, 45, 5, ST77XX_GREEN);
 80036c4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80036c8:	9302      	str	r3, [sp, #8]
 80036ca:	2305      	movs	r3, #5
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	232d      	movs	r3, #45	@ 0x2d
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	2314      	movs	r3, #20
 80036d4:	2262      	movs	r2, #98	@ 0x62
 80036d6:	2127      	movs	r1, #39	@ 0x27
 80036d8:	4828      	ldr	r0, [pc, #160]	@ (800377c <_Z12mediabuttonsv+0x120>)
 80036da:	f7fd fce2 	bl	80010a2 <_ZN12Adafruit_GFX13fillRoundRectEssssst>
  tft.fillRoundRect(69, 98, 20, 45, 5, ST77XX_GREEN);
 80036de:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80036e2:	9302      	str	r3, [sp, #8]
 80036e4:	2305      	movs	r3, #5
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	232d      	movs	r3, #45	@ 0x2d
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	2314      	movs	r3, #20
 80036ee:	2262      	movs	r2, #98	@ 0x62
 80036f0:	2145      	movs	r1, #69	@ 0x45
 80036f2:	4822      	ldr	r0, [pc, #136]	@ (800377c <_Z12mediabuttonsv+0x120>)
 80036f4:	f7fd fcd5 	bl	80010a2 <_ZN12Adafruit_GFX13fillRoundRectEssssst>
  HAL_Delay(500);
 80036f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80036fc:	f000 fb3c 	bl	8003d78 <HAL_Delay>
  // play color
  tft.fillTriangle(42, 20, 42, 60, 90, 40, ST77XX_BLUE);
 8003700:	231f      	movs	r3, #31
 8003702:	9303      	str	r3, [sp, #12]
 8003704:	2328      	movs	r3, #40	@ 0x28
 8003706:	9302      	str	r3, [sp, #8]
 8003708:	235a      	movs	r3, #90	@ 0x5a
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	233c      	movs	r3, #60	@ 0x3c
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	232a      	movs	r3, #42	@ 0x2a
 8003712:	2214      	movs	r2, #20
 8003714:	212a      	movs	r1, #42	@ 0x2a
 8003716:	4819      	ldr	r0, [pc, #100]	@ (800377c <_Z12mediabuttonsv+0x120>)
 8003718:	f7fd fd98 	bl	800124c <_ZN12Adafruit_GFX12fillTriangleEsssssst>
  HAL_Delay(50);
 800371c:	2032      	movs	r0, #50	@ 0x32
 800371e:	f000 fb2b 	bl	8003d78 <HAL_Delay>
  // pause color
  tft.fillRoundRect(39, 98, 20, 45, 5, ST77XX_RED);
 8003722:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003726:	9302      	str	r3, [sp, #8]
 8003728:	2305      	movs	r3, #5
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	232d      	movs	r3, #45	@ 0x2d
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	2314      	movs	r3, #20
 8003732:	2262      	movs	r2, #98	@ 0x62
 8003734:	2127      	movs	r1, #39	@ 0x27
 8003736:	4811      	ldr	r0, [pc, #68]	@ (800377c <_Z12mediabuttonsv+0x120>)
 8003738:	f7fd fcb3 	bl	80010a2 <_ZN12Adafruit_GFX13fillRoundRectEssssst>
  tft.fillRoundRect(69, 98, 20, 45, 5, ST77XX_RED);
 800373c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003740:	9302      	str	r3, [sp, #8]
 8003742:	2305      	movs	r3, #5
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	232d      	movs	r3, #45	@ 0x2d
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2314      	movs	r3, #20
 800374c:	2262      	movs	r2, #98	@ 0x62
 800374e:	2145      	movs	r1, #69	@ 0x45
 8003750:	480a      	ldr	r0, [pc, #40]	@ (800377c <_Z12mediabuttonsv+0x120>)
 8003752:	f7fd fca6 	bl	80010a2 <_ZN12Adafruit_GFX13fillRoundRectEssssst>
  // play color
  tft.fillTriangle(42, 20, 42, 60, 90, 40, ST77XX_GREEN);
 8003756:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800375a:	9303      	str	r3, [sp, #12]
 800375c:	2328      	movs	r3, #40	@ 0x28
 800375e:	9302      	str	r3, [sp, #8]
 8003760:	235a      	movs	r3, #90	@ 0x5a
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	233c      	movs	r3, #60	@ 0x3c
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	232a      	movs	r3, #42	@ 0x2a
 800376a:	2214      	movs	r2, #20
 800376c:	212a      	movs	r1, #42	@ 0x2a
 800376e:	4803      	ldr	r0, [pc, #12]	@ (800377c <_Z12mediabuttonsv+0x120>)
 8003770:	f7fd fd6c 	bl	800124c <_ZN12Adafruit_GFX12fillTriangleEsssssst>
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20000048 	.word	0x20000048

08003780 <CppMain>:

void CppMain()
{
 8003780:	b598      	push	{r3, r4, r7, lr}
 8003782:	af00      	add	r7, sp, #0
	// Setup code
	  tft.fillScreen(ST77XX_BLACK);
 8003784:	2100      	movs	r1, #0
 8003786:	4848      	ldr	r0, [pc, #288]	@ (80038a8 <CppMain+0x128>)
 8003788:	f7fc ff5b 	bl	8000642 <_ZN12Adafruit_GFX10fillScreenEt>
	  HAL_Delay(500);
 800378c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003790:	f000 faf2 	bl	8003d78 <HAL_Delay>

	  // large block of text
	  tft.fillScreen(ST77XX_BLACK);
 8003794:	2100      	movs	r1, #0
 8003796:	4844      	ldr	r0, [pc, #272]	@ (80038a8 <CppMain+0x128>)
 8003798:	f7fc ff53 	bl	8000642 <_ZN12Adafruit_GFX10fillScreenEt>
	  testdrawtext("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur adipiscing ante sed nibh tincidunt feugiat. Maecenas enim massa, fringilla sed malesuada et, malesuada sit amet turpis. Sed porttitor neque ut ante pretium vitae malesuada nunc bibendum. Nullam aliquet ultrices massa eu hendrerit. Ut sed nisi lorem. In vestibulum purus a tortor imperdiet posuere. ", ST77XX_WHITE);
 800379c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80037a0:	4842      	ldr	r0, [pc, #264]	@ (80038ac <CppMain+0x12c>)
 80037a2:	f7ff fc61 	bl	8003068 <_Z12testdrawtextPKct>
	  HAL_Delay(1000);
 80037a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80037aa:	f000 fae5 	bl	8003d78 <HAL_Delay>

	  // tft print function!
	  tftPrintTest();
 80037ae:	f7ff fefb 	bl	80035a8 <_Z12tftPrintTestv>
	  HAL_Delay(4000);
 80037b2:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80037b6:	f000 fadf 	bl	8003d78 <HAL_Delay>

	  // a single pixel
	  tft.drawPixel(tft.width()/2, tft.height()/2, ST77XX_GREEN);
 80037ba:	483b      	ldr	r0, [pc, #236]	@ (80038a8 <CppMain+0x128>)
 80037bc:	f7fc fceb 	bl	8000196 <_ZNK12Adafruit_GFX5widthEv>
 80037c0:	4603      	mov	r3, r0
 80037c2:	0fda      	lsrs	r2, r3, #31
 80037c4:	4413      	add	r3, r2
 80037c6:	105b      	asrs	r3, r3, #1
 80037c8:	b21c      	sxth	r4, r3
 80037ca:	4837      	ldr	r0, [pc, #220]	@ (80038a8 <CppMain+0x128>)
 80037cc:	f7fc fcef 	bl	80001ae <_ZNK12Adafruit_GFX6heightEv>
 80037d0:	4603      	mov	r3, r0
 80037d2:	0fda      	lsrs	r2, r3, #31
 80037d4:	4413      	add	r3, r2
 80037d6:	105b      	asrs	r3, r3, #1
 80037d8:	b21a      	sxth	r2, r3
 80037da:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80037de:	4621      	mov	r1, r4
 80037e0:	4831      	ldr	r0, [pc, #196]	@ (80038a8 <CppMain+0x128>)
 80037e2:	f7fe fd8a 	bl	80022fa <_ZN15Adafruit_SPITFT9drawPixelEsst>
	  HAL_Delay(500);
 80037e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80037ea:	f000 fac5 	bl	8003d78 <HAL_Delay>

	  // line draw test
	  testlines(ST77XX_YELLOW);
 80037ee:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80037f2:	f7ff faa5 	bl	8002d40 <_Z9testlinest>
	  HAL_Delay(500);
 80037f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80037fa:	f000 fabd 	bl	8003d78 <HAL_Delay>

	  // optimized lines
	  testfastlines(ST77XX_RED, ST77XX_BLUE);
 80037fe:	211f      	movs	r1, #31
 8003800:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8003804:	f7ff fc4a 	bl	800309c <_Z13testfastlinestt>
	  HAL_Delay(500);
 8003808:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800380c:	f000 fab4 	bl	8003d78 <HAL_Delay>

	  testdrawrects(ST77XX_GREEN);
 8003810:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8003814:	f7ff fc9c 	bl	8003150 <_Z13testdrawrectst>
	  HAL_Delay(500);
 8003818:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800381c:	f000 faac 	bl	8003d78 <HAL_Delay>

	  testfillrects(ST77XX_YELLOW, ST77XX_MAGENTA);
 8003820:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8003824:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8003828:	f7ff fcea 	bl	8003200 <_Z13testfillrectstt>
	  HAL_Delay(500);
 800382c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003830:	f000 faa2 	bl	8003d78 <HAL_Delay>

	  tft.fillScreen(ST77XX_BLACK);
 8003834:	2100      	movs	r1, #0
 8003836:	481c      	ldr	r0, [pc, #112]	@ (80038a8 <CppMain+0x128>)
 8003838:	f7fc ff03 	bl	8000642 <_ZN12Adafruit_GFX10fillScreenEt>
	  testfillcircles(10, ST77XX_BLUE);
 800383c:	211f      	movs	r1, #31
 800383e:	200a      	movs	r0, #10
 8003840:	f7ff fd66 	bl	8003310 <_Z15testfillcirclesht>
	  testdrawcircles(10, ST77XX_WHITE);
 8003844:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003848:	200a      	movs	r0, #10
 800384a:	f7ff fdaf 	bl	80033ac <_Z15testdrawcirclesht>
	  HAL_Delay(500);
 800384e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003852:	f000 fa91 	bl	8003d78 <HAL_Delay>

	  testroundrects();
 8003856:	f7ff fe4f 	bl	80034f8 <_Z14testroundrectsv>
	  HAL_Delay(500);
 800385a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800385e:	f000 fa8b 	bl	8003d78 <HAL_Delay>

	  testtriangles();
 8003862:	f7ff fdf5 	bl	8003450 <_Z13testtrianglesv>
	  HAL_Delay(500);
 8003866:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800386a:	f000 fa85 	bl	8003d78 <HAL_Delay>

	  mediabuttons();
 800386e:	f7ff fef5 	bl	800365c <_Z12mediabuttonsv>
	  HAL_Delay(500);
 8003872:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003876:	f000 fa7f 	bl	8003d78 <HAL_Delay>


	  HAL_Delay(1000);
 800387a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800387e:	f000 fa7b 	bl	8003d78 <HAL_Delay>
	while(1)
	{
		// loop
		tft.invertDisplay(true);
 8003882:	2101      	movs	r1, #1
 8003884:	4808      	ldr	r0, [pc, #32]	@ (80038a8 <CppMain+0x128>)
 8003886:	f7fe ff0c 	bl	80026a2 <_ZN15Adafruit_SPITFT13invertDisplayEb>
		HAL_Delay(500);
 800388a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800388e:	f000 fa73 	bl	8003d78 <HAL_Delay>
		tft.invertDisplay(false);
 8003892:	2100      	movs	r1, #0
 8003894:	4804      	ldr	r0, [pc, #16]	@ (80038a8 <CppMain+0x128>)
 8003896:	f7fe ff04 	bl	80026a2 <_ZN15Adafruit_SPITFT13invertDisplayEb>
		HAL_Delay(500);
 800389a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800389e:	f000 fa6b 	bl	8003d78 <HAL_Delay>
		tft.invertDisplay(true);
 80038a2:	bf00      	nop
 80038a4:	e7ed      	b.n	8003882 <CppMain+0x102>
 80038a6:	bf00      	nop
 80038a8:	20000048 	.word	0x20000048
 80038ac:	08005020 	.word	0x08005020

080038b0 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d109      	bne.n	80038d4 <_Z41__static_initialization_and_destruction_0ii+0x24>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d104      	bne.n	80038d4 <_Z41__static_initialization_and_destruction_0ii+0x24>
Adafruit_ST7735 tft = Adafruit_ST7735();
 80038ca:	2240      	movs	r2, #64	@ 0x40
 80038cc:	2108      	movs	r1, #8
 80038ce:	4809      	ldr	r0, [pc, #36]	@ (80038f4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80038d0:	f7fe ffc4 	bl	800285c <_ZN15Adafruit_ST7735C1Eaa>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d107      	bne.n	80038ea <_Z41__static_initialization_and_destruction_0ii+0x3a>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d102      	bne.n	80038ea <_Z41__static_initialization_and_destruction_0ii+0x3a>
 80038e4:	4803      	ldr	r0, [pc, #12]	@ (80038f4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80038e6:	f7ff fa19 	bl	8002d1c <_ZN15Adafruit_ST7735D1Ev>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000048 	.word	0x20000048

080038f8 <_GLOBAL__sub_I_tft>:
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003900:	2001      	movs	r0, #1
 8003902:	f7ff ffd5 	bl	80038b0 <_Z41__static_initialization_and_destruction_0ii>
 8003906:	bd80      	pop	{r7, pc}

08003908 <_GLOBAL__sub_D_tft>:
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
 800390c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003910:	2000      	movs	r0, #0
 8003912:	f7ff ffcd 	bl	80038b0 <_Z41__static_initialization_and_destruction_0ii>
 8003916:	bd80      	pop	{r7, pc}

08003918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800391c:	f000 f9ca 	bl	8003cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003920:	f000 f807 	bl	8003932 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003924:	f000 f882 	bl	8003a2c <MX_GPIO_Init>
  MX_SPI1_Init();
 8003928:	f000 f848 	bl	80039bc <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CppMain();
 800392c:	f7ff ff28 	bl	8003780 <CppMain>
 8003930:	e7fc      	b.n	800392c <main+0x14>

08003932 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b090      	sub	sp, #64	@ 0x40
 8003936:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003938:	f107 0318 	add.w	r3, r7, #24
 800393c:	2228      	movs	r2, #40	@ 0x28
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f001 fb34 	bl	8004fae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003946:	1d3b      	adds	r3, r7, #4
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	609a      	str	r2, [r3, #8]
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003954:	2301      	movs	r3, #1
 8003956:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003958:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800395c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800395e:	2300      	movs	r3, #0
 8003960:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003962:	2301      	movs	r3, #1
 8003964:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003966:	2302      	movs	r3, #2
 8003968:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800396a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800396e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003970:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003974:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003976:	f107 0318 	add.w	r3, r7, #24
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fcb8 	bl	80042f0 <HAL_RCC_OscConfig>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003986:	f000 f89b 	bl	8003ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800398a:	230f      	movs	r3, #15
 800398c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800398e:	2302      	movs	r3, #2
 8003990:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003996:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800399a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80039a0:	1d3b      	adds	r3, r7, #4
 80039a2:	2102      	movs	r1, #2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 ff25 	bl	80047f4 <HAL_RCC_ClockConfig>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80039b0:	f000 f886 	bl	8003ac0 <Error_Handler>
  }
}
 80039b4:	bf00      	nop
 80039b6:	3740      	adds	r7, #64	@ 0x40
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80039c0:	4b18      	ldr	r3, [pc, #96]	@ (8003a24 <MX_SPI1_Init+0x68>)
 80039c2:	4a19      	ldr	r2, [pc, #100]	@ (8003a28 <MX_SPI1_Init+0x6c>)
 80039c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039c6:	4b17      	ldr	r3, [pc, #92]	@ (8003a24 <MX_SPI1_Init+0x68>)
 80039c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80039ce:	4b15      	ldr	r3, [pc, #84]	@ (8003a24 <MX_SPI1_Init+0x68>)
 80039d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80039d4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039d6:	4b13      	ldr	r3, [pc, #76]	@ (8003a24 <MX_SPI1_Init+0x68>)
 80039d8:	2200      	movs	r2, #0
 80039da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80039dc:	4b11      	ldr	r3, [pc, #68]	@ (8003a24 <MX_SPI1_Init+0x68>)
 80039de:	2202      	movs	r2, #2
 80039e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80039e2:	4b10      	ldr	r3, [pc, #64]	@ (8003a24 <MX_SPI1_Init+0x68>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80039e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a24 <MX_SPI1_Init+0x68>)
 80039ea:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80039ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80039f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a24 <MX_SPI1_Init+0x68>)
 80039f2:	2218      	movs	r2, #24
 80039f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <MX_SPI1_Init+0x68>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80039fc:	4b09      	ldr	r3, [pc, #36]	@ (8003a24 <MX_SPI1_Init+0x68>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a02:	4b08      	ldr	r3, [pc, #32]	@ (8003a24 <MX_SPI1_Init+0x68>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003a08:	4b06      	ldr	r3, [pc, #24]	@ (8003a24 <MX_SPI1_Init+0x68>)
 8003a0a:	220a      	movs	r2, #10
 8003a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a0e:	4805      	ldr	r0, [pc, #20]	@ (8003a24 <MX_SPI1_Init+0x68>)
 8003a10:	f001 f84c 	bl	8004aac <HAL_SPI_Init>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8003a1a:	f000 f851 	bl	8003ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000074 	.word	0x20000074
 8003a28:	40013000 	.word	0x40013000

08003a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a32:	f107 0310 	add.w	r3, r7, #16
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	605a      	str	r2, [r3, #4]
 8003a3c:	609a      	str	r2, [r3, #8]
 8003a3e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a40:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab8 <MX_GPIO_Init+0x8c>)
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab8 <MX_GPIO_Init+0x8c>)
 8003a46:	f043 0320 	orr.w	r3, r3, #32
 8003a4a:	6193      	str	r3, [r2, #24]
 8003a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab8 <MX_GPIO_Init+0x8c>)
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a58:	4b17      	ldr	r3, [pc, #92]	@ (8003ab8 <MX_GPIO_Init+0x8c>)
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	4a16      	ldr	r2, [pc, #88]	@ (8003ab8 <MX_GPIO_Init+0x8c>)
 8003a5e:	f043 0304 	orr.w	r3, r3, #4
 8003a62:	6193      	str	r3, [r2, #24]
 8003a64:	4b14      	ldr	r3, [pc, #80]	@ (8003ab8 <MX_GPIO_Init+0x8c>)
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a70:	4b11      	ldr	r3, [pc, #68]	@ (8003ab8 <MX_GPIO_Init+0x8c>)
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	4a10      	ldr	r2, [pc, #64]	@ (8003ab8 <MX_GPIO_Init+0x8c>)
 8003a76:	f043 0308 	orr.w	r3, r3, #8
 8003a7a:	6193      	str	r3, [r2, #24]
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab8 <MX_GPIO_Init+0x8c>)
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	607b      	str	r3, [r7, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2148      	movs	r1, #72	@ 0x48
 8003a8c:	480b      	ldr	r0, [pc, #44]	@ (8003abc <MX_GPIO_Init+0x90>)
 8003a8e:	f000 fc16 	bl	80042be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8003a92:	2348      	movs	r3, #72	@ 0x48
 8003a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a96:	2301      	movs	r3, #1
 8003a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa2:	f107 0310 	add.w	r3, r7, #16
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4804      	ldr	r0, [pc, #16]	@ (8003abc <MX_GPIO_Init+0x90>)
 8003aaa:	f000 fa6d 	bl	8003f88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003aae:	bf00      	nop
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40010800 	.word	0x40010800

08003ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ac4:	b672      	cpsid	i
}
 8003ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ac8:	bf00      	nop
 8003aca:	e7fd      	b.n	8003ac8 <Error_Handler+0x8>

08003acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003ad2:	4b15      	ldr	r3, [pc, #84]	@ (8003b28 <HAL_MspInit+0x5c>)
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	4a14      	ldr	r2, [pc, #80]	@ (8003b28 <HAL_MspInit+0x5c>)
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	6193      	str	r3, [r2, #24]
 8003ade:	4b12      	ldr	r3, [pc, #72]	@ (8003b28 <HAL_MspInit+0x5c>)
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aea:	4b0f      	ldr	r3, [pc, #60]	@ (8003b28 <HAL_MspInit+0x5c>)
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	4a0e      	ldr	r2, [pc, #56]	@ (8003b28 <HAL_MspInit+0x5c>)
 8003af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003af4:	61d3      	str	r3, [r2, #28]
 8003af6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b28 <HAL_MspInit+0x5c>)
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8003b02:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <HAL_MspInit+0x60>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	4a04      	ldr	r2, [pc, #16]	@ (8003b2c <HAL_MspInit+0x60>)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40010000 	.word	0x40010000

08003b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	@ 0x28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b38:	f107 0314 	add.w	r3, r7, #20
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a29      	ldr	r2, [pc, #164]	@ (8003bf0 <HAL_SPI_MspInit+0xc0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d14a      	bne.n	8003be6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b50:	4b28      	ldr	r3, [pc, #160]	@ (8003bf4 <HAL_SPI_MspInit+0xc4>)
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	4a27      	ldr	r2, [pc, #156]	@ (8003bf4 <HAL_SPI_MspInit+0xc4>)
 8003b56:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b5a:	6193      	str	r3, [r2, #24]
 8003b5c:	4b25      	ldr	r3, [pc, #148]	@ (8003bf4 <HAL_SPI_MspInit+0xc4>)
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b68:	4b22      	ldr	r3, [pc, #136]	@ (8003bf4 <HAL_SPI_MspInit+0xc4>)
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	4a21      	ldr	r2, [pc, #132]	@ (8003bf4 <HAL_SPI_MspInit+0xc4>)
 8003b6e:	f043 0304 	orr.w	r3, r3, #4
 8003b72:	6193      	str	r3, [r2, #24]
 8003b74:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf4 <HAL_SPI_MspInit+0xc4>)
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b80:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf4 <HAL_SPI_MspInit+0xc4>)
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf4 <HAL_SPI_MspInit+0xc4>)
 8003b86:	f043 0308 	orr.w	r3, r3, #8
 8003b8a:	6193      	str	r3, [r2, #24]
 8003b8c:	4b19      	ldr	r3, [pc, #100]	@ (8003bf4 <HAL_SPI_MspInit+0xc4>)
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003b98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ba6:	f107 0314 	add.w	r3, r7, #20
 8003baa:	4619      	mov	r1, r3
 8003bac:	4812      	ldr	r0, [pc, #72]	@ (8003bf8 <HAL_SPI_MspInit+0xc8>)
 8003bae:	f000 f9eb 	bl	8003f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003bb2:	2328      	movs	r3, #40	@ 0x28
 8003bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bbe:	f107 0314 	add.w	r3, r7, #20
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	480d      	ldr	r0, [pc, #52]	@ (8003bfc <HAL_SPI_MspInit+0xcc>)
 8003bc6:	f000 f9df 	bl	8003f88 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003bca:	4b0d      	ldr	r3, [pc, #52]	@ (8003c00 <HAL_SPI_MspInit+0xd0>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be0:	4a07      	ldr	r2, [pc, #28]	@ (8003c00 <HAL_SPI_MspInit+0xd0>)
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	6053      	str	r3, [r2, #4]

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003be6:	bf00      	nop
 8003be8:	3728      	adds	r7, #40	@ 0x28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40013000 	.word	0x40013000
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40010800 	.word	0x40010800
 8003bfc:	40010c00 	.word	0x40010c00
 8003c00:	40010000 	.word	0x40010000

08003c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c08:	bf00      	nop
 8003c0a:	e7fd      	b.n	8003c08 <NMI_Handler+0x4>

08003c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c10:	bf00      	nop
 8003c12:	e7fd      	b.n	8003c10 <HardFault_Handler+0x4>

08003c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c18:	bf00      	nop
 8003c1a:	e7fd      	b.n	8003c18 <MemManage_Handler+0x4>

08003c1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c20:	bf00      	nop
 8003c22:	e7fd      	b.n	8003c20 <BusFault_Handler+0x4>

08003c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c28:	bf00      	nop
 8003c2a:	e7fd      	b.n	8003c28 <UsageFault_Handler+0x4>

08003c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c30:	bf00      	nop
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c3c:	bf00      	nop
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr

08003c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c48:	bf00      	nop
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c54:	f000 f874 	bl	8003d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c58:	bf00      	nop
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c68:	f7ff fff8 	bl	8003c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c6c:	480b      	ldr	r0, [pc, #44]	@ (8003c9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003c6e:	490c      	ldr	r1, [pc, #48]	@ (8003ca0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003c70:	4a0c      	ldr	r2, [pc, #48]	@ (8003ca4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c74:	e002      	b.n	8003c7c <LoopCopyDataInit>

08003c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c7a:	3304      	adds	r3, #4

08003c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c80:	d3f9      	bcc.n	8003c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c82:	4a09      	ldr	r2, [pc, #36]	@ (8003ca8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003c84:	4c09      	ldr	r4, [pc, #36]	@ (8003cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c88:	e001      	b.n	8003c8e <LoopFillZerobss>

08003c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c8c:	3204      	adds	r2, #4

08003c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c90:	d3fb      	bcc.n	8003c8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c92:	f001 f995 	bl	8004fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c96:	f7ff fe3f 	bl	8003918 <main>
  bx lr
 8003c9a:	4770      	bx	lr
  ldr r0, =_sdata
 8003c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ca0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003ca4:	08005800 	.word	0x08005800
  ldr r2, =_sbss
 8003ca8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003cac:	200000d0 	.word	0x200000d0

08003cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003cb0:	e7fe      	b.n	8003cb0 <ADC1_2_IRQHandler>
	...

08003cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cb8:	4b08      	ldr	r3, [pc, #32]	@ (8003cdc <HAL_Init+0x28>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a07      	ldr	r2, [pc, #28]	@ (8003cdc <HAL_Init+0x28>)
 8003cbe:	f043 0310 	orr.w	r3, r3, #16
 8003cc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cc4:	2003      	movs	r0, #3
 8003cc6:	f000 f92b 	bl	8003f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cca:	200f      	movs	r0, #15
 8003ccc:	f000 f808 	bl	8003ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cd0:	f7ff fefc 	bl	8003acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40022000 	.word	0x40022000

08003ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ce8:	4b12      	ldr	r3, [pc, #72]	@ (8003d34 <HAL_InitTick+0x54>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	4b12      	ldr	r3, [pc, #72]	@ (8003d38 <HAL_InitTick+0x58>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 f935 	bl	8003f6e <HAL_SYSTICK_Config>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e00e      	b.n	8003d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b0f      	cmp	r3, #15
 8003d12:	d80a      	bhi.n	8003d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d14:	2200      	movs	r2, #0
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1c:	f000 f90b 	bl	8003f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d20:	4a06      	ldr	r2, [pc, #24]	@ (8003d3c <HAL_InitTick+0x5c>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	e000      	b.n	8003d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20000000 	.word	0x20000000
 8003d38:	20000008 	.word	0x20000008
 8003d3c:	20000004 	.word	0x20000004

08003d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d44:	4b05      	ldr	r3, [pc, #20]	@ (8003d5c <HAL_IncTick+0x1c>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4b05      	ldr	r3, [pc, #20]	@ (8003d60 <HAL_IncTick+0x20>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4413      	add	r3, r2
 8003d50:	4a03      	ldr	r2, [pc, #12]	@ (8003d60 <HAL_IncTick+0x20>)
 8003d52:	6013      	str	r3, [r2, #0]
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr
 8003d5c:	20000008 	.word	0x20000008
 8003d60:	200000cc 	.word	0x200000cc

08003d64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return uwTick;
 8003d68:	4b02      	ldr	r3, [pc, #8]	@ (8003d74 <HAL_GetTick+0x10>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr
 8003d74:	200000cc 	.word	0x200000cc

08003d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d80:	f7ff fff0 	bl	8003d64 <HAL_GetTick>
 8003d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d90:	d005      	beq.n	8003d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d92:	4b0a      	ldr	r3, [pc, #40]	@ (8003dbc <HAL_Delay+0x44>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d9e:	bf00      	nop
 8003da0:	f7ff ffe0 	bl	8003d64 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d8f7      	bhi.n	8003da0 <HAL_Delay+0x28>
  {
  }
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000008 	.word	0x20000008

08003dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e04 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003df2:	4a04      	ldr	r2, [pc, #16]	@ (8003e04 <__NVIC_SetPriorityGrouping+0x44>)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	60d3      	str	r3, [r2, #12]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e0c:	4b04      	ldr	r3, [pc, #16]	@ (8003e20 <__NVIC_GetPriorityGrouping+0x18>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	f003 0307 	and.w	r3, r3, #7
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	e000ed00 	.word	0xe000ed00

08003e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	db0a      	blt.n	8003e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	490c      	ldr	r1, [pc, #48]	@ (8003e70 <__NVIC_SetPriority+0x4c>)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	0112      	lsls	r2, r2, #4
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	440b      	add	r3, r1
 8003e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e4c:	e00a      	b.n	8003e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	4908      	ldr	r1, [pc, #32]	@ (8003e74 <__NVIC_SetPriority+0x50>)
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	3b04      	subs	r3, #4
 8003e5c:	0112      	lsls	r2, r2, #4
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	440b      	add	r3, r1
 8003e62:	761a      	strb	r2, [r3, #24]
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	e000e100 	.word	0xe000e100
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b089      	sub	sp, #36	@ 0x24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f1c3 0307 	rsb	r3, r3, #7
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	bf28      	it	cs
 8003e96:	2304      	movcs	r3, #4
 8003e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	2b06      	cmp	r3, #6
 8003ea0:	d902      	bls.n	8003ea8 <NVIC_EncodePriority+0x30>
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3b03      	subs	r3, #3
 8003ea6:	e000      	b.n	8003eaa <NVIC_EncodePriority+0x32>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eac:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	401a      	ands	r2, r3
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	43d9      	mvns	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed0:	4313      	orrs	r3, r2
         );
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3724      	adds	r7, #36	@ 0x24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003eec:	d301      	bcc.n	8003ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e00f      	b.n	8003f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8003f1c <SysTick_Config+0x40>)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003efa:	210f      	movs	r1, #15
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295
 8003f00:	f7ff ff90 	bl	8003e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f04:	4b05      	ldr	r3, [pc, #20]	@ (8003f1c <SysTick_Config+0x40>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f0a:	4b04      	ldr	r3, [pc, #16]	@ (8003f1c <SysTick_Config+0x40>)
 8003f0c:	2207      	movs	r2, #7
 8003f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	e000e010 	.word	0xe000e010

08003f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ff49 	bl	8003dc0 <__NVIC_SetPriorityGrouping>
}
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b086      	sub	sp, #24
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
 8003f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f48:	f7ff ff5e 	bl	8003e08 <__NVIC_GetPriorityGrouping>
 8003f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	6978      	ldr	r0, [r7, #20]
 8003f54:	f7ff ff90 	bl	8003e78 <NVIC_EncodePriority>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff5f 	bl	8003e24 <__NVIC_SetPriority>
}
 8003f66:	bf00      	nop
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff ffb0 	bl	8003edc <SysTick_Config>
 8003f7c:	4603      	mov	r3, r0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b08b      	sub	sp, #44	@ 0x2c
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f92:	2300      	movs	r3, #0
 8003f94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f96:	2300      	movs	r3, #0
 8003f98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f9a:	e169      	b.n	8004270 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	4013      	ands	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	f040 8158 	bne.w	800426a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4a9a      	ldr	r2, [pc, #616]	@ (8004228 <HAL_GPIO_Init+0x2a0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d05e      	beq.n	8004082 <HAL_GPIO_Init+0xfa>
 8003fc4:	4a98      	ldr	r2, [pc, #608]	@ (8004228 <HAL_GPIO_Init+0x2a0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d875      	bhi.n	80040b6 <HAL_GPIO_Init+0x12e>
 8003fca:	4a98      	ldr	r2, [pc, #608]	@ (800422c <HAL_GPIO_Init+0x2a4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d058      	beq.n	8004082 <HAL_GPIO_Init+0xfa>
 8003fd0:	4a96      	ldr	r2, [pc, #600]	@ (800422c <HAL_GPIO_Init+0x2a4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d86f      	bhi.n	80040b6 <HAL_GPIO_Init+0x12e>
 8003fd6:	4a96      	ldr	r2, [pc, #600]	@ (8004230 <HAL_GPIO_Init+0x2a8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d052      	beq.n	8004082 <HAL_GPIO_Init+0xfa>
 8003fdc:	4a94      	ldr	r2, [pc, #592]	@ (8004230 <HAL_GPIO_Init+0x2a8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d869      	bhi.n	80040b6 <HAL_GPIO_Init+0x12e>
 8003fe2:	4a94      	ldr	r2, [pc, #592]	@ (8004234 <HAL_GPIO_Init+0x2ac>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d04c      	beq.n	8004082 <HAL_GPIO_Init+0xfa>
 8003fe8:	4a92      	ldr	r2, [pc, #584]	@ (8004234 <HAL_GPIO_Init+0x2ac>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d863      	bhi.n	80040b6 <HAL_GPIO_Init+0x12e>
 8003fee:	4a92      	ldr	r2, [pc, #584]	@ (8004238 <HAL_GPIO_Init+0x2b0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d046      	beq.n	8004082 <HAL_GPIO_Init+0xfa>
 8003ff4:	4a90      	ldr	r2, [pc, #576]	@ (8004238 <HAL_GPIO_Init+0x2b0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d85d      	bhi.n	80040b6 <HAL_GPIO_Init+0x12e>
 8003ffa:	2b12      	cmp	r3, #18
 8003ffc:	d82a      	bhi.n	8004054 <HAL_GPIO_Init+0xcc>
 8003ffe:	2b12      	cmp	r3, #18
 8004000:	d859      	bhi.n	80040b6 <HAL_GPIO_Init+0x12e>
 8004002:	a201      	add	r2, pc, #4	@ (adr r2, 8004008 <HAL_GPIO_Init+0x80>)
 8004004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004008:	08004083 	.word	0x08004083
 800400c:	0800405d 	.word	0x0800405d
 8004010:	0800406f 	.word	0x0800406f
 8004014:	080040b1 	.word	0x080040b1
 8004018:	080040b7 	.word	0x080040b7
 800401c:	080040b7 	.word	0x080040b7
 8004020:	080040b7 	.word	0x080040b7
 8004024:	080040b7 	.word	0x080040b7
 8004028:	080040b7 	.word	0x080040b7
 800402c:	080040b7 	.word	0x080040b7
 8004030:	080040b7 	.word	0x080040b7
 8004034:	080040b7 	.word	0x080040b7
 8004038:	080040b7 	.word	0x080040b7
 800403c:	080040b7 	.word	0x080040b7
 8004040:	080040b7 	.word	0x080040b7
 8004044:	080040b7 	.word	0x080040b7
 8004048:	080040b7 	.word	0x080040b7
 800404c:	08004065 	.word	0x08004065
 8004050:	08004079 	.word	0x08004079
 8004054:	4a79      	ldr	r2, [pc, #484]	@ (800423c <HAL_GPIO_Init+0x2b4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800405a:	e02c      	b.n	80040b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	623b      	str	r3, [r7, #32]
          break;
 8004062:	e029      	b.n	80040b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	3304      	adds	r3, #4
 800406a:	623b      	str	r3, [r7, #32]
          break;
 800406c:	e024      	b.n	80040b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	3308      	adds	r3, #8
 8004074:	623b      	str	r3, [r7, #32]
          break;
 8004076:	e01f      	b.n	80040b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	330c      	adds	r3, #12
 800407e:	623b      	str	r3, [r7, #32]
          break;
 8004080:	e01a      	b.n	80040b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d102      	bne.n	8004090 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800408a:	2304      	movs	r3, #4
 800408c:	623b      	str	r3, [r7, #32]
          break;
 800408e:	e013      	b.n	80040b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d105      	bne.n	80040a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004098:	2308      	movs	r3, #8
 800409a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	611a      	str	r2, [r3, #16]
          break;
 80040a2:	e009      	b.n	80040b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040a4:	2308      	movs	r3, #8
 80040a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	615a      	str	r2, [r3, #20]
          break;
 80040ae:	e003      	b.n	80040b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80040b0:	2300      	movs	r3, #0
 80040b2:	623b      	str	r3, [r7, #32]
          break;
 80040b4:	e000      	b.n	80040b8 <HAL_GPIO_Init+0x130>
          break;
 80040b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	2bff      	cmp	r3, #255	@ 0xff
 80040bc:	d801      	bhi.n	80040c2 <HAL_GPIO_Init+0x13a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	e001      	b.n	80040c6 <HAL_GPIO_Init+0x13e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3304      	adds	r3, #4
 80040c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	2bff      	cmp	r3, #255	@ 0xff
 80040cc:	d802      	bhi.n	80040d4 <HAL_GPIO_Init+0x14c>
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	e002      	b.n	80040da <HAL_GPIO_Init+0x152>
 80040d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d6:	3b08      	subs	r3, #8
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	210f      	movs	r1, #15
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	fa01 f303 	lsl.w	r3, r1, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	401a      	ands	r2, r3
 80040ec:	6a39      	ldr	r1, [r7, #32]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	fa01 f303 	lsl.w	r3, r1, r3
 80040f4:	431a      	orrs	r2, r3
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 80b1 	beq.w	800426a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004108:	4b4d      	ldr	r3, [pc, #308]	@ (8004240 <HAL_GPIO_Init+0x2b8>)
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	4a4c      	ldr	r2, [pc, #304]	@ (8004240 <HAL_GPIO_Init+0x2b8>)
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	6193      	str	r3, [r2, #24]
 8004114:	4b4a      	ldr	r3, [pc, #296]	@ (8004240 <HAL_GPIO_Init+0x2b8>)
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004120:	4a48      	ldr	r2, [pc, #288]	@ (8004244 <HAL_GPIO_Init+0x2bc>)
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	089b      	lsrs	r3, r3, #2
 8004126:	3302      	adds	r3, #2
 8004128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800412c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	220f      	movs	r2, #15
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	43db      	mvns	r3, r3
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4013      	ands	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a40      	ldr	r2, [pc, #256]	@ (8004248 <HAL_GPIO_Init+0x2c0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d013      	beq.n	8004174 <HAL_GPIO_Init+0x1ec>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a3f      	ldr	r2, [pc, #252]	@ (800424c <HAL_GPIO_Init+0x2c4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00d      	beq.n	8004170 <HAL_GPIO_Init+0x1e8>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a3e      	ldr	r2, [pc, #248]	@ (8004250 <HAL_GPIO_Init+0x2c8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d007      	beq.n	800416c <HAL_GPIO_Init+0x1e4>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a3d      	ldr	r2, [pc, #244]	@ (8004254 <HAL_GPIO_Init+0x2cc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d101      	bne.n	8004168 <HAL_GPIO_Init+0x1e0>
 8004164:	2303      	movs	r3, #3
 8004166:	e006      	b.n	8004176 <HAL_GPIO_Init+0x1ee>
 8004168:	2304      	movs	r3, #4
 800416a:	e004      	b.n	8004176 <HAL_GPIO_Init+0x1ee>
 800416c:	2302      	movs	r3, #2
 800416e:	e002      	b.n	8004176 <HAL_GPIO_Init+0x1ee>
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <HAL_GPIO_Init+0x1ee>
 8004174:	2300      	movs	r3, #0
 8004176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004178:	f002 0203 	and.w	r2, r2, #3
 800417c:	0092      	lsls	r2, r2, #2
 800417e:	4093      	lsls	r3, r2
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004186:	492f      	ldr	r1, [pc, #188]	@ (8004244 <HAL_GPIO_Init+0x2bc>)
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	089b      	lsrs	r3, r3, #2
 800418c:	3302      	adds	r3, #2
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d006      	beq.n	80041ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80041a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004258 <HAL_GPIO_Init+0x2d0>)
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	492c      	ldr	r1, [pc, #176]	@ (8004258 <HAL_GPIO_Init+0x2d0>)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	608b      	str	r3, [r1, #8]
 80041ac:	e006      	b.n	80041bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004258 <HAL_GPIO_Init+0x2d0>)
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	4928      	ldr	r1, [pc, #160]	@ (8004258 <HAL_GPIO_Init+0x2d0>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d006      	beq.n	80041d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041c8:	4b23      	ldr	r3, [pc, #140]	@ (8004258 <HAL_GPIO_Init+0x2d0>)
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	4922      	ldr	r1, [pc, #136]	@ (8004258 <HAL_GPIO_Init+0x2d0>)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60cb      	str	r3, [r1, #12]
 80041d4:	e006      	b.n	80041e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041d6:	4b20      	ldr	r3, [pc, #128]	@ (8004258 <HAL_GPIO_Init+0x2d0>)
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	43db      	mvns	r3, r3
 80041de:	491e      	ldr	r1, [pc, #120]	@ (8004258 <HAL_GPIO_Init+0x2d0>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d006      	beq.n	80041fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80041f0:	4b19      	ldr	r3, [pc, #100]	@ (8004258 <HAL_GPIO_Init+0x2d0>)
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	4918      	ldr	r1, [pc, #96]	@ (8004258 <HAL_GPIO_Init+0x2d0>)
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	604b      	str	r3, [r1, #4]
 80041fc:	e006      	b.n	800420c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80041fe:	4b16      	ldr	r3, [pc, #88]	@ (8004258 <HAL_GPIO_Init+0x2d0>)
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	43db      	mvns	r3, r3
 8004206:	4914      	ldr	r1, [pc, #80]	@ (8004258 <HAL_GPIO_Init+0x2d0>)
 8004208:	4013      	ands	r3, r2
 800420a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d021      	beq.n	800425c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004218:	4b0f      	ldr	r3, [pc, #60]	@ (8004258 <HAL_GPIO_Init+0x2d0>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	490e      	ldr	r1, [pc, #56]	@ (8004258 <HAL_GPIO_Init+0x2d0>)
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	4313      	orrs	r3, r2
 8004222:	600b      	str	r3, [r1, #0]
 8004224:	e021      	b.n	800426a <HAL_GPIO_Init+0x2e2>
 8004226:	bf00      	nop
 8004228:	10320000 	.word	0x10320000
 800422c:	10310000 	.word	0x10310000
 8004230:	10220000 	.word	0x10220000
 8004234:	10210000 	.word	0x10210000
 8004238:	10120000 	.word	0x10120000
 800423c:	10110000 	.word	0x10110000
 8004240:	40021000 	.word	0x40021000
 8004244:	40010000 	.word	0x40010000
 8004248:	40010800 	.word	0x40010800
 800424c:	40010c00 	.word	0x40010c00
 8004250:	40011000 	.word	0x40011000
 8004254:	40011400 	.word	0x40011400
 8004258:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800425c:	4b0b      	ldr	r3, [pc, #44]	@ (800428c <HAL_GPIO_Init+0x304>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	43db      	mvns	r3, r3
 8004264:	4909      	ldr	r1, [pc, #36]	@ (800428c <HAL_GPIO_Init+0x304>)
 8004266:	4013      	ands	r3, r2
 8004268:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426c:	3301      	adds	r3, #1
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	fa22 f303 	lsr.w	r3, r2, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	f47f ae8e 	bne.w	8003f9c <HAL_GPIO_Init+0x14>
  }
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	372c      	adds	r7, #44	@ 0x2c
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr
 800428c:	40010400 	.word	0x40010400

08004290 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	887b      	ldrh	r3, [r7, #2]
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
 80042ac:	e001      	b.n	80042b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042ae:	2300      	movs	r3, #0
 80042b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr

080042be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	460b      	mov	r3, r1
 80042c8:	807b      	strh	r3, [r7, #2]
 80042ca:	4613      	mov	r3, r2
 80042cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042ce:	787b      	ldrb	r3, [r7, #1]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042d4:	887a      	ldrh	r2, [r7, #2]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80042da:	e003      	b.n	80042e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042dc:	887b      	ldrh	r3, [r7, #2]
 80042de:	041a      	lsls	r2, r3, #16
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	611a      	str	r2, [r3, #16]
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr
	...

080042f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e272      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8087 	beq.w	800441e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004310:	4b92      	ldr	r3, [pc, #584]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	2b04      	cmp	r3, #4
 800431a:	d00c      	beq.n	8004336 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800431c:	4b8f      	ldr	r3, [pc, #572]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 030c 	and.w	r3, r3, #12
 8004324:	2b08      	cmp	r3, #8
 8004326:	d112      	bne.n	800434e <HAL_RCC_OscConfig+0x5e>
 8004328:	4b8c      	ldr	r3, [pc, #560]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004334:	d10b      	bne.n	800434e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004336:	4b89      	ldr	r3, [pc, #548]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d06c      	beq.n	800441c <HAL_RCC_OscConfig+0x12c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d168      	bne.n	800441c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e24c      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004356:	d106      	bne.n	8004366 <HAL_RCC_OscConfig+0x76>
 8004358:	4b80      	ldr	r3, [pc, #512]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a7f      	ldr	r2, [pc, #508]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 800435e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	e02e      	b.n	80043c4 <HAL_RCC_OscConfig+0xd4>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10c      	bne.n	8004388 <HAL_RCC_OscConfig+0x98>
 800436e:	4b7b      	ldr	r3, [pc, #492]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a7a      	ldr	r2, [pc, #488]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 8004374:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	4b78      	ldr	r3, [pc, #480]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a77      	ldr	r2, [pc, #476]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 8004380:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	e01d      	b.n	80043c4 <HAL_RCC_OscConfig+0xd4>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004390:	d10c      	bne.n	80043ac <HAL_RCC_OscConfig+0xbc>
 8004392:	4b72      	ldr	r3, [pc, #456]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a71      	ldr	r2, [pc, #452]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 8004398:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	4b6f      	ldr	r3, [pc, #444]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a6e      	ldr	r2, [pc, #440]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e00b      	b.n	80043c4 <HAL_RCC_OscConfig+0xd4>
 80043ac:	4b6b      	ldr	r3, [pc, #428]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a6a      	ldr	r2, [pc, #424]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 80043b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	4b68      	ldr	r3, [pc, #416]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a67      	ldr	r2, [pc, #412]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 80043be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d013      	beq.n	80043f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7ff fcca 	bl	8003d64 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d4:	f7ff fcc6 	bl	8003d64 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	@ 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e200      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	4b5d      	ldr	r3, [pc, #372]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0xe4>
 80043f2:	e014      	b.n	800441e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7ff fcb6 	bl	8003d64 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043fc:	f7ff fcb2 	bl	8003d64 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	@ 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e1ec      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440e:	4b53      	ldr	r3, [pc, #332]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x10c>
 800441a:	e000      	b.n	800441e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d063      	beq.n	80044f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800442a:	4b4c      	ldr	r3, [pc, #304]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004436:	4b49      	ldr	r3, [pc, #292]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b08      	cmp	r3, #8
 8004440:	d11c      	bne.n	800447c <HAL_RCC_OscConfig+0x18c>
 8004442:	4b46      	ldr	r3, [pc, #280]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d116      	bne.n	800447c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444e:	4b43      	ldr	r3, [pc, #268]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_RCC_OscConfig+0x176>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d001      	beq.n	8004466 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e1c0      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004466:	4b3d      	ldr	r3, [pc, #244]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4939      	ldr	r1, [pc, #228]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447a:	e03a      	b.n	80044f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d020      	beq.n	80044c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004484:	4b36      	ldr	r3, [pc, #216]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448a:	f7ff fc6b 	bl	8003d64 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004492:	f7ff fc67 	bl	8003d64 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e1a1      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a4:	4b2d      	ldr	r3, [pc, #180]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f0      	beq.n	8004492 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b0:	4b2a      	ldr	r3, [pc, #168]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4927      	ldr	r1, [pc, #156]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	600b      	str	r3, [r1, #0]
 80044c4:	e015      	b.n	80044f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044c6:	4b26      	ldr	r3, [pc, #152]	@ (8004560 <HAL_RCC_OscConfig+0x270>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044cc:	f7ff fc4a 	bl	8003d64 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d4:	f7ff fc46 	bl	8003d64 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e180      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e6:	4b1d      	ldr	r3, [pc, #116]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d03a      	beq.n	8004574 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d019      	beq.n	800453a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004506:	4b17      	ldr	r3, [pc, #92]	@ (8004564 <HAL_RCC_OscConfig+0x274>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450c:	f7ff fc2a 	bl	8003d64 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004514:	f7ff fc26 	bl	8003d64 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e160      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004526:	4b0d      	ldr	r3, [pc, #52]	@ (800455c <HAL_RCC_OscConfig+0x26c>)
 8004528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004532:	2001      	movs	r0, #1
 8004534:	f000 fa9c 	bl	8004a70 <RCC_Delay>
 8004538:	e01c      	b.n	8004574 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800453a:	4b0a      	ldr	r3, [pc, #40]	@ (8004564 <HAL_RCC_OscConfig+0x274>)
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004540:	f7ff fc10 	bl	8003d64 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004546:	e00f      	b.n	8004568 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004548:	f7ff fc0c 	bl	8003d64 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d908      	bls.n	8004568 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e146      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	42420000 	.word	0x42420000
 8004564:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004568:	4b92      	ldr	r3, [pc, #584]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e9      	bne.n	8004548 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80a6 	beq.w	80046ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004582:	2300      	movs	r3, #0
 8004584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004586:	4b8b      	ldr	r3, [pc, #556]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10d      	bne.n	80045ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004592:	4b88      	ldr	r3, [pc, #544]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	4a87      	ldr	r2, [pc, #540]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800459c:	61d3      	str	r3, [r2, #28]
 800459e:	4b85      	ldr	r3, [pc, #532]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045aa:	2301      	movs	r3, #1
 80045ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ae:	4b82      	ldr	r3, [pc, #520]	@ (80047b8 <HAL_RCC_OscConfig+0x4c8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d118      	bne.n	80045ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ba:	4b7f      	ldr	r3, [pc, #508]	@ (80047b8 <HAL_RCC_OscConfig+0x4c8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a7e      	ldr	r2, [pc, #504]	@ (80047b8 <HAL_RCC_OscConfig+0x4c8>)
 80045c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c6:	f7ff fbcd 	bl	8003d64 <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ce:	f7ff fbc9 	bl	8003d64 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b64      	cmp	r3, #100	@ 0x64
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e103      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e0:	4b75      	ldr	r3, [pc, #468]	@ (80047b8 <HAL_RCC_OscConfig+0x4c8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0f0      	beq.n	80045ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d106      	bne.n	8004602 <HAL_RCC_OscConfig+0x312>
 80045f4:	4b6f      	ldr	r3, [pc, #444]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	4a6e      	ldr	r2, [pc, #440]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	6213      	str	r3, [r2, #32]
 8004600:	e02d      	b.n	800465e <HAL_RCC_OscConfig+0x36e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10c      	bne.n	8004624 <HAL_RCC_OscConfig+0x334>
 800460a:	4b6a      	ldr	r3, [pc, #424]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	4a69      	ldr	r2, [pc, #420]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	6213      	str	r3, [r2, #32]
 8004616:	4b67      	ldr	r3, [pc, #412]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4a66      	ldr	r2, [pc, #408]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800461c:	f023 0304 	bic.w	r3, r3, #4
 8004620:	6213      	str	r3, [r2, #32]
 8004622:	e01c      	b.n	800465e <HAL_RCC_OscConfig+0x36e>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	2b05      	cmp	r3, #5
 800462a:	d10c      	bne.n	8004646 <HAL_RCC_OscConfig+0x356>
 800462c:	4b61      	ldr	r3, [pc, #388]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	4a60      	ldr	r2, [pc, #384]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004632:	f043 0304 	orr.w	r3, r3, #4
 8004636:	6213      	str	r3, [r2, #32]
 8004638:	4b5e      	ldr	r3, [pc, #376]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	4a5d      	ldr	r2, [pc, #372]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	6213      	str	r3, [r2, #32]
 8004644:	e00b      	b.n	800465e <HAL_RCC_OscConfig+0x36e>
 8004646:	4b5b      	ldr	r3, [pc, #364]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	4a5a      	ldr	r2, [pc, #360]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800464c:	f023 0301 	bic.w	r3, r3, #1
 8004650:	6213      	str	r3, [r2, #32]
 8004652:	4b58      	ldr	r3, [pc, #352]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	4a57      	ldr	r2, [pc, #348]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004658:	f023 0304 	bic.w	r3, r3, #4
 800465c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d015      	beq.n	8004692 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004666:	f7ff fb7d 	bl	8003d64 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466c:	e00a      	b.n	8004684 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466e:	f7ff fb79 	bl	8003d64 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467c:	4293      	cmp	r3, r2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e0b1      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004684:	4b4b      	ldr	r3, [pc, #300]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0ee      	beq.n	800466e <HAL_RCC_OscConfig+0x37e>
 8004690:	e014      	b.n	80046bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004692:	f7ff fb67 	bl	8003d64 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004698:	e00a      	b.n	80046b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469a:	f7ff fb63 	bl	8003d64 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e09b      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b0:	4b40      	ldr	r3, [pc, #256]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1ee      	bne.n	800469a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d105      	bne.n	80046ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c2:	4b3c      	ldr	r3, [pc, #240]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	4a3b      	ldr	r2, [pc, #236]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 80046c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8087 	beq.w	80047e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046d8:	4b36      	ldr	r3, [pc, #216]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d061      	beq.n	80047a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d146      	bne.n	800477a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ec:	4b33      	ldr	r3, [pc, #204]	@ (80047bc <HAL_RCC_OscConfig+0x4cc>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f2:	f7ff fb37 	bl	8003d64 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fa:	f7ff fb33 	bl	8003d64 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e06d      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800470c:	4b29      	ldr	r3, [pc, #164]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1f0      	bne.n	80046fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004720:	d108      	bne.n	8004734 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004722:	4b24      	ldr	r3, [pc, #144]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	4921      	ldr	r1, [pc, #132]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004734:	4b1f      	ldr	r3, [pc, #124]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a19      	ldr	r1, [r3, #32]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	430b      	orrs	r3, r1
 8004746:	491b      	ldr	r1, [pc, #108]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 8004748:	4313      	orrs	r3, r2
 800474a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800474c:	4b1b      	ldr	r3, [pc, #108]	@ (80047bc <HAL_RCC_OscConfig+0x4cc>)
 800474e:	2201      	movs	r2, #1
 8004750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004752:	f7ff fb07 	bl	8003d64 <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800475a:	f7ff fb03 	bl	8003d64 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e03d      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800476c:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0f0      	beq.n	800475a <HAL_RCC_OscConfig+0x46a>
 8004778:	e035      	b.n	80047e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477a:	4b10      	ldr	r3, [pc, #64]	@ (80047bc <HAL_RCC_OscConfig+0x4cc>)
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004780:	f7ff faf0 	bl	8003d64 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004788:	f7ff faec 	bl	8003d64 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e026      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800479a:	4b06      	ldr	r3, [pc, #24]	@ (80047b4 <HAL_RCC_OscConfig+0x4c4>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0x498>
 80047a6:	e01e      	b.n	80047e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d107      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e019      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
 80047b4:	40021000 	.word	0x40021000
 80047b8:	40007000 	.word	0x40007000
 80047bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047c0:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <HAL_RCC_OscConfig+0x500>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d106      	bne.n	80047e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	429a      	cmp	r2, r3
 80047e0:	d001      	beq.n	80047e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40021000 	.word	0x40021000

080047f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0d0      	b.n	80049aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004808:	4b6a      	ldr	r3, [pc, #424]	@ (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d910      	bls.n	8004838 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004816:	4b67      	ldr	r3, [pc, #412]	@ (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f023 0207 	bic.w	r2, r3, #7
 800481e:	4965      	ldr	r1, [pc, #404]	@ (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	4313      	orrs	r3, r2
 8004824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004826:	4b63      	ldr	r3, [pc, #396]	@ (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0b8      	b.n	80049aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d020      	beq.n	8004886 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004850:	4b59      	ldr	r3, [pc, #356]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	4a58      	ldr	r2, [pc, #352]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004856:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800485a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004868:	4b53      	ldr	r3, [pc, #332]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	4a52      	ldr	r2, [pc, #328]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 800486e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004872:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004874:	4b50      	ldr	r3, [pc, #320]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	494d      	ldr	r1, [pc, #308]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	4313      	orrs	r3, r2
 8004884:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d040      	beq.n	8004914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d107      	bne.n	80048aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489a:	4b47      	ldr	r3, [pc, #284]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d115      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e07f      	b.n	80049aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d107      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b2:	4b41      	ldr	r3, [pc, #260]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e073      	b.n	80049aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c2:	4b3d      	ldr	r3, [pc, #244]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e06b      	b.n	80049aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048d2:	4b39      	ldr	r3, [pc, #228]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f023 0203 	bic.w	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	4936      	ldr	r1, [pc, #216]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048e4:	f7ff fa3e 	bl	8003d64 <HAL_GetTick>
 80048e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ec:	f7ff fa3a 	bl	8003d64 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e053      	b.n	80049aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004902:	4b2d      	ldr	r3, [pc, #180]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f003 020c 	and.w	r2, r3, #12
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	429a      	cmp	r2, r3
 8004912:	d1eb      	bne.n	80048ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004914:	4b27      	ldr	r3, [pc, #156]	@ (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d210      	bcs.n	8004944 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004922:	4b24      	ldr	r3, [pc, #144]	@ (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 0207 	bic.w	r2, r3, #7
 800492a:	4922      	ldr	r1, [pc, #136]	@ (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	4313      	orrs	r3, r2
 8004930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	4b20      	ldr	r3, [pc, #128]	@ (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e032      	b.n	80049aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004950:	4b19      	ldr	r3, [pc, #100]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4916      	ldr	r1, [pc, #88]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 800495e:	4313      	orrs	r3, r2
 8004960:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800496e:	4b12      	ldr	r3, [pc, #72]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	490e      	ldr	r1, [pc, #56]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 800497e:	4313      	orrs	r3, r2
 8004980:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004982:	f000 f821 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 8004986:	4602      	mov	r2, r0
 8004988:	4b0b      	ldr	r3, [pc, #44]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	091b      	lsrs	r3, r3, #4
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	490a      	ldr	r1, [pc, #40]	@ (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 8004994:	5ccb      	ldrb	r3, [r1, r3]
 8004996:	fa22 f303 	lsr.w	r3, r2, r3
 800499a:	4a09      	ldr	r2, [pc, #36]	@ (80049c0 <HAL_RCC_ClockConfig+0x1cc>)
 800499c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800499e:	4b09      	ldr	r3, [pc, #36]	@ (80049c4 <HAL_RCC_ClockConfig+0x1d0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff f99c 	bl	8003ce0 <HAL_InitTick>

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40022000 	.word	0x40022000
 80049b8:	40021000 	.word	0x40021000
 80049bc:	080057cc 	.word	0x080057cc
 80049c0:	20000000 	.word	0x20000000
 80049c4:	20000004 	.word	0x20000004

080049c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	2300      	movs	r3, #0
 80049d4:	60bb      	str	r3, [r7, #8]
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	2300      	movs	r3, #0
 80049dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049e2:	4b1e      	ldr	r3, [pc, #120]	@ (8004a5c <HAL_RCC_GetSysClockFreq+0x94>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f003 030c 	and.w	r3, r3, #12
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d002      	beq.n	80049f8 <HAL_RCC_GetSysClockFreq+0x30>
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d003      	beq.n	80049fe <HAL_RCC_GetSysClockFreq+0x36>
 80049f6:	e027      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049f8:	4b19      	ldr	r3, [pc, #100]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x98>)
 80049fa:	613b      	str	r3, [r7, #16]
      break;
 80049fc:	e027      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	0c9b      	lsrs	r3, r3, #18
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	4a17      	ldr	r2, [pc, #92]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a08:	5cd3      	ldrb	r3, [r2, r3]
 8004a0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d010      	beq.n	8004a38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a16:	4b11      	ldr	r3, [pc, #68]	@ (8004a5c <HAL_RCC_GetSysClockFreq+0x94>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	0c5b      	lsrs	r3, r3, #17
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	4a11      	ldr	r2, [pc, #68]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a22:	5cd3      	ldrb	r3, [r2, r3]
 8004a24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a0d      	ldr	r2, [pc, #52]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a2a:	fb03 f202 	mul.w	r2, r3, r2
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	e004      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a3c:	fb02 f303 	mul.w	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	613b      	str	r3, [r7, #16]
      break;
 8004a46:	e002      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a48:	4b05      	ldr	r3, [pc, #20]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a4a:	613b      	str	r3, [r7, #16]
      break;
 8004a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a4e:	693b      	ldr	r3, [r7, #16]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	007a1200 	.word	0x007a1200
 8004a64:	080057dc 	.word	0x080057dc
 8004a68:	080057ec 	.word	0x080057ec
 8004a6c:	003d0900 	.word	0x003d0900

08004a70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a78:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa4 <RCC_Delay+0x34>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8004aa8 <RCC_Delay+0x38>)
 8004a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a82:	0a5b      	lsrs	r3, r3, #9
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	fb02 f303 	mul.w	r3, r2, r3
 8004a8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a8c:	bf00      	nop
  }
  while (Delay --);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1e5a      	subs	r2, r3, #1
 8004a92:	60fa      	str	r2, [r7, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1f9      	bne.n	8004a8c <RCC_Delay+0x1c>
}
 8004a98:	bf00      	nop
 8004a9a:	bf00      	nop
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr
 8004aa4:	20000000 	.word	0x20000000
 8004aa8:	10624dd3 	.word	0x10624dd3

08004aac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e076      	b.n	8004bac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d108      	bne.n	8004ad8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ace:	d009      	beq.n	8004ae4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	61da      	str	r2, [r3, #28]
 8004ad6:	e005      	b.n	8004ae4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff f816 	bl	8003b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b68:	ea42 0103 	orr.w	r1, r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b70:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	0c1a      	lsrs	r2, r3, #16
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f002 0204 	and.w	r2, r2, #4
 8004b8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69da      	ldr	r2, [r3, #28]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bc4:	f7ff f8ce 	bl	8003d64 <HAL_GetTick>
 8004bc8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d001      	beq.n	8004bde <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e12a      	b.n	8004e34 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_SPI_Transmit+0x36>
 8004be4:	88fb      	ldrh	r3, [r7, #6]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e122      	b.n	8004e34 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_SPI_Transmit+0x48>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e11b      	b.n	8004e34 <HAL_SPI_Transmit+0x280>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2203      	movs	r2, #3
 8004c08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	88fa      	ldrh	r2, [r7, #6]
 8004c1c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	88fa      	ldrh	r2, [r7, #6]
 8004c22:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c4a:	d10f      	bne.n	8004c6c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c76:	2b40      	cmp	r3, #64	@ 0x40
 8004c78:	d007      	beq.n	8004c8a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c92:	d152      	bne.n	8004d3a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_SPI_Transmit+0xee>
 8004c9c:	8b7b      	ldrh	r3, [r7, #26]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d145      	bne.n	8004d2e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca6:	881a      	ldrh	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb2:	1c9a      	adds	r2, r3, #2
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cc6:	e032      	b.n	8004d2e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d112      	bne.n	8004cfc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cda:	881a      	ldrh	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce6:	1c9a      	adds	r2, r3, #2
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004cfa:	e018      	b.n	8004d2e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cfc:	f7ff f832 	bl	8003d64 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d803      	bhi.n	8004d14 <HAL_SPI_Transmit+0x160>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d12:	d102      	bne.n	8004d1a <HAL_SPI_Transmit+0x166>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e082      	b.n	8004e34 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1c7      	bne.n	8004cc8 <HAL_SPI_Transmit+0x114>
 8004d38:	e053      	b.n	8004de2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_SPI_Transmit+0x194>
 8004d42:	8b7b      	ldrh	r3, [r7, #26]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d147      	bne.n	8004dd8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	330c      	adds	r3, #12
 8004d52:	7812      	ldrb	r2, [r2, #0]
 8004d54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d6e:	e033      	b.n	8004dd8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d113      	bne.n	8004da6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	330c      	adds	r3, #12
 8004d88:	7812      	ldrb	r2, [r2, #0]
 8004d8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004da4:	e018      	b.n	8004dd8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004da6:	f7fe ffdd 	bl	8003d64 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d803      	bhi.n	8004dbe <HAL_SPI_Transmit+0x20a>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d102      	bne.n	8004dc4 <HAL_SPI_Transmit+0x210>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d109      	bne.n	8004dd8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e02d      	b.n	8004e34 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1c6      	bne.n	8004d70 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004de2:	69fa      	ldr	r2, [r7, #28]
 8004de4:	6839      	ldr	r1, [r7, #0]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f8b0 	bl	8004f4c <SPI_EndRxTxTransaction>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2220      	movs	r2, #32
 8004df6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10a      	bne.n	8004e16 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004e32:	2300      	movs	r3, #0
  }
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3720      	adds	r7, #32
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e4c:	f7fe ff8a 	bl	8003d64 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e54:	1a9b      	subs	r3, r3, r2
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	4413      	add	r3, r2
 8004e5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e5c:	f7fe ff82 	bl	8003d64 <HAL_GetTick>
 8004e60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e62:	4b39      	ldr	r3, [pc, #228]	@ (8004f48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	015b      	lsls	r3, r3, #5
 8004e68:	0d1b      	lsrs	r3, r3, #20
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	fb02 f303 	mul.w	r3, r2, r3
 8004e70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e72:	e054      	b.n	8004f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7a:	d050      	beq.n	8004f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e7c:	f7fe ff72 	bl	8003d64 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d902      	bls.n	8004e92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d13d      	bne.n	8004f0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ea0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eaa:	d111      	bne.n	8004ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eb4:	d004      	beq.n	8004ec0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ebe:	d107      	bne.n	8004ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ece:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed8:	d10f      	bne.n	8004efa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ef8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e017      	b.n	8004f3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4013      	ands	r3, r2
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	bf0c      	ite	eq
 8004f2e:	2301      	moveq	r3, #1
 8004f30:	2300      	movne	r3, #0
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	461a      	mov	r2, r3
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d19b      	bne.n	8004e74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3720      	adds	r7, #32
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000000 	.word	0x20000000

08004f4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	2102      	movs	r1, #2
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f7ff ff6a 	bl	8004e3c <SPI_WaitFlagStateUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d007      	beq.n	8004f7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f72:	f043 0220 	orr.w	r2, r3, #32
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e013      	b.n	8004fa6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2200      	movs	r2, #0
 8004f86:	2180      	movs	r1, #128	@ 0x80
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f7ff ff57 	bl	8004e3c <SPI_WaitFlagStateUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d007      	beq.n	8004fa4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f98:	f043 0220 	orr.w	r2, r3, #32
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e000      	b.n	8004fa6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <memset>:
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4402      	add	r2, r0
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d100      	bne.n	8004fb8 <memset+0xa>
 8004fb6:	4770      	bx	lr
 8004fb8:	f803 1b01 	strb.w	r1, [r3], #1
 8004fbc:	e7f9      	b.n	8004fb2 <memset+0x4>
	...

08004fc0 <__libc_init_array>:
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	2600      	movs	r6, #0
 8004fc4:	4d0c      	ldr	r5, [pc, #48]	@ (8004ff8 <__libc_init_array+0x38>)
 8004fc6:	4c0d      	ldr	r4, [pc, #52]	@ (8004ffc <__libc_init_array+0x3c>)
 8004fc8:	1b64      	subs	r4, r4, r5
 8004fca:	10a4      	asrs	r4, r4, #2
 8004fcc:	42a6      	cmp	r6, r4
 8004fce:	d109      	bne.n	8004fe4 <__libc_init_array+0x24>
 8004fd0:	f000 f81a 	bl	8005008 <_init>
 8004fd4:	2600      	movs	r6, #0
 8004fd6:	4d0a      	ldr	r5, [pc, #40]	@ (8005000 <__libc_init_array+0x40>)
 8004fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8005004 <__libc_init_array+0x44>)
 8004fda:	1b64      	subs	r4, r4, r5
 8004fdc:	10a4      	asrs	r4, r4, #2
 8004fde:	42a6      	cmp	r6, r4
 8004fe0:	d105      	bne.n	8004fee <__libc_init_array+0x2e>
 8004fe2:	bd70      	pop	{r4, r5, r6, pc}
 8004fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe8:	4798      	blx	r3
 8004fea:	3601      	adds	r6, #1
 8004fec:	e7ee      	b.n	8004fcc <__libc_init_array+0xc>
 8004fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff2:	4798      	blx	r3
 8004ff4:	3601      	adds	r6, #1
 8004ff6:	e7f2      	b.n	8004fde <__libc_init_array+0x1e>
 8004ff8:	080057f0 	.word	0x080057f0
 8004ffc:	080057f0 	.word	0x080057f0
 8005000:	080057f0 	.word	0x080057f0
 8005004:	080057f8 	.word	0x080057f8

08005008 <_init>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	bf00      	nop
 800500c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500e:	bc08      	pop	{r3}
 8005010:	469e      	mov	lr, r3
 8005012:	4770      	bx	lr

08005014 <_fini>:
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005016:	bf00      	nop
 8005018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501a:	bc08      	pop	{r3}
 800501c:	469e      	mov	lr, r3
 800501e:	4770      	bx	lr
