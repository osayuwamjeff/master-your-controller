
rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004050  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800415c  0800415c  0000515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d8  080046d8  00006064  2**0
                  CONTENTS
  4 .ARM          00000000  080046d8  080046d8  00006064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046d8  080046d8  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d8  080046d8  000056d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046dc  080046dc  000056dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080046e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  20000064  08004744  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  08004744  00006640  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085cf  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca7  00000000  00000000  0000e65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  00010308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017f35  00000000  00000000  00010c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000cca5  00000000  00000000  00028b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00084d57  00000000  00000000  0003583a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000086  00000000  00000000  000ba591  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000070b  00000000  00000000  000ba617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029dc  00000000  00000000  000bad24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000bd700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08004144 	.word	0x08004144

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08004144 	.word	0x08004144

0800014c <main>:
static void MX_I2C1_Init(void);
static void MX_RTC_Init(void);


int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
  HAL_Init();
 8000152:	f001 f849 	bl	80011e8 <HAL_Init>

  SystemClock_Config();
 8000156:	f000 fa41 	bl	80005dc <SystemClock_Config>

  MX_GPIO_Init();
 800015a:	f000 fb25 	bl	80007a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 fa91 	bl	8000684 <MX_I2C1_Init>
  MX_RTC_Init();
 8000162:	f000 fabd 	bl	80006e0 <MX_RTC_Init>
  SSD1306_Init();
 8000166:	f000 fb63 	bl	8000830 <SSD1306_Init>

  RTC_TimeTypeDef sTime = {0};
 800016a:	f107 0308 	add.w	r3, r7, #8
 800016e:	2100      	movs	r1, #0
 8000170:	460a      	mov	r2, r1
 8000172:	801a      	strh	r2, [r3, #0]
 8000174:	460a      	mov	r2, r1
 8000176:	709a      	strb	r2, [r3, #2]
  char oldTimeStr[3];
  char newTimeStr[3];
  uint8_t prevMin = 0, prevHour = 0, minFrame = 0,hourFrame = 0;
 8000178:	2300      	movs	r3, #0
 800017a:	73fb      	strb	r3, [r7, #15]
 800017c:	2300      	movs	r3, #0
 800017e:	73bb      	strb	r3, [r7, #14]
 8000180:	2300      	movs	r3, #0
 8000182:	737b      	strb	r3, [r7, #13]
 8000184:	2300      	movs	r3, #0
 8000186:	733b      	strb	r3, [r7, #12]
  SSD1306_DrawFilledRectangle(1, 2, 60, 60, SSD1306_COLOR_BLUE);
 8000188:	2301      	movs	r3, #1
 800018a:	9300      	str	r3, [sp, #0]
 800018c:	233c      	movs	r3, #60	@ 0x3c
 800018e:	223c      	movs	r2, #60	@ 0x3c
 8000190:	2102      	movs	r1, #2
 8000192:	2001      	movs	r0, #1
 8000194:	f000 feb7 	bl	8000f06 <SSD1306_DrawFilledRectangle>
  SSD1306_DrawFilledRectangle(67, 2, 60, 60, SSD1306_COLOR_BLUE);
 8000198:	2301      	movs	r3, #1
 800019a:	9300      	str	r3, [sp, #0]
 800019c:	233c      	movs	r3, #60	@ 0x3c
 800019e:	223c      	movs	r2, #60	@ 0x3c
 80001a0:	2102      	movs	r1, #2
 80001a2:	2043      	movs	r0, #67	@ 0x43
 80001a4:	f000 feaf 	bl	8000f06 <SSD1306_DrawFilledRectangle>


  while (1)
  {
	  //Obtain time from RTC
	  HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BCD);
 80001a8:	f107 0308 	add.w	r3, r7, #8
 80001ac:	2201      	movs	r2, #1
 80001ae:	4619      	mov	r1, r3
 80001b0:	48a3      	ldr	r0, [pc, #652]	@ (8000440 <main+0x2f4>)
 80001b2:	f002 fe4f 	bl	8002e54 <HAL_RTC_GetTime>


	  //check if current time is equal to previous time

	  //For minute
	  if(sTime.Minutes != prevMin)
 80001b6:	7a7b      	ldrb	r3, [r7, #9]
 80001b8:	7bfa      	ldrb	r2, [r7, #15]
 80001ba:	429a      	cmp	r2, r3
 80001bc:	f000 80f6 	beq.w	80003ac <main+0x260>
	  {
		  //flip animation
		  if(minFrame == FRAME_0){ //frame 0
 80001c0:	7b7b      	ldrb	r3, [r7, #13]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d141      	bne.n	800024a <main+0xfe>
		  	  //draw top half of new item
			  sprintf(newTimeStr,"%02X",sTime.Minutes);
 80001c6:	7a7b      	ldrb	r3, [r7, #9]
 80001c8:	461a      	mov	r2, r3
 80001ca:	463b      	mov	r3, r7
 80001cc:	499d      	ldr	r1, [pc, #628]	@ (8000444 <main+0x2f8>)
 80001ce:	4618      	mov	r0, r3
 80001d0:	f003 fb08 	bl	80037e4 <siprintf>
			  SSD1306_GotoXY(68,14);
 80001d4:	210e      	movs	r1, #14
 80001d6:	2044      	movs	r0, #68	@ 0x44
 80001d8:	f000 fd58 	bl	8000c8c <SSD1306_GotoXY>
			  SSD1306_customPuts(newTimeStr, &Font_24x32, SCALED_BY_ONE, PRINT_TOP_HALF, SSD1306_COLOR_BLACK);
 80001dc:	4638      	mov	r0, r7
 80001de:	2300      	movs	r3, #0
 80001e0:	9300      	str	r3, [sp, #0]
 80001e2:	2301      	movs	r3, #1
 80001e4:	2201      	movs	r2, #1
 80001e6:	4998      	ldr	r1, [pc, #608]	@ (8000448 <main+0x2fc>)
 80001e8:	f000 fd0c 	bl	8000c04 <SSD1306_customPuts>

		  	  //draw bottom half of old item
			  sprintf(oldTimeStr,"%02X",prevMin);
 80001ec:	7bfa      	ldrb	r2, [r7, #15]
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	4994      	ldr	r1, [pc, #592]	@ (8000444 <main+0x2f8>)
 80001f2:	4618      	mov	r0, r3
 80001f4:	f003 faf6 	bl	80037e4 <siprintf>
			  SSD1306_GotoXY(68,14);
 80001f8:	210e      	movs	r1, #14
 80001fa:	2044      	movs	r0, #68	@ 0x44
 80001fc:	f000 fd46 	bl	8000c8c <SSD1306_GotoXY>
			  SSD1306_customPuts(oldTimeStr, &Font_24x32, SCALED_BY_ONE, PRINT_BOTTOM_HALF, SSD1306_COLOR_BLACK);
 8000200:	1d38      	adds	r0, r7, #4
 8000202:	2300      	movs	r3, #0
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2302      	movs	r3, #2
 8000208:	2201      	movs	r2, #1
 800020a:	498f      	ldr	r1, [pc, #572]	@ (8000448 <main+0x2fc>)
 800020c:	f000 fcfa 	bl	8000c04 <SSD1306_customPuts>

		  	  // draw top 1/2 scaled half of old time
			  SSD1306_GotoXY(68,14 + Font_24x32.FontHeight/(2*SCALED_BY_TWO));
 8000210:	4b8d      	ldr	r3, [pc, #564]	@ (8000448 <main+0x2fc>)
 8000212:	785b      	ldrb	r3, [r3, #1]
 8000214:	089b      	lsrs	r3, r3, #2
 8000216:	b2db      	uxtb	r3, r3
 8000218:	330e      	adds	r3, #14
 800021a:	b29b      	uxth	r3, r3
 800021c:	4619      	mov	r1, r3
 800021e:	2044      	movs	r0, #68	@ 0x44
 8000220:	f000 fd34 	bl	8000c8c <SSD1306_GotoXY>
			  SSD1306_customPuts(oldTimeStr, &Font_24x32, SCALED_BY_TWO, PRINT_TOP_HALF, SSD1306_COLOR_BLACK);
 8000224:	1d38      	adds	r0, r7, #4
 8000226:	2300      	movs	r3, #0
 8000228:	9300      	str	r3, [sp, #0]
 800022a:	2301      	movs	r3, #1
 800022c:	2202      	movs	r2, #2
 800022e:	4986      	ldr	r1, [pc, #536]	@ (8000448 <main+0x2fc>)
 8000230:	f000 fce8 	bl	8000c04 <SSD1306_customPuts>

			  //increment minFrame
			  minFrame = (minFrame + 1)%4;
 8000234:	7b7b      	ldrb	r3, [r7, #13]
 8000236:	3301      	adds	r3, #1
 8000238:	425a      	negs	r2, r3
 800023a:	f003 0303 	and.w	r3, r3, #3
 800023e:	f002 0203 	and.w	r2, r2, #3
 8000242:	bf58      	it	pl
 8000244:	4253      	negpl	r3, r2
 8000246:	737b      	strb	r3, [r7, #13]
 8000248:	e0b0      	b.n	80003ac <main+0x260>

		  }
		  else if (minFrame == FRAME_1){ //frame 1
 800024a:	7b7b      	ldrb	r3, [r7, #13]
 800024c:	2b01      	cmp	r3, #1
 800024e:	d146      	bne.n	80002de <main+0x192>
	  	  	  //draw top half of new item
			  sprintf(newTimeStr,"%02X",sTime.Minutes);
 8000250:	7a7b      	ldrb	r3, [r7, #9]
 8000252:	461a      	mov	r2, r3
 8000254:	463b      	mov	r3, r7
 8000256:	497b      	ldr	r1, [pc, #492]	@ (8000444 <main+0x2f8>)
 8000258:	4618      	mov	r0, r3
 800025a:	f003 fac3 	bl	80037e4 <siprintf>
			  SSD1306_GotoXY(68,14);
 800025e:	210e      	movs	r1, #14
 8000260:	2044      	movs	r0, #68	@ 0x44
 8000262:	f000 fd13 	bl	8000c8c <SSD1306_GotoXY>
			  SSD1306_customPuts(newTimeStr, &Font_24x32, SCALED_BY_ONE, PRINT_TOP_HALF, SSD1306_COLOR_BLACK);
 8000266:	4638      	mov	r0, r7
 8000268:	2300      	movs	r3, #0
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2301      	movs	r3, #1
 800026e:	2201      	movs	r2, #1
 8000270:	4975      	ldr	r1, [pc, #468]	@ (8000448 <main+0x2fc>)
 8000272:	f000 fcc7 	bl	8000c04 <SSD1306_customPuts>

	  	  	  //draw bottom half of old item
			  sprintf(oldTimeStr,"%02X",prevMin);
 8000276:	7bfa      	ldrb	r2, [r7, #15]
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	4972      	ldr	r1, [pc, #456]	@ (8000444 <main+0x2f8>)
 800027c:	4618      	mov	r0, r3
 800027e:	f003 fab1 	bl	80037e4 <siprintf>
			  SSD1306_GotoXY(68,14);
 8000282:	210e      	movs	r1, #14
 8000284:	2044      	movs	r0, #68	@ 0x44
 8000286:	f000 fd01 	bl	8000c8c <SSD1306_GotoXY>
			  SSD1306_customPuts(oldTimeStr, &Font_24x32, SCALED_BY_ONE, PRINT_BOTTOM_HALF, SSD1306_COLOR_BLACK);
 800028a:	1d38      	adds	r0, r7, #4
 800028c:	2300      	movs	r3, #0
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	2302      	movs	r3, #2
 8000292:	2201      	movs	r2, #1
 8000294:	496c      	ldr	r1, [pc, #432]	@ (8000448 <main+0x2fc>)
 8000296:	f000 fcb5 	bl	8000c04 <SSD1306_customPuts>

	  	  	  // draw top 1/3 scaled half of old time
			  SSD1306_GotoXY(68,14 + 2*(Font_24x32.FontHeight/(2*SCALED_BY_THREE)));
 800029a:	4b6b      	ldr	r3, [pc, #428]	@ (8000448 <main+0x2fc>)
 800029c:	785b      	ldrb	r3, [r3, #1]
 800029e:	4a6b      	ldr	r2, [pc, #428]	@ (800044c <main+0x300>)
 80002a0:	fba2 2303 	umull	r2, r3, r2, r3
 80002a4:	089b      	lsrs	r3, r3, #2
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	3307      	adds	r3, #7
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	005b      	lsls	r3, r3, #1
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	4619      	mov	r1, r3
 80002b2:	2044      	movs	r0, #68	@ 0x44
 80002b4:	f000 fcea 	bl	8000c8c <SSD1306_GotoXY>
			  SSD1306_customPuts(oldTimeStr, &Font_24x32, SCALED_BY_THREE, PRINT_TOP_HALF, SSD1306_COLOR_BLACK);
 80002b8:	1d38      	adds	r0, r7, #4
 80002ba:	2300      	movs	r3, #0
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	2301      	movs	r3, #1
 80002c0:	2203      	movs	r2, #3
 80002c2:	4961      	ldr	r1, [pc, #388]	@ (8000448 <main+0x2fc>)
 80002c4:	f000 fc9e 	bl	8000c04 <SSD1306_customPuts>

			  //increment minFrame
			  minFrame = (minFrame + 1)%4;
 80002c8:	7b7b      	ldrb	r3, [r7, #13]
 80002ca:	3301      	adds	r3, #1
 80002cc:	425a      	negs	r2, r3
 80002ce:	f003 0303 	and.w	r3, r3, #3
 80002d2:	f002 0203 	and.w	r2, r2, #3
 80002d6:	bf58      	it	pl
 80002d8:	4253      	negpl	r3, r2
 80002da:	737b      	strb	r3, [r7, #13]
 80002dc:	e066      	b.n	80003ac <main+0x260>

		  }
		  else if(minFrame == FRAME_2){ // frame 2
 80002de:	7b7b      	ldrb	r3, [r7, #13]
 80002e0:	2b02      	cmp	r3, #2
 80002e2:	d141      	bne.n	8000368 <main+0x21c>
	  	  	  //draw top half of new item
			  sprintf(newTimeStr,"%02X",sTime.Minutes);
 80002e4:	7a7b      	ldrb	r3, [r7, #9]
 80002e6:	461a      	mov	r2, r3
 80002e8:	463b      	mov	r3, r7
 80002ea:	4956      	ldr	r1, [pc, #344]	@ (8000444 <main+0x2f8>)
 80002ec:	4618      	mov	r0, r3
 80002ee:	f003 fa79 	bl	80037e4 <siprintf>
			  SSD1306_GotoXY(68,14);
 80002f2:	210e      	movs	r1, #14
 80002f4:	2044      	movs	r0, #68	@ 0x44
 80002f6:	f000 fcc9 	bl	8000c8c <SSD1306_GotoXY>
			  SSD1306_customPuts(newTimeStr, &Font_24x32, SCALED_BY_ONE, PRINT_TOP_HALF, SSD1306_COLOR_BLACK);
 80002fa:	4638      	mov	r0, r7
 80002fc:	2300      	movs	r3, #0
 80002fe:	9300      	str	r3, [sp, #0]
 8000300:	2301      	movs	r3, #1
 8000302:	2201      	movs	r2, #1
 8000304:	4950      	ldr	r1, [pc, #320]	@ (8000448 <main+0x2fc>)
 8000306:	f000 fc7d 	bl	8000c04 <SSD1306_customPuts>

	  	  	  //draw bottom half of old item
			  sprintf(oldTimeStr,"%02X",prevMin);
 800030a:	7bfa      	ldrb	r2, [r7, #15]
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	494d      	ldr	r1, [pc, #308]	@ (8000444 <main+0x2f8>)
 8000310:	4618      	mov	r0, r3
 8000312:	f003 fa67 	bl	80037e4 <siprintf>
			  SSD1306_GotoXY(68,14);
 8000316:	210e      	movs	r1, #14
 8000318:	2044      	movs	r0, #68	@ 0x44
 800031a:	f000 fcb7 	bl	8000c8c <SSD1306_GotoXY>
			  SSD1306_customPuts(oldTimeStr, &Font_24x32, SCALED_BY_ONE, PRINT_BOTTOM_HALF, SSD1306_COLOR_BLACK);
 800031e:	1d38      	adds	r0, r7, #4
 8000320:	2300      	movs	r3, #0
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	2302      	movs	r3, #2
 8000326:	2201      	movs	r2, #1
 8000328:	4947      	ldr	r1, [pc, #284]	@ (8000448 <main+0x2fc>)
 800032a:	f000 fc6b 	bl	8000c04 <SSD1306_customPuts>

	  	  	  // draw bottom 1/2 scaled half of new time
			  SSD1306_GotoXY(68,14 + Font_24x32.FontHeight/(2*SCALED_BY_TWO));
 800032e:	4b46      	ldr	r3, [pc, #280]	@ (8000448 <main+0x2fc>)
 8000330:	785b      	ldrb	r3, [r3, #1]
 8000332:	089b      	lsrs	r3, r3, #2
 8000334:	b2db      	uxtb	r3, r3
 8000336:	330e      	adds	r3, #14
 8000338:	b29b      	uxth	r3, r3
 800033a:	4619      	mov	r1, r3
 800033c:	2044      	movs	r0, #68	@ 0x44
 800033e:	f000 fca5 	bl	8000c8c <SSD1306_GotoXY>
			  SSD1306_customPuts(newTimeStr, &Font_24x32, SCALED_BY_TWO, PRINT_BOTTOM_HALF, SSD1306_COLOR_BLACK);
 8000342:	4638      	mov	r0, r7
 8000344:	2300      	movs	r3, #0
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	2302      	movs	r3, #2
 800034a:	2202      	movs	r2, #2
 800034c:	493e      	ldr	r1, [pc, #248]	@ (8000448 <main+0x2fc>)
 800034e:	f000 fc59 	bl	8000c04 <SSD1306_customPuts>

			  //increment minFrame
			  minFrame = (minFrame + 1)%4;
 8000352:	7b7b      	ldrb	r3, [r7, #13]
 8000354:	3301      	adds	r3, #1
 8000356:	425a      	negs	r2, r3
 8000358:	f003 0303 	and.w	r3, r3, #3
 800035c:	f002 0203 	and.w	r2, r2, #3
 8000360:	bf58      	it	pl
 8000362:	4253      	negpl	r3, r2
 8000364:	737b      	strb	r3, [r7, #13]
 8000366:	e021      	b.n	80003ac <main+0x260>

		  }

		  else if(minFrame == FRAME_3){
 8000368:	7b7b      	ldrb	r3, [r7, #13]
 800036a:	2b03      	cmp	r3, #3
 800036c:	d11e      	bne.n	80003ac <main+0x260>
	  	  	  //draw top half of new item
	  	  	  //draw bottom half of new item
			  sprintf(newTimeStr,"%02X",sTime.Minutes);
 800036e:	7a7b      	ldrb	r3, [r7, #9]
 8000370:	461a      	mov	r2, r3
 8000372:	463b      	mov	r3, r7
 8000374:	4933      	ldr	r1, [pc, #204]	@ (8000444 <main+0x2f8>)
 8000376:	4618      	mov	r0, r3
 8000378:	f003 fa34 	bl	80037e4 <siprintf>
			  SSD1306_GotoXY(68,14);
 800037c:	210e      	movs	r1, #14
 800037e:	2044      	movs	r0, #68	@ 0x44
 8000380:	f000 fc84 	bl	8000c8c <SSD1306_GotoXY>
			  SSD1306_customPuts(newTimeStr, &Font_24x32, SCALED_BY_ONE, PRINT_BOTH, SSD1306_COLOR_BLACK);
 8000384:	4638      	mov	r0, r7
 8000386:	2300      	movs	r3, #0
 8000388:	9300      	str	r3, [sp, #0]
 800038a:	2303      	movs	r3, #3
 800038c:	2201      	movs	r2, #1
 800038e:	492e      	ldr	r1, [pc, #184]	@ (8000448 <main+0x2fc>)
 8000390:	f000 fc38 	bl	8000c04 <SSD1306_customPuts>

			  //update prevMin
			  prevMin = sTime.Minutes;
 8000394:	7a7b      	ldrb	r3, [r7, #9]
 8000396:	73fb      	strb	r3, [r7, #15]

			  //increment minFrame
			  minFrame = (minFrame + 1)%4;
 8000398:	7b7b      	ldrb	r3, [r7, #13]
 800039a:	3301      	adds	r3, #1
 800039c:	425a      	negs	r2, r3
 800039e:	f003 0303 	and.w	r3, r3, #3
 80003a2:	f002 0203 	and.w	r2, r2, #3
 80003a6:	bf58      	it	pl
 80003a8:	4253      	negpl	r3, r2
 80003aa:	737b      	strb	r3, [r7, #13]
		  }
	  }

	  //For Hour
	  if(sTime.Hours != prevHour)
 80003ac:	7a3b      	ldrb	r3, [r7, #8]
 80003ae:	7bba      	ldrb	r2, [r7, #14]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	f000 80fe 	beq.w	80005b2 <main+0x466>
	  	  {
	  		  //flip animation
	  		  if(hourFrame == FRAME_0){ //frame 0
 80003b6:	7b3b      	ldrb	r3, [r7, #12]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d149      	bne.n	8000450 <main+0x304>
	  		  	  //draw top half of new item
	  			  sprintf(newTimeStr,"%02X",sTime.Hours);
 80003bc:	7a3b      	ldrb	r3, [r7, #8]
 80003be:	461a      	mov	r2, r3
 80003c0:	463b      	mov	r3, r7
 80003c2:	4920      	ldr	r1, [pc, #128]	@ (8000444 <main+0x2f8>)
 80003c4:	4618      	mov	r0, r3
 80003c6:	f003 fa0d 	bl	80037e4 <siprintf>
	  			  SSD1306_GotoXY(3,14);
 80003ca:	210e      	movs	r1, #14
 80003cc:	2003      	movs	r0, #3
 80003ce:	f000 fc5d 	bl	8000c8c <SSD1306_GotoXY>
	  			  SSD1306_customPuts(newTimeStr, &Font_24x32, SCALED_BY_ONE, PRINT_TOP_HALF, SSD1306_COLOR_BLACK);
 80003d2:	4638      	mov	r0, r7
 80003d4:	2300      	movs	r3, #0
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	2301      	movs	r3, #1
 80003da:	2201      	movs	r2, #1
 80003dc:	491a      	ldr	r1, [pc, #104]	@ (8000448 <main+0x2fc>)
 80003de:	f000 fc11 	bl	8000c04 <SSD1306_customPuts>

	  		  	  //draw bottom half of old item
	  			  sprintf(oldTimeStr,"%02X",prevHour);
 80003e2:	7bba      	ldrb	r2, [r7, #14]
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	4917      	ldr	r1, [pc, #92]	@ (8000444 <main+0x2f8>)
 80003e8:	4618      	mov	r0, r3
 80003ea:	f003 f9fb 	bl	80037e4 <siprintf>
	  			  SSD1306_GotoXY(3,14);
 80003ee:	210e      	movs	r1, #14
 80003f0:	2003      	movs	r0, #3
 80003f2:	f000 fc4b 	bl	8000c8c <SSD1306_GotoXY>
	  			  SSD1306_customPuts(oldTimeStr, &Font_24x32, SCALED_BY_ONE, PRINT_BOTTOM_HALF, SSD1306_COLOR_BLACK);
 80003f6:	1d38      	adds	r0, r7, #4
 80003f8:	2300      	movs	r3, #0
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	2302      	movs	r3, #2
 80003fe:	2201      	movs	r2, #1
 8000400:	4911      	ldr	r1, [pc, #68]	@ (8000448 <main+0x2fc>)
 8000402:	f000 fbff 	bl	8000c04 <SSD1306_customPuts>

	  		  	  // draw top half of old time scaled 1/2
	  			  SSD1306_GotoXY(3,14 + Font_24x32.FontHeight/(2*SCALED_BY_TWO));
 8000406:	4b10      	ldr	r3, [pc, #64]	@ (8000448 <main+0x2fc>)
 8000408:	785b      	ldrb	r3, [r3, #1]
 800040a:	089b      	lsrs	r3, r3, #2
 800040c:	b2db      	uxtb	r3, r3
 800040e:	330e      	adds	r3, #14
 8000410:	b29b      	uxth	r3, r3
 8000412:	4619      	mov	r1, r3
 8000414:	2003      	movs	r0, #3
 8000416:	f000 fc39 	bl	8000c8c <SSD1306_GotoXY>
	  			  SSD1306_customPuts(oldTimeStr, &Font_24x32, SCALED_BY_TWO, PRINT_TOP_HALF, SSD1306_COLOR_BLACK);
 800041a:	1d38      	adds	r0, r7, #4
 800041c:	2300      	movs	r3, #0
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2301      	movs	r3, #1
 8000422:	2202      	movs	r2, #2
 8000424:	4908      	ldr	r1, [pc, #32]	@ (8000448 <main+0x2fc>)
 8000426:	f000 fbed 	bl	8000c04 <SSD1306_customPuts>

				  //increment hourFrame
				  hourFrame = (hourFrame + 1)%4;
 800042a:	7b3b      	ldrb	r3, [r7, #12]
 800042c:	3301      	adds	r3, #1
 800042e:	425a      	negs	r2, r3
 8000430:	f003 0303 	and.w	r3, r3, #3
 8000434:	f002 0203 	and.w	r2, r2, #3
 8000438:	bf58      	it	pl
 800043a:	4253      	negpl	r3, r2
 800043c:	733b      	strb	r3, [r7, #12]
 800043e:	e0b8      	b.n	80005b2 <main+0x466>
 8000440:	200000d4 	.word	0x200000d4
 8000444:	0800415c 	.word	0x0800415c
 8000448:	20000000 	.word	0x20000000
 800044c:	aaaaaaab 	.word	0xaaaaaaab

	  		  }
	  		  else if (hourFrame == FRAME_1){ //frame 1
 8000450:	7b3b      	ldrb	r3, [r7, #12]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d146      	bne.n	80004e4 <main+0x398>
	  	  	  	  //draw top half of new item
	  			  sprintf(newTimeStr,"%02X",sTime.Hours);
 8000456:	7a3b      	ldrb	r3, [r7, #8]
 8000458:	461a      	mov	r2, r3
 800045a:	463b      	mov	r3, r7
 800045c:	495c      	ldr	r1, [pc, #368]	@ (80005d0 <main+0x484>)
 800045e:	4618      	mov	r0, r3
 8000460:	f003 f9c0 	bl	80037e4 <siprintf>
	  			  SSD1306_GotoXY(3,14);
 8000464:	210e      	movs	r1, #14
 8000466:	2003      	movs	r0, #3
 8000468:	f000 fc10 	bl	8000c8c <SSD1306_GotoXY>
	  			  SSD1306_customPuts(newTimeStr, &Font_24x32, SCALED_BY_ONE, PRINT_TOP_HALF, SSD1306_COLOR_BLACK);
 800046c:	4638      	mov	r0, r7
 800046e:	2300      	movs	r3, #0
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	2301      	movs	r3, #1
 8000474:	2201      	movs	r2, #1
 8000476:	4957      	ldr	r1, [pc, #348]	@ (80005d4 <main+0x488>)
 8000478:	f000 fbc4 	bl	8000c04 <SSD1306_customPuts>

	  	  	  	  //draw bottom half of old item
	  			  sprintf(oldTimeStr,"%02X",prevHour);
 800047c:	7bba      	ldrb	r2, [r7, #14]
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	4953      	ldr	r1, [pc, #332]	@ (80005d0 <main+0x484>)
 8000482:	4618      	mov	r0, r3
 8000484:	f003 f9ae 	bl	80037e4 <siprintf>
	  			  SSD1306_GotoXY(3,14);
 8000488:	210e      	movs	r1, #14
 800048a:	2003      	movs	r0, #3
 800048c:	f000 fbfe 	bl	8000c8c <SSD1306_GotoXY>
	  			  SSD1306_customPuts(oldTimeStr, &Font_24x32, SCALED_BY_ONE, PRINT_BOTTOM_HALF, SSD1306_COLOR_BLACK);
 8000490:	1d38      	adds	r0, r7, #4
 8000492:	2300      	movs	r3, #0
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	2302      	movs	r3, #2
 8000498:	2201      	movs	r2, #1
 800049a:	494e      	ldr	r1, [pc, #312]	@ (80005d4 <main+0x488>)
 800049c:	f000 fbb2 	bl	8000c04 <SSD1306_customPuts>

	  	  	  	  // draw top half of old time scaled 1/3
	  			  SSD1306_GotoXY(3,14 + 2*(Font_24x32.FontHeight/(2*SCALED_BY_THREE)));
 80004a0:	4b4c      	ldr	r3, [pc, #304]	@ (80005d4 <main+0x488>)
 80004a2:	785b      	ldrb	r3, [r3, #1]
 80004a4:	4a4c      	ldr	r2, [pc, #304]	@ (80005d8 <main+0x48c>)
 80004a6:	fba2 2303 	umull	r2, r3, r2, r3
 80004aa:	089b      	lsrs	r3, r3, #2
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	3307      	adds	r3, #7
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	4619      	mov	r1, r3
 80004b8:	2003      	movs	r0, #3
 80004ba:	f000 fbe7 	bl	8000c8c <SSD1306_GotoXY>
	  			  SSD1306_customPuts(oldTimeStr, &Font_24x32, SCALED_BY_THREE, PRINT_TOP_HALF, SSD1306_COLOR_BLACK);
 80004be:	1d38      	adds	r0, r7, #4
 80004c0:	2300      	movs	r3, #0
 80004c2:	9300      	str	r3, [sp, #0]
 80004c4:	2301      	movs	r3, #1
 80004c6:	2203      	movs	r2, #3
 80004c8:	4942      	ldr	r1, [pc, #264]	@ (80005d4 <main+0x488>)
 80004ca:	f000 fb9b 	bl	8000c04 <SSD1306_customPuts>

				  //increment hourFrame
				  hourFrame = (hourFrame + 1)%4;
 80004ce:	7b3b      	ldrb	r3, [r7, #12]
 80004d0:	3301      	adds	r3, #1
 80004d2:	425a      	negs	r2, r3
 80004d4:	f003 0303 	and.w	r3, r3, #3
 80004d8:	f002 0203 	and.w	r2, r2, #3
 80004dc:	bf58      	it	pl
 80004de:	4253      	negpl	r3, r2
 80004e0:	733b      	strb	r3, [r7, #12]
 80004e2:	e066      	b.n	80005b2 <main+0x466>

	  		  }
	  		  else if(hourFrame == FRAME_2){ // frame 2
 80004e4:	7b3b      	ldrb	r3, [r7, #12]
 80004e6:	2b02      	cmp	r3, #2
 80004e8:	d141      	bne.n	800056e <main+0x422>
	  	  	  	  //draw top half of new item
	  			  sprintf(newTimeStr,"%02X",sTime.Hours);
 80004ea:	7a3b      	ldrb	r3, [r7, #8]
 80004ec:	461a      	mov	r2, r3
 80004ee:	463b      	mov	r3, r7
 80004f0:	4937      	ldr	r1, [pc, #220]	@ (80005d0 <main+0x484>)
 80004f2:	4618      	mov	r0, r3
 80004f4:	f003 f976 	bl	80037e4 <siprintf>
	  			  SSD1306_GotoXY(3,14);
 80004f8:	210e      	movs	r1, #14
 80004fa:	2003      	movs	r0, #3
 80004fc:	f000 fbc6 	bl	8000c8c <SSD1306_GotoXY>
	  			  SSD1306_customPuts(newTimeStr, &Font_24x32, SCALED_BY_ONE, PRINT_TOP_HALF, SSD1306_COLOR_BLACK);
 8000500:	4638      	mov	r0, r7
 8000502:	2300      	movs	r3, #0
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2301      	movs	r3, #1
 8000508:	2201      	movs	r2, #1
 800050a:	4932      	ldr	r1, [pc, #200]	@ (80005d4 <main+0x488>)
 800050c:	f000 fb7a 	bl	8000c04 <SSD1306_customPuts>

	  	  	  	  //draw bottom half of old item
	  			  sprintf(oldTimeStr,"%02X",prevHour);
 8000510:	7bba      	ldrb	r2, [r7, #14]
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	492e      	ldr	r1, [pc, #184]	@ (80005d0 <main+0x484>)
 8000516:	4618      	mov	r0, r3
 8000518:	f003 f964 	bl	80037e4 <siprintf>
	  			  SSD1306_GotoXY(3,14);
 800051c:	210e      	movs	r1, #14
 800051e:	2003      	movs	r0, #3
 8000520:	f000 fbb4 	bl	8000c8c <SSD1306_GotoXY>
	  			  SSD1306_customPuts(oldTimeStr, &Font_24x32, SCALED_BY_ONE, PRINT_BOTTOM_HALF, SSD1306_COLOR_BLACK);
 8000524:	1d38      	adds	r0, r7, #4
 8000526:	2300      	movs	r3, #0
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2302      	movs	r3, #2
 800052c:	2201      	movs	r2, #1
 800052e:	4929      	ldr	r1, [pc, #164]	@ (80005d4 <main+0x488>)
 8000530:	f000 fb68 	bl	8000c04 <SSD1306_customPuts>

	  	  	  	  // draw bottom half of new time scaled 1/2
	  			  SSD1306_GotoXY(3,14 + Font_24x32.FontHeight/(2*SCALED_BY_TWO));
 8000534:	4b27      	ldr	r3, [pc, #156]	@ (80005d4 <main+0x488>)
 8000536:	785b      	ldrb	r3, [r3, #1]
 8000538:	089b      	lsrs	r3, r3, #2
 800053a:	b2db      	uxtb	r3, r3
 800053c:	330e      	adds	r3, #14
 800053e:	b29b      	uxth	r3, r3
 8000540:	4619      	mov	r1, r3
 8000542:	2003      	movs	r0, #3
 8000544:	f000 fba2 	bl	8000c8c <SSD1306_GotoXY>
	  			  SSD1306_customPuts(newTimeStr, &Font_24x32, SCALED_BY_TWO, PRINT_BOTTOM_HALF, SSD1306_COLOR_BLACK);
 8000548:	4638      	mov	r0, r7
 800054a:	2300      	movs	r3, #0
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2302      	movs	r3, #2
 8000550:	2202      	movs	r2, #2
 8000552:	4920      	ldr	r1, [pc, #128]	@ (80005d4 <main+0x488>)
 8000554:	f000 fb56 	bl	8000c04 <SSD1306_customPuts>

				  //increment hourFrame
				  hourFrame = (hourFrame + 1)%4;
 8000558:	7b3b      	ldrb	r3, [r7, #12]
 800055a:	3301      	adds	r3, #1
 800055c:	425a      	negs	r2, r3
 800055e:	f003 0303 	and.w	r3, r3, #3
 8000562:	f002 0203 	and.w	r2, r2, #3
 8000566:	bf58      	it	pl
 8000568:	4253      	negpl	r3, r2
 800056a:	733b      	strb	r3, [r7, #12]
 800056c:	e021      	b.n	80005b2 <main+0x466>

	  		  }

	  		  else if(hourFrame == FRAME_3){
 800056e:	7b3b      	ldrb	r3, [r7, #12]
 8000570:	2b03      	cmp	r3, #3
 8000572:	d11e      	bne.n	80005b2 <main+0x466>
	  	  	  	  //draw top half of new item
	  	  	  	  //draw bottom half of new item
	  			  sprintf(newTimeStr,"%02X",sTime.Hours);
 8000574:	7a3b      	ldrb	r3, [r7, #8]
 8000576:	461a      	mov	r2, r3
 8000578:	463b      	mov	r3, r7
 800057a:	4915      	ldr	r1, [pc, #84]	@ (80005d0 <main+0x484>)
 800057c:	4618      	mov	r0, r3
 800057e:	f003 f931 	bl	80037e4 <siprintf>
	  			  SSD1306_GotoXY(3,14);
 8000582:	210e      	movs	r1, #14
 8000584:	2003      	movs	r0, #3
 8000586:	f000 fb81 	bl	8000c8c <SSD1306_GotoXY>
	  			  SSD1306_customPuts(newTimeStr, &Font_24x32, SCALED_BY_ONE, PRINT_BOTH, SSD1306_COLOR_BLACK);
 800058a:	4638      	mov	r0, r7
 800058c:	2300      	movs	r3, #0
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2303      	movs	r3, #3
 8000592:	2201      	movs	r2, #1
 8000594:	490f      	ldr	r1, [pc, #60]	@ (80005d4 <main+0x488>)
 8000596:	f000 fb35 	bl	8000c04 <SSD1306_customPuts>

				  //update prevHour
				  prevHour = sTime.Hours;
 800059a:	7a3b      	ldrb	r3, [r7, #8]
 800059c:	73bb      	strb	r3, [r7, #14]

				  //increment hourFrame
				  hourFrame = (hourFrame + 1)%4;
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	3301      	adds	r3, #1
 80005a2:	425a      	negs	r2, r3
 80005a4:	f003 0303 	and.w	r3, r3, #3
 80005a8:	f002 0203 	and.w	r2, r2, #3
 80005ac:	bf58      	it	pl
 80005ae:	4253      	negpl	r3, r2
 80005b0:	733b      	strb	r3, [r7, #12]
	  		  }
	  	  }
	  //update Screen
	  SSD1306_DrawLine(0, 31, 127, 31, SSD1306_COLOR_BLACK);
 80005b2:	2300      	movs	r3, #0
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	231f      	movs	r3, #31
 80005b8:	227f      	movs	r2, #127	@ 0x7f
 80005ba:	211f      	movs	r1, #31
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fbbb 	bl	8000d38 <SSD1306_DrawLine>
	  SSD1306_UpdateScreen();
 80005c2:	f000 fb79 	bl	8000cb8 <SSD1306_UpdateScreen>
	  HAL_Delay(100);
 80005c6:	2064      	movs	r0, #100	@ 0x64
 80005c8:	f000 fe70 	bl	80012ac <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BCD);
 80005cc:	e5ec      	b.n	80001a8 <main+0x5c>
 80005ce:	bf00      	nop
 80005d0:	0800415c 	.word	0x0800415c
 80005d4:	20000000 	.word	0x20000000
 80005d8:	aaaaaaab 	.word	0xaaaaaaab

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005e6:	2228      	movs	r2, #40	@ 0x28
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 f91a 	bl	8003824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800060c:	2306      	movs	r3, #6
 800060e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000618:	2310      	movs	r3, #16
 800061a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800061c:	2300      	movs	r3, #0
 800061e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fd75 	bl	8002114 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000630:	f000 f8dc 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f001 ffe2 	bl	8002618 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800065a:	f000 f8c7 	bl	80007ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800065e:	2301      	movs	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000662:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000666:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f002 f962 	bl	8002934 <HAL_RCCEx_PeriphCLKConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000676:	f000 f8b9 	bl	80007ec <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3750      	adds	r7, #80	@ 0x50
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000688:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <MX_I2C1_Init+0x50>)
 800068a:	4a13      	ldr	r2, [pc, #76]	@ (80006d8 <MX_I2C1_Init+0x54>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_I2C1_Init+0x50>)
 8000690:	4a12      	ldr	r2, [pc, #72]	@ (80006dc <MX_I2C1_Init+0x58>)
 8000692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006c2:	f001 f87f 	bl	80017c4 <HAL_I2C_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006cc:	f000 f88e 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000080 	.word	0x20000080
 80006d8:	40005400 	.word	0x40005400
 80006dc:	00061a80 	.word	0x00061a80

080006e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2100      	movs	r1, #0
 80006ec:	460a      	mov	r2, r1
 80006ee:	801a      	strh	r2, [r3, #0]
 80006f0:	460a      	mov	r2, r1
 80006f2:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 80006f8:	463b      	mov	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000700:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <MX_RTC_Init+0xc0>)
 8000702:	4a28      	ldr	r2, [pc, #160]	@ (80007a4 <MX_RTC_Init+0xc4>)
 8000704:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000706:	4b26      	ldr	r3, [pc, #152]	@ (80007a0 <MX_RTC_Init+0xc0>)
 8000708:	f04f 32ff 	mov.w	r2, #4294967295
 800070c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800070e:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <MX_RTC_Init+0xc0>)
 8000710:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000714:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000716:	4822      	ldr	r0, [pc, #136]	@ (80007a0 <MX_RTC_Init+0xc0>)
 8000718:	f002 fa78 	bl	8002c0c <HAL_RTC_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000722:	f000 f863 	bl	80007ec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x18;
 8000726:	2318      	movs	r3, #24
 8000728:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x59;
 800072a:	2359      	movs	r3, #89	@ 0x59
 800072c:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 800072e:	2300      	movs	r3, #0
 8000730:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	2201      	movs	r2, #1
 8000738:	4619      	mov	r1, r3
 800073a:	4819      	ldr	r0, [pc, #100]	@ (80007a0 <MX_RTC_Init+0xc0>)
 800073c:	f002 faf2 	bl	8002d24 <HAL_RTC_SetTime>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8000746:	f000 f851 	bl	80007ec <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800074a:	2306      	movs	r3, #6
 800074c:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_MAY;
 800074e:	2305      	movs	r3, #5
 8000750:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x18;
 8000752:	2318      	movs	r3, #24
 8000754:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x24;
 8000756:	2324      	movs	r3, #36	@ 0x24
 8000758:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	2201      	movs	r2, #1
 8000760:	4619      	mov	r1, r3
 8000762:	480f      	ldr	r0, [pc, #60]	@ (80007a0 <MX_RTC_Init+0xc0>)
 8000764:	f002 fc4e 	bl	8003004 <HAL_RTC_SetDate>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800076e:	f000 f83d 	bl	80007ec <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000772:	2300      	movs	r3, #0
 8000774:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000776:	2300      	movs	r3, #0
 8000778:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800077a:	2300      	movs	r3, #0
 800077c:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	2201      	movs	r2, #1
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_RTC_Init+0xc0>)
 800078a:	f002 fcf1 	bl	8003170 <HAL_RTC_SetAlarm>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000794:	f000 f82a 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200000d4 	.word	0x200000d4
 80007a4:	40002800 	.word	0x40002800

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_GPIO_Init+0x40>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a0d      	ldr	r2, [pc, #52]	@ (80007e8 <MX_GPIO_Init+0x40>)
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	6193      	str	r3, [r2, #24]
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_GPIO_Init+0x40>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	f003 0310 	and.w	r3, r3, #16
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_GPIO_Init+0x40>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a07      	ldr	r2, [pc, #28]	@ (80007e8 <MX_GPIO_Init+0x40>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <MX_GPIO_Init+0x40>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	40021000 	.word	0x40021000

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <Error_Handler+0x8>

080007f8 <ssd1306_I2C_Write>:
static SSD1306_t SSD1306;

extern I2C_HandleTypeDef hi2c1;
static uint8_t SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];

void ssd1306_I2C_Write(uint8_t addr, uint8_t control_byte, uint8_t data){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af02      	add	r7, sp, #8
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
 8000802:	460b      	mov	r3, r1
 8000804:	71bb      	strb	r3, [r7, #6]
 8000806:	4613      	mov	r3, r2
 8000808:	717b      	strb	r3, [r7, #5]
	uint8_t data_reg[2];
	data_reg[0] = control_byte;
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	733b      	strb	r3, [r7, #12]
	data_reg[1] = data;
 800080e:	797b      	ldrb	r3, [r7, #5]
 8000810:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SSD1306_ADDR,data_reg,2,10);
 8000812:	f107 020c 	add.w	r2, r7, #12
 8000816:	230a      	movs	r3, #10
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2302      	movs	r3, #2
 800081c:	2178      	movs	r1, #120	@ 0x78
 800081e:	4803      	ldr	r0, [pc, #12]	@ (800082c <ssd1306_I2C_Write+0x34>)
 8000820:	f001 f914 	bl	8001a4c <HAL_I2C_Master_Transmit>
}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000080 	.word	0x20000080

08000830 <SSD1306_Init>:

uint8_t SSD1306_Init(void){
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	//Set Mux Ratio
	SSD1306_COMMAND(SET_MUX_RATIO);
 8000834:	22a8      	movs	r2, #168	@ 0xa8
 8000836:	2180      	movs	r1, #128	@ 0x80
 8000838:	2078      	movs	r0, #120	@ 0x78
 800083a:	f7ff ffdd 	bl	80007f8 <ssd1306_I2C_Write>
	SSD1306_COMMAND(0x3F);					//(63d = 64MUX) 0d - 14d are invalid entry
 800083e:	223f      	movs	r2, #63	@ 0x3f
 8000840:	2180      	movs	r1, #128	@ 0x80
 8000842:	2078      	movs	r0, #120	@ 0x78
 8000844:	f7ff ffd8 	bl	80007f8 <ssd1306_I2C_Write>

	//Set Display Offset
	SSD1306_COMMAND(SET_DISPLAY_OFFSET);
 8000848:	22d3      	movs	r2, #211	@ 0xd3
 800084a:	2180      	movs	r1, #128	@ 0x80
 800084c:	2078      	movs	r0, #120	@ 0x78
 800084e:	f7ff ffd3 	bl	80007f8 <ssd1306_I2C_Write>
	SSD1306_COMMAND(0x00);					//0d - 63d
 8000852:	2200      	movs	r2, #0
 8000854:	2180      	movs	r1, #128	@ 0x80
 8000856:	2078      	movs	r0, #120	@ 0x78
 8000858:	f7ff ffce 	bl	80007f8 <ssd1306_I2C_Write>

	//Set Segment Re-map
	SSD1306_COMMAND(SEGMENT_REMAP);
 800085c:	22a1      	movs	r2, #161	@ 0xa1
 800085e:	2180      	movs	r1, #128	@ 0x80
 8000860:	2078      	movs	r0, #120	@ 0x78
 8000862:	f7ff ffc9 	bl	80007f8 <ssd1306_I2C_Write>

	//Set COM Output Scan Direction
	SSD1306_COMMAND(COM_OUTPUT_SCAN_DIR_REMAP);
 8000866:	22c8      	movs	r2, #200	@ 0xc8
 8000868:	2180      	movs	r1, #128	@ 0x80
 800086a:	2078      	movs	r0, #120	@ 0x78
 800086c:	f7ff ffc4 	bl	80007f8 <ssd1306_I2C_Write>

	//Set COM Pins Hardware Configuration
	SSD1306_COMMAND(SET_COM_PINS_HARDWARE_CONFIG);
 8000870:	22da      	movs	r2, #218	@ 0xda
 8000872:	2180      	movs	r1, #128	@ 0x80
 8000874:	2078      	movs	r0, #120	@ 0x78
 8000876:	f7ff ffbf 	bl	80007f8 <ssd1306_I2C_Write>
	SSD1306_COMMAND(COM_PINS_HW_CONFIG_ALTCOM_DISABLE_REMAP );
 800087a:	2212      	movs	r2, #18
 800087c:	2180      	movs	r1, #128	@ 0x80
 800087e:	2078      	movs	r0, #120	@ 0x78
 8000880:	f7ff ffba 	bl	80007f8 <ssd1306_I2C_Write>

	//Set Contract Control
	SSD1306_COMMAND(SET_CONTRAST_CONTROL);
 8000884:	2281      	movs	r2, #129	@ 0x81
 8000886:	2180      	movs	r1, #128	@ 0x80
 8000888:	2078      	movs	r0, #120	@ 0x78
 800088a:	f7ff ffb5 	bl	80007f8 <ssd1306_I2C_Write>
	SSD1306_COMMAND(0x7F);
 800088e:	227f      	movs	r2, #127	@ 0x7f
 8000890:	2180      	movs	r1, #128	@ 0x80
 8000892:	2078      	movs	r0, #120	@ 0x78
 8000894:	f7ff ffb0 	bl	80007f8 <ssd1306_I2C_Write>

	//Disable Entire Display On
	SSD1306_COMMAND(DISABLE_ENTIRE_DISPLAY_ON);
 8000898:	22a4      	movs	r2, #164	@ 0xa4
 800089a:	2180      	movs	r1, #128	@ 0x80
 800089c:	2078      	movs	r0, #120	@ 0x78
 800089e:	f7ff ffab 	bl	80007f8 <ssd1306_I2C_Write>

	//Set Osc Frequency
	SSD1306_COMMAND(SET_DISPLAY_CLOCK_DIVIDE_RATIO_AND_OSC_FREQ);
 80008a2:	22d5      	movs	r2, #213	@ 0xd5
 80008a4:	2180      	movs	r1, #128	@ 0x80
 80008a6:	2078      	movs	r0, #120	@ 0x78
 80008a8:	f7ff ffa6 	bl	80007f8 <ssd1306_I2C_Write>
	SSD1306_COMMAND(0xF0);
 80008ac:	22f0      	movs	r2, #240	@ 0xf0
 80008ae:	2180      	movs	r1, #128	@ 0x80
 80008b0:	2078      	movs	r0, #120	@ 0x78
 80008b2:	f7ff ffa1 	bl	80007f8 <ssd1306_I2C_Write>

	//Enable Charge Regulator
	SSD1306_COMMAND(SET_CHARGE_PUMP);
 80008b6:	228d      	movs	r2, #141	@ 0x8d
 80008b8:	2180      	movs	r1, #128	@ 0x80
 80008ba:	2078      	movs	r0, #120	@ 0x78
 80008bc:	f7ff ff9c 	bl	80007f8 <ssd1306_I2C_Write>
	SSD1306_COMMAND(ENABLE_CHARGE_PUMP);
 80008c0:	2214      	movs	r2, #20
 80008c2:	2180      	movs	r1, #128	@ 0x80
 80008c4:	2078      	movs	r0, #120	@ 0x78
 80008c6:	f7ff ff97 	bl	80007f8 <ssd1306_I2C_Write>

	//Set Memory Address Mode
	SSD1306_COMMAND(0x20);
 80008ca:	2220      	movs	r2, #32
 80008cc:	2180      	movs	r1, #128	@ 0x80
 80008ce:	2078      	movs	r0, #120	@ 0x78
 80008d0:	f7ff ff92 	bl	80007f8 <ssd1306_I2C_Write>
	SSD1306_COMMAND(0x00);				//horizontal
 80008d4:	2200      	movs	r2, #0
 80008d6:	2180      	movs	r1, #128	@ 0x80
 80008d8:	2078      	movs	r0, #120	@ 0x78
 80008da:	f7ff ff8d 	bl	80007f8 <ssd1306_I2C_Write>

	//Display On
	SSD1306_COMMAND(DISPLAY_ON);
 80008de:	22af      	movs	r2, #175	@ 0xaf
 80008e0:	2180      	movs	r1, #128	@ 0x80
 80008e2:	2078      	movs	r0, #120	@ 0x78
 80008e4:	f7ff ff88 	bl	80007f8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 f9b7 	bl	8000c5c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80008ee:	f000 f9e3 	bl	8000cb8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <SSD1306_Init+0xdc>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80008f8:	4b04      	ldr	r3, [pc, #16]	@ (800090c <SSD1306_Init+0xdc>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 80008fe:	4b03      	ldr	r3, [pc, #12]	@ (800090c <SSD1306_Init+0xdc>)
 8000900:	2201      	movs	r2, #1
 8000902:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000904:	2301      	movs	r3, #1
}
 8000906:	4618      	mov	r0, r3
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200000e8 	.word	0x200000e8

08000910 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]
 800091a:	460b      	mov	r3, r1
 800091c:	80bb      	strh	r3, [r7, #4]
 800091e:	4613      	mov	r3, r2
 8000920:	70fb      	strb	r3, [r7, #3]
	if (
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	2b7f      	cmp	r3, #127	@ 0x7f
 8000926:	d848      	bhi.n	80009ba <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	2b3f      	cmp	r3, #63	@ 0x3f
 800092c:	d845      	bhi.n	80009ba <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800092e:	4b25      	ldr	r3, [pc, #148]	@ (80009c4 <SSD1306_DrawPixel+0xb4>)
 8000930:	791b      	ldrb	r3, [r3, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d006      	beq.n	8000944 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	2b00      	cmp	r3, #0
 800093a:	bf0c      	ite	eq
 800093c:	2301      	moveq	r3, #1
 800093e:	2300      	movne	r3, #0
 8000940:	b2db      	uxtb	r3, r3
 8000942:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_BLUE) {
 8000944:	78fb      	ldrb	r3, [r7, #3]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d11a      	bne.n	8000980 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800094a:	88fa      	ldrh	r2, [r7, #6]
 800094c:	88bb      	ldrh	r3, [r7, #4]
 800094e:	08db      	lsrs	r3, r3, #3
 8000950:	b298      	uxth	r0, r3
 8000952:	4603      	mov	r3, r0
 8000954:	01db      	lsls	r3, r3, #7
 8000956:	4413      	add	r3, r2
 8000958:	4a1b      	ldr	r2, [pc, #108]	@ (80009c8 <SSD1306_DrawPixel+0xb8>)
 800095a:	5cd3      	ldrb	r3, [r2, r3]
 800095c:	b25a      	sxtb	r2, r3
 800095e:	88bb      	ldrh	r3, [r7, #4]
 8000960:	f003 0307 	and.w	r3, r3, #7
 8000964:	2101      	movs	r1, #1
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	b25b      	sxtb	r3, r3
 800096c:	4313      	orrs	r3, r2
 800096e:	b259      	sxtb	r1, r3
 8000970:	88fa      	ldrh	r2, [r7, #6]
 8000972:	4603      	mov	r3, r0
 8000974:	01db      	lsls	r3, r3, #7
 8000976:	4413      	add	r3, r2
 8000978:	b2c9      	uxtb	r1, r1
 800097a:	4a13      	ldr	r2, [pc, #76]	@ (80009c8 <SSD1306_DrawPixel+0xb8>)
 800097c:	54d1      	strb	r1, [r2, r3]
 800097e:	e01d      	b.n	80009bc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000980:	88fa      	ldrh	r2, [r7, #6]
 8000982:	88bb      	ldrh	r3, [r7, #4]
 8000984:	08db      	lsrs	r3, r3, #3
 8000986:	b298      	uxth	r0, r3
 8000988:	4603      	mov	r3, r0
 800098a:	01db      	lsls	r3, r3, #7
 800098c:	4413      	add	r3, r2
 800098e:	4a0e      	ldr	r2, [pc, #56]	@ (80009c8 <SSD1306_DrawPixel+0xb8>)
 8000990:	5cd3      	ldrb	r3, [r2, r3]
 8000992:	b25a      	sxtb	r2, r3
 8000994:	88bb      	ldrh	r3, [r7, #4]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	2101      	movs	r1, #1
 800099c:	fa01 f303 	lsl.w	r3, r1, r3
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	43db      	mvns	r3, r3
 80009a4:	b25b      	sxtb	r3, r3
 80009a6:	4013      	ands	r3, r2
 80009a8:	b259      	sxtb	r1, r3
 80009aa:	88fa      	ldrh	r2, [r7, #6]
 80009ac:	4603      	mov	r3, r0
 80009ae:	01db      	lsls	r3, r3, #7
 80009b0:	4413      	add	r3, r2
 80009b2:	b2c9      	uxtb	r1, r1
 80009b4:	4a04      	ldr	r2, [pc, #16]	@ (80009c8 <SSD1306_DrawPixel+0xb8>)
 80009b6:	54d1      	strb	r1, [r2, r3]
 80009b8:	e000      	b.n	80009bc <SSD1306_DrawPixel+0xac>
		return;
 80009ba:	bf00      	nop
	}
}
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	200000e8 	.word	0x200000e8
 80009c8:	200000f0 	.word	0x200000f0

080009cc <SSD1306_customPutc>:
	/* Return character written */
	return ch;
}

// cannot scale only one half
char SSD1306_customPutc(char ch, FontDef_t* Font,uint8_t scale, uint8_t format, SSD1306_COLOR_t color) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6039      	str	r1, [r7, #0]
 80009d4:	4611      	mov	r1, r2
 80009d6:	461a      	mov	r2, r3
 80009d8:	4603      	mov	r3, r0
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	460b      	mov	r3, r1
 80009de:	71bb      	strb	r3, [r7, #6]
 80009e0:	4613      	mov	r3, r2
 80009e2:	717b      	strb	r3, [r7, #5]
		uint32_t i, b, j, bitMask;

		/* Check available space in LCD */
		if (
			SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80009e4:	4b86      	ldr	r3, [pc, #536]	@ (8000c00 <SSD1306_customPutc+0x234>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4413      	add	r3, r2
		if (
 80009f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80009f2:	dc07      	bgt.n	8000a04 <SSD1306_customPutc+0x38>
			SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80009f4:	4b82      	ldr	r3, [pc, #520]	@ (8000c00 <SSD1306_customPutc+0x234>)
 80009f6:	885b      	ldrh	r3, [r3, #2]
 80009f8:	461a      	mov	r2, r3
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	785b      	ldrb	r3, [r3, #1]
 80009fe:	4413      	add	r3, r2
			SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000a00:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a02:	dd01      	ble.n	8000a08 <SSD1306_customPutc+0x3c>
		) {
			/* Error */
			return 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	e0f7      	b.n	8000bf8 <SSD1306_customPutc+0x22c>
		}

		bitMask = 1 << ((Font->FontWidth + 7)/8 * 8 - 1);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	3307      	adds	r3, #7
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	da00      	bge.n	8000a14 <SSD1306_customPutc+0x48>
 8000a12:	3307      	adds	r3, #7
 8000a14:	10db      	asrs	r3, r3, #3
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	60fb      	str	r3, [r7, #12]

		//Top Half
		for (i = 0; i < Font->FontHeight/(2*scale); i++) {
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	e054      	b.n	8000ad2 <SSD1306_customPutc+0x106>
			if (!(format & PRINT_TOP_HALF))
 8000a28:	797b      	ldrb	r3, [r7, #5]
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d05b      	beq.n	8000aea <SSD1306_customPutc+0x11e>
				break;
			b = Font->data[(ch - 48) * Font->FontHeight + i*scale];
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	3b30      	subs	r3, #48	@ 0x30
 8000a3a:	6839      	ldr	r1, [r7, #0]
 8000a3c:	7849      	ldrb	r1, [r1, #1]
 8000a3e:	fb01 f303 	mul.w	r3, r1, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	79bb      	ldrb	r3, [r7, #6]
 8000a46:	6979      	ldr	r1, [r7, #20]
 8000a48:	fb01 f303 	mul.w	r3, r1, r3
 8000a4c:	4403      	add	r3, r0
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4413      	add	r3, r2
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	60bb      	str	r3, [r7, #8]
			for (j = 0; j < Font->FontWidth; j++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	e031      	b.n	8000ac0 <SSD1306_customPutc+0xf4>
				if ((b << j) & bitMask) {
 8000a5c:	68ba      	ldr	r2, [r7, #8]
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	409a      	lsls	r2, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	4013      	ands	r3, r2
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d011      	beq.n	8000a8e <SSD1306_customPutc+0xc2>
					SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)color);
 8000a6a:	4b65      	ldr	r3, [pc, #404]	@ (8000c00 <SSD1306_customPutc+0x234>)
 8000a6c:	881a      	ldrh	r2, [r3, #0]
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	4413      	add	r3, r2
 8000a74:	b298      	uxth	r0, r3
 8000a76:	4b62      	ldr	r3, [pc, #392]	@ (8000c00 <SSD1306_customPutc+0x234>)
 8000a78:	885a      	ldrh	r2, [r3, #2]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	4413      	add	r3, r2
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a86:	4619      	mov	r1, r3
 8000a88:	f7ff ff42 	bl	8000910 <SSD1306_DrawPixel>
 8000a8c:	e015      	b.n	8000aba <SSD1306_customPutc+0xee>
				} else {
					SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000a8e:	4b5c      	ldr	r3, [pc, #368]	@ (8000c00 <SSD1306_customPutc+0x234>)
 8000a90:	881a      	ldrh	r2, [r3, #0]
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	4413      	add	r3, r2
 8000a98:	b298      	uxth	r0, r3
 8000a9a:	4b59      	ldr	r3, [pc, #356]	@ (8000c00 <SSD1306_customPutc+0x234>)
 8000a9c:	885a      	ldrh	r2, [r3, #2]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	4413      	add	r3, r2
 8000aa4:	b299      	uxth	r1, r3
 8000aa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	bf0c      	ite	eq
 8000aae:	2301      	moveq	r3, #1
 8000ab0:	2300      	movne	r3, #0
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	f7ff ff2b 	bl	8000910 <SSD1306_DrawPixel>
			for (j = 0; j < Font->FontWidth; j++) {
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	3301      	adds	r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d3c7      	bcc.n	8000a5c <SSD1306_customPutc+0x90>
		for (i = 0; i < Font->FontHeight/(2*scale); i++) {
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	785b      	ldrb	r3, [r3, #1]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	79bb      	ldrb	r3, [r7, #6]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d39f      	bcc.n	8000a28 <SSD1306_customPutc+0x5c>
 8000ae8:	e000      	b.n	8000aec <SSD1306_customPutc+0x120>
				break;
 8000aea:	bf00      	nop
				}
			}
		}

		//Bottom half
		for (i = Font->FontHeight/(2*scale); i < Font->FontHeight/scale; i++) {
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	785b      	ldrb	r3, [r3, #1]
 8000af0:	461a      	mov	r2, r3
 8000af2:	79bb      	ldrb	r3, [r7, #6]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e054      	b.n	8000ba8 <SSD1306_customPutc+0x1dc>
			if (!(format & PRINT_BOTTOM_HALF))
 8000afe:	797b      	ldrb	r3, [r7, #5]
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d05a      	beq.n	8000bbe <SSD1306_customPutc+0x1f2>
				break;
			b = Font->data[(ch - 48) * Font->FontHeight + i*scale];
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685a      	ldr	r2, [r3, #4]
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	3b30      	subs	r3, #48	@ 0x30
 8000b10:	6839      	ldr	r1, [r7, #0]
 8000b12:	7849      	ldrb	r1, [r1, #1]
 8000b14:	fb01 f303 	mul.w	r3, r1, r3
 8000b18:	4618      	mov	r0, r3
 8000b1a:	79bb      	ldrb	r3, [r7, #6]
 8000b1c:	6979      	ldr	r1, [r7, #20]
 8000b1e:	fb01 f303 	mul.w	r3, r1, r3
 8000b22:	4403      	add	r3, r0
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4413      	add	r3, r2
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	60bb      	str	r3, [r7, #8]
			for (j = 0; j < Font->FontWidth; j++) {
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	e031      	b.n	8000b96 <SSD1306_customPutc+0x1ca>
				if ((b << j) & bitMask) {
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	409a      	lsls	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d011      	beq.n	8000b64 <SSD1306_customPutc+0x198>
					SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)color);
 8000b40:	4b2f      	ldr	r3, [pc, #188]	@ (8000c00 <SSD1306_customPutc+0x234>)
 8000b42:	881a      	ldrh	r2, [r3, #0]
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	4413      	add	r3, r2
 8000b4a:	b298      	uxth	r0, r3
 8000b4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c00 <SSD1306_customPutc+0x234>)
 8000b4e:	885a      	ldrh	r2, [r3, #2]
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	4413      	add	r3, r2
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f7ff fed7 	bl	8000910 <SSD1306_DrawPixel>
 8000b62:	e015      	b.n	8000b90 <SSD1306_customPutc+0x1c4>
				} else {
					SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000b64:	4b26      	ldr	r3, [pc, #152]	@ (8000c00 <SSD1306_customPutc+0x234>)
 8000b66:	881a      	ldrh	r2, [r3, #0]
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	4413      	add	r3, r2
 8000b6e:	b298      	uxth	r0, r3
 8000b70:	4b23      	ldr	r3, [pc, #140]	@ (8000c00 <SSD1306_customPutc+0x234>)
 8000b72:	885a      	ldrh	r2, [r3, #2]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	4413      	add	r3, r2
 8000b7a:	b299      	uxth	r1, r3
 8000b7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	bf0c      	ite	eq
 8000b84:	2301      	moveq	r3, #1
 8000b86:	2300      	movne	r3, #0
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	f7ff fec0 	bl	8000910 <SSD1306_DrawPixel>
			for (j = 0; j < Font->FontWidth; j++) {
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	3301      	adds	r3, #1
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d3c7      	bcc.n	8000b32 <SSD1306_customPutc+0x166>
		for (i = Font->FontHeight/(2*scale); i < Font->FontHeight/scale; i++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	785a      	ldrb	r2, [r3, #1]
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d3a0      	bcc.n	8000afe <SSD1306_customPutc+0x132>
 8000bbc:	e000      	b.n	8000bc0 <SSD1306_customPutc+0x1f4>
				break;
 8000bbe:	bf00      	nop
				}
			}
		}
		/* Increase pointer */
		SSD1306.CurrentX += Font->FontWidth;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <SSD1306_customPutc+0x234>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	7812      	ldrb	r2, [r2, #0]
 8000bc8:	4413      	add	r3, r2
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <SSD1306_customPutc+0x234>)
 8000bce:	801a      	strh	r2, [r3, #0]
		if((SSD1306.CurrentX + Font->FontWidth) >= SSD1306_WIDTH){
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <SSD1306_customPutc+0x234>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bde:	dd0a      	ble.n	8000bf6 <SSD1306_customPutc+0x22a>
			SSD1306.CurrentX = 0;
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <SSD1306_customPutc+0x234>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	801a      	strh	r2, [r3, #0]
			SSD1306.CurrentY += Font->FontHeight;
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <SSD1306_customPutc+0x234>)
 8000be8:	885b      	ldrh	r3, [r3, #2]
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	7852      	ldrb	r2, [r2, #1]
 8000bee:	4413      	add	r3, r2
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	4b03      	ldr	r3, [pc, #12]	@ (8000c00 <SSD1306_customPutc+0x234>)
 8000bf4:	805a      	strh	r2, [r3, #2]
		}

		/* Return character written */
		return ch;
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
	}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200000e8 	.word	0x200000e8

08000c04 <SSD1306_customPuts>:

char SSD1306_customPuts(char* str, FontDef_t* Font, uint8_t scale, uint8_t format, SSD1306_COLOR_t color) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af02      	add	r7, sp, #8
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	461a      	mov	r2, r3
 8000c12:	460b      	mov	r3, r1
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	4613      	mov	r3, r2
 8000c18:	71bb      	strb	r3, [r7, #6]
	/* Write characters */
	while (*str) {
 8000c1a:	e015      	b.n	8000c48 <SSD1306_customPuts+0x44>
		/* Write character by character */
		if (SSD1306_customPutc(*str, Font, scale, format, color) != *str) {
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	7818      	ldrb	r0, [r3, #0]
 8000c20:	79b9      	ldrb	r1, [r7, #6]
 8000c22:	79fa      	ldrb	r2, [r7, #7]
 8000c24:	7e3b      	ldrb	r3, [r7, #24]
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	68b9      	ldr	r1, [r7, #8]
 8000c2c:	f7ff fece 	bl	80009cc <SSD1306_customPutc>
 8000c30:	4603      	mov	r3, r0
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d002      	beq.n	8000c42 <SSD1306_customPuts+0x3e>
			/* Return error */
			return *str;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	e008      	b.n	8000c54 <SSD1306_customPuts+0x50>
		}

		/* Increase string pointer */
		str++;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	3301      	adds	r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1e5      	bne.n	8000c1c <SSD1306_customPuts+0x18>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	781b      	ldrb	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <SSD1306_Fill>:

	/* Everything OK, zero should be returned */
	return *str;
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d101      	bne.n	8000c70 <SSD1306_Fill+0x14>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e000      	b.n	8000c72 <SSD1306_Fill+0x16>
 8000c70:	23ff      	movs	r3, #255	@ 0xff
 8000c72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c76:	4619      	mov	r1, r3
 8000c78:	4803      	ldr	r0, [pc, #12]	@ (8000c88 <SSD1306_Fill+0x2c>)
 8000c7a:	f002 fdd3 	bl	8003824 <memset>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200000f0 	.word	0x200000f0

08000c8c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	460a      	mov	r2, r1
 8000c96:	80fb      	strh	r3, [r7, #6]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000c9c:	4a05      	ldr	r2, [pc, #20]	@ (8000cb4 <SSD1306_GotoXY+0x28>)
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <SSD1306_GotoXY+0x28>)
 8000ca4:	88bb      	ldrh	r3, [r7, #4]
 8000ca6:	8053      	strh	r3, [r2, #2]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	200000e8 	.word	0x200000e8

08000cb8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0a4      	sub	sp, #144	@ 0x90
 8000cbc:	af02      	add	r7, sp, #8
	//Send data to OLED
	for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++){
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000cc4:	e02b      	b.n	8000d1e <SSD1306_UpdateScreen+0x66>

		uint8_t temp[SSD1306_WIDTH + 1];
		temp[0] = DATA_STREAM;
 8000cc6:	2340      	movs	r3, #64	@ 0x40
 8000cc8:	713b      	strb	r3, [r7, #4]

		for(uint8_t j = 0; j < SSD1306_WIDTH; j++){
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8000cd0:	e013      	b.n	8000cfa <SSD1306_UpdateScreen+0x42>
			temp[j + 1] = SSD1306_Buffer[j + i*SSD1306_WIDTH];
 8000cd2:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 8000cd6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000cda:	01db      	lsls	r3, r3, #7
 8000cdc:	441a      	add	r2, r3
 8000cde:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4912      	ldr	r1, [pc, #72]	@ (8000d30 <SSD1306_UpdateScreen+0x78>)
 8000ce6:	5c8a      	ldrb	r2, [r1, r2]
 8000ce8:	3388      	adds	r3, #136	@ 0x88
 8000cea:	443b      	add	r3, r7
 8000cec:	f803 2c84 	strb.w	r2, [r3, #-132]
		for(uint8_t j = 0; j < SSD1306_WIDTH; j++){
 8000cf0:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8000cfa:	f997 3086 	ldrsb.w	r3, [r7, #134]	@ 0x86
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	dae7      	bge.n	8000cd2 <SSD1306_UpdateScreen+0x1a>
		}

		HAL_I2C_Master_Transmit(&hi2c1,SSD1306_ADDR,temp,SSD1306_WIDTH + 1,1000);
 8000d02:	1d3a      	adds	r2, r7, #4
 8000d04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	2381      	movs	r3, #129	@ 0x81
 8000d0c:	2178      	movs	r1, #120	@ 0x78
 8000d0e:	4809      	ldr	r0, [pc, #36]	@ (8000d34 <SSD1306_UpdateScreen+0x7c>)
 8000d10:	f000 fe9c 	bl	8001a4c <HAL_I2C_Master_Transmit>
	for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++){
 8000d14:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d18:	3301      	adds	r3, #1
 8000d1a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000d1e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d22:	2b07      	cmp	r3, #7
 8000d24:	d9cf      	bls.n	8000cc6 <SSD1306_UpdateScreen+0xe>
	}

}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	3788      	adds	r7, #136	@ 0x88
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200000f0 	.word	0x200000f0
 8000d34:	20000080 	.word	0x20000080

08000d38 <SSD1306_DrawLine>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_DrawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, SSD1306_COLOR_t c){
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	4608      	mov	r0, r1
 8000d42:	4611      	mov	r1, r2
 8000d44:	461a      	mov	r2, r3
 8000d46:	4623      	mov	r3, r4
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71bb      	strb	r3, [r7, #6]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	717b      	strb	r3, [r7, #5]
 8000d52:	4613      	mov	r3, r2
 8000d54:	713b      	strb	r3, [r7, #4]
	/* Check input parameters */
	if((x0 < 0 || x0 >= SSD1306_WIDTH) || (x1 < 0 || x1 >= SSD1306_WIDTH) || (y0 < 0 || y0 >= SSD1306_HEIGHT) || (y1 < 0 || y1 >= SSD1306_HEIGHT))
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f2c0 80cd 	blt.w	8000efa <SSD1306_DrawLine+0x1c2>
 8000d60:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f2c0 80c8 	blt.w	8000efa <SSD1306_DrawLine+0x1c2>
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d6e:	f200 80c4 	bhi.w	8000efa <SSD1306_DrawLine+0x1c2>
 8000d72:	793b      	ldrb	r3, [r7, #4]
 8000d74:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d76:	f200 80c0 	bhi.w	8000efa <SSD1306_DrawLine+0x1c2>
		return;

	uint8_t dx, dy, sx, sy, err, e2, i, tmp;
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8000d7a:	79fa      	ldrb	r2, [r7, #7]
 8000d7c:	797b      	ldrb	r3, [r7, #5]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d204      	bcs.n	8000d8c <SSD1306_DrawLine+0x54>
 8000d82:	797a      	ldrb	r2, [r7, #5]
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	e003      	b.n	8000d94 <SSD1306_DrawLine+0x5c>
 8000d8c:	79fa      	ldrb	r2, [r7, #7]
 8000d8e:	797b      	ldrb	r3, [r7, #5]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	737b      	strb	r3, [r7, #13]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8000d96:	79ba      	ldrb	r2, [r7, #6]
 8000d98:	793b      	ldrb	r3, [r7, #4]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d204      	bcs.n	8000da8 <SSD1306_DrawLine+0x70>
 8000d9e:	793a      	ldrb	r2, [r7, #4]
 8000da0:	79bb      	ldrb	r3, [r7, #6]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	e003      	b.n	8000db0 <SSD1306_DrawLine+0x78>
 8000da8:	79ba      	ldrb	r2, [r7, #6]
 8000daa:	793b      	ldrb	r3, [r7, #4]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	733b      	strb	r3, [r7, #12]
	sx = (x0 < x1) ? 1 : -1;
 8000db2:	79fa      	ldrb	r2, [r7, #7]
 8000db4:	797b      	ldrb	r3, [r7, #5]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d201      	bcs.n	8000dbe <SSD1306_DrawLine+0x86>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <SSD1306_DrawLine+0x88>
 8000dbe:	23ff      	movs	r3, #255	@ 0xff
 8000dc0:	72fb      	strb	r3, [r7, #11]
	sy = (y0 < y1) ? 1 : -1;
 8000dc2:	79ba      	ldrb	r2, [r7, #6]
 8000dc4:	793b      	ldrb	r3, [r7, #4]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d201      	bcs.n	8000dce <SSD1306_DrawLine+0x96>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e000      	b.n	8000dd0 <SSD1306_DrawLine+0x98>
 8000dce:	23ff      	movs	r3, #255	@ 0xff
 8000dd0:	72bb      	strb	r3, [r7, #10]
	err = ((dx > dy) ? dx : -dy) / 2;
 8000dd2:	7b7a      	ldrb	r2, [r7, #13]
 8000dd4:	7b3b      	ldrb	r3, [r7, #12]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d905      	bls.n	8000de6 <SSD1306_DrawLine+0xae>
 8000dda:	7b7b      	ldrb	r3, [r7, #13]
 8000ddc:	0fda      	lsrs	r2, r3, #31
 8000dde:	4413      	add	r3, r2
 8000de0:	105b      	asrs	r3, r3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	e005      	b.n	8000df2 <SSD1306_DrawLine+0xba>
 8000de6:	7b3b      	ldrb	r3, [r7, #12]
 8000de8:	0fda      	lsrs	r2, r3, #31
 8000dea:	4413      	add	r3, r2
 8000dec:	105b      	asrs	r3, r3, #1
 8000dee:	425b      	negs	r3, r3
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	73fb      	strb	r3, [r7, #15]

	if (dx == 0) {
 8000df4:	7b7b      	ldrb	r3, [r7, #13]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d127      	bne.n	8000e4a <SSD1306_DrawLine+0x112>
		if (y1 < y0) {
 8000dfa:	793a      	ldrb	r2, [r7, #4]
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d205      	bcs.n	8000e0e <SSD1306_DrawLine+0xd6>
			tmp = y1;
 8000e02:	793b      	ldrb	r3, [r7, #4]
 8000e04:	723b      	strb	r3, [r7, #8]
			y1 = y0;
 8000e06:	79bb      	ldrb	r3, [r7, #6]
 8000e08:	713b      	strb	r3, [r7, #4]
			y0 = tmp;
 8000e0a:	7a3b      	ldrb	r3, [r7, #8]
 8000e0c:	71bb      	strb	r3, [r7, #6]
		}

		if (x1 < x0) {
 8000e0e:	797a      	ldrb	r2, [r7, #5]
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d205      	bcs.n	8000e22 <SSD1306_DrawLine+0xea>
			tmp = x1;
 8000e16:	797b      	ldrb	r3, [r7, #5]
 8000e18:	723b      	strb	r3, [r7, #8]
			x1 = x0;
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	717b      	strb	r3, [r7, #5]
			x0 = tmp;
 8000e1e:	7a3b      	ldrb	r3, [r7, #8]
 8000e20:	71fb      	strb	r3, [r7, #7]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000e22:	79bb      	ldrb	r3, [r7, #6]
 8000e24:	73bb      	strb	r3, [r7, #14]
 8000e26:	e00b      	b.n	8000e40 <SSD1306_DrawLine+0x108>
			SSD1306_DrawPixel(x0, i, c);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	7bba      	ldrb	r2, [r7, #14]
 8000e2e:	b291      	uxth	r1, r2
 8000e30:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fd6b 	bl	8000910 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000e3a:	7bbb      	ldrb	r3, [r7, #14]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	73bb      	strb	r3, [r7, #14]
 8000e40:	7bba      	ldrb	r2, [r7, #14]
 8000e42:	793b      	ldrb	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d9ef      	bls.n	8000e28 <SSD1306_DrawLine+0xf0>
		}

		/* Return from function */
		return;
 8000e48:	e05a      	b.n	8000f00 <SSD1306_DrawLine+0x1c8>
	}

	if (dy == 0) {
 8000e4a:	7b3b      	ldrb	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d127      	bne.n	8000ea0 <SSD1306_DrawLine+0x168>
		if (y1 < y0) {
 8000e50:	793a      	ldrb	r2, [r7, #4]
 8000e52:	79bb      	ldrb	r3, [r7, #6]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d205      	bcs.n	8000e64 <SSD1306_DrawLine+0x12c>
			tmp = y1;
 8000e58:	793b      	ldrb	r3, [r7, #4]
 8000e5a:	723b      	strb	r3, [r7, #8]
			y1 = y0;
 8000e5c:	79bb      	ldrb	r3, [r7, #6]
 8000e5e:	713b      	strb	r3, [r7, #4]
			y0 = tmp;
 8000e60:	7a3b      	ldrb	r3, [r7, #8]
 8000e62:	71bb      	strb	r3, [r7, #6]
		}

		if (x1 < x0) {
 8000e64:	797a      	ldrb	r2, [r7, #5]
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d205      	bcs.n	8000e78 <SSD1306_DrawLine+0x140>
			tmp = x1;
 8000e6c:	797b      	ldrb	r3, [r7, #5]
 8000e6e:	723b      	strb	r3, [r7, #8]
			x1 = x0;
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	717b      	strb	r3, [r7, #5]
			x0 = tmp;
 8000e74:	7a3b      	ldrb	r3, [r7, #8]
 8000e76:	71fb      	strb	r3, [r7, #7]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	73bb      	strb	r3, [r7, #14]
 8000e7c:	e00b      	b.n	8000e96 <SSD1306_DrawLine+0x15e>
			SSD1306_DrawPixel(i, y0, c);
 8000e7e:	7bbb      	ldrb	r3, [r7, #14]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	79ba      	ldrb	r2, [r7, #6]
 8000e84:	b291      	uxth	r1, r2
 8000e86:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fd40 	bl	8000910 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	3301      	adds	r3, #1
 8000e94:	73bb      	strb	r3, [r7, #14]
 8000e96:	7bba      	ldrb	r2, [r7, #14]
 8000e98:	797b      	ldrb	r3, [r7, #5]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d9ef      	bls.n	8000e7e <SSD1306_DrawLine+0x146>
		}

		/* Return from function */
		return;
 8000e9e:	e02f      	b.n	8000f00 <SSD1306_DrawLine+0x1c8>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	79ba      	ldrb	r2, [r7, #6]
 8000ea6:	b291      	uxth	r1, r2
 8000ea8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fd2f 	bl	8000910 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000eb2:	79fa      	ldrb	r2, [r7, #7]
 8000eb4:	797b      	ldrb	r3, [r7, #5]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d103      	bne.n	8000ec2 <SSD1306_DrawLine+0x18a>
 8000eba:	79ba      	ldrb	r2, [r7, #6]
 8000ebc:	793b      	ldrb	r3, [r7, #4]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d01d      	beq.n	8000efe <SSD1306_DrawLine+0x1c6>
			break;
		}
		e2 = err;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	727b      	strb	r3, [r7, #9]
		if (e2 > -dx) {
 8000ec6:	7a7a      	ldrb	r2, [r7, #9]
 8000ec8:	7b7b      	ldrb	r3, [r7, #13]
 8000eca:	425b      	negs	r3, r3
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dd07      	ble.n	8000ee0 <SSD1306_DrawLine+0x1a8>
			err -= dy;
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	7b3b      	ldrb	r3, [r7, #12]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	73fb      	strb	r3, [r7, #15]
			x0 += sx;
 8000ed8:	79fa      	ldrb	r2, [r7, #7]
 8000eda:	7afb      	ldrb	r3, [r7, #11]
 8000edc:	4413      	add	r3, r2
 8000ede:	71fb      	strb	r3, [r7, #7]
		}
		if (e2 < dy) {
 8000ee0:	7a7a      	ldrb	r2, [r7, #9]
 8000ee2:	7b3b      	ldrb	r3, [r7, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d2db      	bcs.n	8000ea0 <SSD1306_DrawLine+0x168>
			err += dx;
 8000ee8:	7bfa      	ldrb	r2, [r7, #15]
 8000eea:	7b7b      	ldrb	r3, [r7, #13]
 8000eec:	4413      	add	r3, r2
 8000eee:	73fb      	strb	r3, [r7, #15]
			y0 += sy;
 8000ef0:	79ba      	ldrb	r2, [r7, #6]
 8000ef2:	7abb      	ldrb	r3, [r7, #10]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	71bb      	strb	r3, [r7, #6]
		SSD1306_DrawPixel(x0, y0, c);
 8000ef8:	e7d2      	b.n	8000ea0 <SSD1306_DrawLine+0x168>
		return;
 8000efa:	bf00      	nop
 8000efc:	e000      	b.n	8000f00 <SSD1306_DrawLine+0x1c8>
			break;
 8000efe:	bf00      	nop
		}
	}
}
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd90      	pop	{r4, r7, pc}

08000f06 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint8_t x, uint8_t y, uint8_t w, uint8_t h, SSD1306_COLOR_t c) {
 8000f06:	b590      	push	{r4, r7, lr}
 8000f08:	b087      	sub	sp, #28
 8000f0a:	af02      	add	r7, sp, #8
 8000f0c:	4604      	mov	r4, r0
 8000f0e:	4608      	mov	r0, r1
 8000f10:	4611      	mov	r1, r2
 8000f12:	461a      	mov	r2, r3
 8000f14:	4623      	mov	r3, r4
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	4603      	mov	r3, r0
 8000f1a:	71bb      	strb	r3, [r7, #6]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	717b      	strb	r3, [r7, #5]
 8000f20:	4613      	mov	r3, r2
 8000f22:	713b      	strb	r3, [r7, #4]
	uint8_t i;

	/* Check input parameters */
	if (
		x >= SSD1306_WIDTH ||
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
	if (
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db36      	blt.n	8000f9a <SSD1306_DrawFilledRectangle+0x94>
		x >= SSD1306_WIDTH ||
 8000f2c:	79bb      	ldrb	r3, [r7, #6]
 8000f2e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f30:	d833      	bhi.n	8000f9a <SSD1306_DrawFilledRectangle+0x94>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000f32:	79fa      	ldrb	r2, [r7, #7]
 8000f34:	797b      	ldrb	r3, [r7, #5]
 8000f36:	4413      	add	r3, r2
 8000f38:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f3a:	dd06      	ble.n	8000f4a <SSD1306_DrawFilledRectangle+0x44>
		w = SSD1306_WIDTH - x;
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8000f42:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8000f46:	3380      	adds	r3, #128	@ 0x80
 8000f48:	717b      	strb	r3, [r7, #5]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000f4a:	79ba      	ldrb	r2, [r7, #6]
 8000f4c:	793b      	ldrb	r3, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f52:	dd03      	ble.n	8000f5c <SSD1306_DrawFilledRectangle+0x56>
		h = SSD1306_HEIGHT - y;
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000f5a:	713b      	strb	r3, [r7, #4]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e016      	b.n	8000f90 <SSD1306_DrawFilledRectangle+0x8a>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8000f62:	79ba      	ldrb	r2, [r7, #6]
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	4413      	add	r3, r2
 8000f68:	b2d9      	uxtb	r1, r3
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	797b      	ldrb	r3, [r7, #5]
 8000f6e:	4413      	add	r3, r2
 8000f70:	b2dc      	uxtb	r4, r3
 8000f72:	79ba      	ldrb	r2, [r7, #6]
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	4413      	add	r3, r2
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	79f8      	ldrb	r0, [r7, #7]
 8000f7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	4613      	mov	r3, r2
 8000f84:	4622      	mov	r2, r4
 8000f86:	f7ff fed7 	bl	8000d38 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	7bfa      	ldrb	r2, [r7, #15]
 8000f92:	793b      	ldrb	r3, [r7, #4]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d9e4      	bls.n	8000f62 <SSD1306_DrawFilledRectangle+0x5c>
 8000f98:	e000      	b.n	8000f9c <SSD1306_DrawFilledRectangle+0x96>
		return;
 8000f9a:	bf00      	nop
	}
}
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd90      	pop	{r4, r7, pc}
	...

08000fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <HAL_MspInit+0x5c>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4a14      	ldr	r2, [pc, #80]	@ (8001000 <HAL_MspInit+0x5c>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6193      	str	r3, [r2, #24]
 8000fb6:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <HAL_MspInit+0x5c>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <HAL_MspInit+0x5c>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001000 <HAL_MspInit+0x5c>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fcc:	61d3      	str	r3, [r2, #28]
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <HAL_MspInit+0x5c>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000fda:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <HAL_MspInit+0x60>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <HAL_MspInit+0x60>)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	40021000 	.word	0x40021000
 8001004:	40010000 	.word	0x40010000

08001008 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a15      	ldr	r2, [pc, #84]	@ (8001078 <HAL_I2C_MspInit+0x70>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d123      	bne.n	8001070 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	4b14      	ldr	r3, [pc, #80]	@ (800107c <HAL_I2C_MspInit+0x74>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a13      	ldr	r2, [pc, #76]	@ (800107c <HAL_I2C_MspInit+0x74>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b11      	ldr	r3, [pc, #68]	@ (800107c <HAL_I2C_MspInit+0x74>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001040:	23c0      	movs	r3, #192	@ 0xc0
 8001042:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001044:	2312      	movs	r3, #18
 8001046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4619      	mov	r1, r3
 8001052:	480b      	ldr	r0, [pc, #44]	@ (8001080 <HAL_I2C_MspInit+0x78>)
 8001054:	f000 fa32 	bl	80014bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	@ (800107c <HAL_I2C_MspInit+0x74>)
 800105a:	69db      	ldr	r3, [r3, #28]
 800105c:	4a07      	ldr	r2, [pc, #28]	@ (800107c <HAL_I2C_MspInit+0x74>)
 800105e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001062:	61d3      	str	r3, [r2, #28]
 8001064:	4b05      	ldr	r3, [pc, #20]	@ (800107c <HAL_I2C_MspInit+0x74>)
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40005400 	.word	0x40005400
 800107c:	40021000 	.word	0x40021000
 8001080:	40010c00 	.word	0x40010c00

08001084 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0b      	ldr	r2, [pc, #44]	@ (80010c0 <HAL_RTC_MspInit+0x3c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d110      	bne.n	80010b8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001096:	f001 f831 	bl	80020fc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_RTC_MspInit+0x40>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a09      	ldr	r2, [pc, #36]	@ (80010c4 <HAL_RTC_MspInit+0x40>)
 80010a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <HAL_RTC_MspInit+0x40>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010b2:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <HAL_RTC_MspInit+0x44>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40002800 	.word	0x40002800
 80010c4:	40021000 	.word	0x40021000
 80010c8:	4242043c 	.word	0x4242043c

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <NMI_Handler+0x4>

080010d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <HardFault_Handler+0x4>

080010dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <MemManage_Handler+0x4>

080010e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111c:	f000 f8aa 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}

08001124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800112c:	4a14      	ldr	r2, [pc, #80]	@ (8001180 <_sbrk+0x5c>)
 800112e:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <_sbrk+0x60>)
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <_sbrk+0x64>)
 8001142:	4a12      	ldr	r2, [pc, #72]	@ (800118c <_sbrk+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	429a      	cmp	r2, r3
 8001152:	d207      	bcs.n	8001164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001154:	f002 fb6e 	bl	8003834 <__errno>
 8001158:	4603      	mov	r3, r0
 800115a:	220c      	movs	r2, #12
 800115c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	e009      	b.n	8001178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	4a05      	ldr	r2, [pc, #20]	@ (8001188 <_sbrk+0x64>)
 8001174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20005000 	.word	0x20005000
 8001184:	00000400 	.word	0x00000400
 8001188:	200004f0 	.word	0x200004f0
 800118c:	20000640 	.word	0x20000640

08001190 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800119c:	f7ff fff8 	bl	8001190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a0:	480b      	ldr	r0, [pc, #44]	@ (80011d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011a2:	490c      	ldr	r1, [pc, #48]	@ (80011d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011a4:	4a0c      	ldr	r2, [pc, #48]	@ (80011d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a09      	ldr	r2, [pc, #36]	@ (80011dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011b8:	4c09      	ldr	r4, [pc, #36]	@ (80011e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c6:	f002 fb3b 	bl	8003840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ca:	f7fe ffbf 	bl	800014c <main>
  bx lr
 80011ce:	4770      	bx	lr
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80011d8:	080046e0 	.word	0x080046e0
  ldr r2, =_sbss
 80011dc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80011e0:	20000640 	.word	0x20000640

080011e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC1_2_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <HAL_Init+0x28>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	@ (8001210 <HAL_Init+0x28>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 f92b 	bl	8001454 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	200f      	movs	r0, #15
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff fece 	bl	8000fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f935 	bl	80014a2 <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 f90b 	bl	800146a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	@ (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000008 	.word	0x20000008
 800126c:	20000010 	.word	0x20000010
 8001270:	2000000c 	.word	0x2000000c

08001274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <HAL_IncTick+0x1c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <HAL_IncTick+0x20>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a03      	ldr	r2, [pc, #12]	@ (8001294 <HAL_IncTick+0x20>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000010 	.word	0x20000010
 8001294:	200004f4 	.word	0x200004f4

08001298 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b02      	ldr	r3, [pc, #8]	@ (80012a8 <HAL_GetTick+0x10>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	200004f4 	.word	0x200004f4

080012ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff fff0 	bl	8001298 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c4:	d005      	beq.n	80012d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c6:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <HAL_Delay+0x44>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012d2:	bf00      	nop
 80012d4:	f7ff ffe0 	bl	8001298 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d8f7      	bhi.n	80012d4 <HAL_Delay+0x28>
  {
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000010 	.word	0x20000010

080012f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001310:	4013      	ands	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800131c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001340:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <__NVIC_GetPriorityGrouping+0x18>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 0307 	and.w	r3, r3, #7
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	2b00      	cmp	r3, #0
 800136a:	db0a      	blt.n	8001382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	490c      	ldr	r1, [pc, #48]	@ (80013a4 <__NVIC_SetPriority+0x4c>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	0112      	lsls	r2, r2, #4
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	440b      	add	r3, r1
 800137c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001380:	e00a      	b.n	8001398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4908      	ldr	r1, [pc, #32]	@ (80013a8 <__NVIC_SetPriority+0x50>)
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	3b04      	subs	r3, #4
 8001390:	0112      	lsls	r2, r2, #4
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	440b      	add	r3, r1
 8001396:	761a      	strb	r2, [r3, #24]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	@ 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f1c3 0307 	rsb	r3, r3, #7
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	bf28      	it	cs
 80013ca:	2304      	movcs	r3, #4
 80013cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3304      	adds	r3, #4
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d902      	bls.n	80013dc <NVIC_EncodePriority+0x30>
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3b03      	subs	r3, #3
 80013da:	e000      	b.n	80013de <NVIC_EncodePriority+0x32>
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	401a      	ands	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f4:	f04f 31ff 	mov.w	r1, #4294967295
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	43d9      	mvns	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	4313      	orrs	r3, r2
         );
}
 8001406:	4618      	mov	r0, r3
 8001408:	3724      	adds	r7, #36	@ 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001420:	d301      	bcc.n	8001426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001422:	2301      	movs	r3, #1
 8001424:	e00f      	b.n	8001446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001426:	4a0a      	ldr	r2, [pc, #40]	@ (8001450 <SysTick_Config+0x40>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142e:	210f      	movs	r1, #15
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f7ff ff90 	bl	8001358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001438:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <SysTick_Config+0x40>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143e:	4b04      	ldr	r3, [pc, #16]	@ (8001450 <SysTick_Config+0x40>)
 8001440:	2207      	movs	r2, #7
 8001442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	e000e010 	.word	0xe000e010

08001454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff49 	bl	80012f4 <__NVIC_SetPriorityGrouping>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800147c:	f7ff ff5e 	bl	800133c <__NVIC_GetPriorityGrouping>
 8001480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	6978      	ldr	r0, [r7, #20]
 8001488:	f7ff ff90 	bl	80013ac <NVIC_EncodePriority>
 800148c:	4602      	mov	r2, r0
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff5f 	bl	8001358 <__NVIC_SetPriority>
}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffb0 	bl	8001410 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014bc:	b480      	push	{r7}
 80014be:	b08b      	sub	sp, #44	@ 0x2c
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ce:	e169      	b.n	80017a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014d0:	2201      	movs	r2, #1
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	f040 8158 	bne.w	800179e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4a9a      	ldr	r2, [pc, #616]	@ (800175c <HAL_GPIO_Init+0x2a0>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d05e      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 80014f8:	4a98      	ldr	r2, [pc, #608]	@ (800175c <HAL_GPIO_Init+0x2a0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d875      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 80014fe:	4a98      	ldr	r2, [pc, #608]	@ (8001760 <HAL_GPIO_Init+0x2a4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d058      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001504:	4a96      	ldr	r2, [pc, #600]	@ (8001760 <HAL_GPIO_Init+0x2a4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d86f      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 800150a:	4a96      	ldr	r2, [pc, #600]	@ (8001764 <HAL_GPIO_Init+0x2a8>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d052      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001510:	4a94      	ldr	r2, [pc, #592]	@ (8001764 <HAL_GPIO_Init+0x2a8>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d869      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001516:	4a94      	ldr	r2, [pc, #592]	@ (8001768 <HAL_GPIO_Init+0x2ac>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d04c      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 800151c:	4a92      	ldr	r2, [pc, #584]	@ (8001768 <HAL_GPIO_Init+0x2ac>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d863      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001522:	4a92      	ldr	r2, [pc, #584]	@ (800176c <HAL_GPIO_Init+0x2b0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d046      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001528:	4a90      	ldr	r2, [pc, #576]	@ (800176c <HAL_GPIO_Init+0x2b0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d85d      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 800152e:	2b12      	cmp	r3, #18
 8001530:	d82a      	bhi.n	8001588 <HAL_GPIO_Init+0xcc>
 8001532:	2b12      	cmp	r3, #18
 8001534:	d859      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001536:	a201      	add	r2, pc, #4	@ (adr r2, 800153c <HAL_GPIO_Init+0x80>)
 8001538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153c:	080015b7 	.word	0x080015b7
 8001540:	08001591 	.word	0x08001591
 8001544:	080015a3 	.word	0x080015a3
 8001548:	080015e5 	.word	0x080015e5
 800154c:	080015eb 	.word	0x080015eb
 8001550:	080015eb 	.word	0x080015eb
 8001554:	080015eb 	.word	0x080015eb
 8001558:	080015eb 	.word	0x080015eb
 800155c:	080015eb 	.word	0x080015eb
 8001560:	080015eb 	.word	0x080015eb
 8001564:	080015eb 	.word	0x080015eb
 8001568:	080015eb 	.word	0x080015eb
 800156c:	080015eb 	.word	0x080015eb
 8001570:	080015eb 	.word	0x080015eb
 8001574:	080015eb 	.word	0x080015eb
 8001578:	080015eb 	.word	0x080015eb
 800157c:	080015eb 	.word	0x080015eb
 8001580:	08001599 	.word	0x08001599
 8001584:	080015ad 	.word	0x080015ad
 8001588:	4a79      	ldr	r2, [pc, #484]	@ (8001770 <HAL_GPIO_Init+0x2b4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800158e:	e02c      	b.n	80015ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	623b      	str	r3, [r7, #32]
          break;
 8001596:	e029      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	3304      	adds	r3, #4
 800159e:	623b      	str	r3, [r7, #32]
          break;
 80015a0:	e024      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	3308      	adds	r3, #8
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e01f      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	330c      	adds	r3, #12
 80015b2:	623b      	str	r3, [r7, #32]
          break;
 80015b4:	e01a      	b.n	80015ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015be:	2304      	movs	r3, #4
 80015c0:	623b      	str	r3, [r7, #32]
          break;
 80015c2:	e013      	b.n	80015ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015cc:	2308      	movs	r3, #8
 80015ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	611a      	str	r2, [r3, #16]
          break;
 80015d6:	e009      	b.n	80015ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d8:	2308      	movs	r3, #8
 80015da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	615a      	str	r2, [r3, #20]
          break;
 80015e2:	e003      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	e000      	b.n	80015ec <HAL_GPIO_Init+0x130>
          break;
 80015ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2bff      	cmp	r3, #255	@ 0xff
 80015f0:	d801      	bhi.n	80015f6 <HAL_GPIO_Init+0x13a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	e001      	b.n	80015fa <HAL_GPIO_Init+0x13e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3304      	adds	r3, #4
 80015fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2bff      	cmp	r3, #255	@ 0xff
 8001600:	d802      	bhi.n	8001608 <HAL_GPIO_Init+0x14c>
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	e002      	b.n	800160e <HAL_GPIO_Init+0x152>
 8001608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160a:	3b08      	subs	r3, #8
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	210f      	movs	r1, #15
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	401a      	ands	r2, r3
 8001620:	6a39      	ldr	r1, [r7, #32]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	431a      	orrs	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 80b1 	beq.w	800179e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800163c:	4b4d      	ldr	r3, [pc, #308]	@ (8001774 <HAL_GPIO_Init+0x2b8>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a4c      	ldr	r2, [pc, #304]	@ (8001774 <HAL_GPIO_Init+0x2b8>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b4a      	ldr	r3, [pc, #296]	@ (8001774 <HAL_GPIO_Init+0x2b8>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001654:	4a48      	ldr	r2, [pc, #288]	@ (8001778 <HAL_GPIO_Init+0x2bc>)
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	3302      	adds	r3, #2
 800165c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001660:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a40      	ldr	r2, [pc, #256]	@ (800177c <HAL_GPIO_Init+0x2c0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d013      	beq.n	80016a8 <HAL_GPIO_Init+0x1ec>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a3f      	ldr	r2, [pc, #252]	@ (8001780 <HAL_GPIO_Init+0x2c4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d00d      	beq.n	80016a4 <HAL_GPIO_Init+0x1e8>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a3e      	ldr	r2, [pc, #248]	@ (8001784 <HAL_GPIO_Init+0x2c8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d007      	beq.n	80016a0 <HAL_GPIO_Init+0x1e4>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a3d      	ldr	r2, [pc, #244]	@ (8001788 <HAL_GPIO_Init+0x2cc>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d101      	bne.n	800169c <HAL_GPIO_Init+0x1e0>
 8001698:	2303      	movs	r3, #3
 800169a:	e006      	b.n	80016aa <HAL_GPIO_Init+0x1ee>
 800169c:	2304      	movs	r3, #4
 800169e:	e004      	b.n	80016aa <HAL_GPIO_Init+0x1ee>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e002      	b.n	80016aa <HAL_GPIO_Init+0x1ee>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <HAL_GPIO_Init+0x1ee>
 80016a8:	2300      	movs	r3, #0
 80016aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ac:	f002 0203 	and.w	r2, r2, #3
 80016b0:	0092      	lsls	r2, r2, #2
 80016b2:	4093      	lsls	r3, r2
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ba:	492f      	ldr	r1, [pc, #188]	@ (8001778 <HAL_GPIO_Init+0x2bc>)
 80016bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	3302      	adds	r3, #2
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d006      	beq.n	80016e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016d4:	4b2d      	ldr	r3, [pc, #180]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	492c      	ldr	r1, [pc, #176]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	608b      	str	r3, [r1, #8]
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016e2:	4b2a      	ldr	r3, [pc, #168]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	4928      	ldr	r1, [pc, #160]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d006      	beq.n	800170a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016fc:	4b23      	ldr	r3, [pc, #140]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	4922      	ldr	r1, [pc, #136]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	60cb      	str	r3, [r1, #12]
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800170a:	4b20      	ldr	r3, [pc, #128]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	43db      	mvns	r3, r3
 8001712:	491e      	ldr	r1, [pc, #120]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 8001714:	4013      	ands	r3, r2
 8001716:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001724:	4b19      	ldr	r3, [pc, #100]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	4918      	ldr	r1, [pc, #96]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001732:	4b16      	ldr	r3, [pc, #88]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	43db      	mvns	r3, r3
 800173a:	4914      	ldr	r1, [pc, #80]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 800173c:	4013      	ands	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d021      	beq.n	8001790 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	490e      	ldr	r1, [pc, #56]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
 8001758:	e021      	b.n	800179e <HAL_GPIO_Init+0x2e2>
 800175a:	bf00      	nop
 800175c:	10320000 	.word	0x10320000
 8001760:	10310000 	.word	0x10310000
 8001764:	10220000 	.word	0x10220000
 8001768:	10210000 	.word	0x10210000
 800176c:	10120000 	.word	0x10120000
 8001770:	10110000 	.word	0x10110000
 8001774:	40021000 	.word	0x40021000
 8001778:	40010000 	.word	0x40010000
 800177c:	40010800 	.word	0x40010800
 8001780:	40010c00 	.word	0x40010c00
 8001784:	40011000 	.word	0x40011000
 8001788:	40011400 	.word	0x40011400
 800178c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001790:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <HAL_GPIO_Init+0x304>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	43db      	mvns	r3, r3
 8001798:	4909      	ldr	r1, [pc, #36]	@ (80017c0 <HAL_GPIO_Init+0x304>)
 800179a:	4013      	ands	r3, r2
 800179c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a0:	3301      	adds	r3, #1
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017aa:	fa22 f303 	lsr.w	r3, r2, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f47f ae8e 	bne.w	80014d0 <HAL_GPIO_Init+0x14>
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	372c      	adds	r7, #44	@ 0x2c
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	40010400 	.word	0x40010400

080017c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e12b      	b.n	8001a2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff fc0c 	bl	8001008 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2224      	movs	r2, #36	@ 0x24
 80017f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0201 	bic.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001816:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001826:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001828:	f001 f83e 	bl	80028a8 <HAL_RCC_GetPCLK1Freq>
 800182c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4a81      	ldr	r2, [pc, #516]	@ (8001a38 <HAL_I2C_Init+0x274>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d807      	bhi.n	8001848 <HAL_I2C_Init+0x84>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4a80      	ldr	r2, [pc, #512]	@ (8001a3c <HAL_I2C_Init+0x278>)
 800183c:	4293      	cmp	r3, r2
 800183e:	bf94      	ite	ls
 8001840:	2301      	movls	r3, #1
 8001842:	2300      	movhi	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	e006      	b.n	8001856 <HAL_I2C_Init+0x92>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a40 <HAL_I2C_Init+0x27c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	bf94      	ite	ls
 8001850:	2301      	movls	r3, #1
 8001852:	2300      	movhi	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0e7      	b.n	8001a2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4a78      	ldr	r2, [pc, #480]	@ (8001a44 <HAL_I2C_Init+0x280>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	0c9b      	lsrs	r3, r3, #18
 8001868:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	430a      	orrs	r2, r1
 800187c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4a6a      	ldr	r2, [pc, #424]	@ (8001a38 <HAL_I2C_Init+0x274>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d802      	bhi.n	8001898 <HAL_I2C_Init+0xd4>
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	3301      	adds	r3, #1
 8001896:	e009      	b.n	80018ac <HAL_I2C_Init+0xe8>
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	4a69      	ldr	r2, [pc, #420]	@ (8001a48 <HAL_I2C_Init+0x284>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	099b      	lsrs	r3, r3, #6
 80018aa:	3301      	adds	r3, #1
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	430b      	orrs	r3, r1
 80018b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	495c      	ldr	r1, [pc, #368]	@ (8001a38 <HAL_I2C_Init+0x274>)
 80018c8:	428b      	cmp	r3, r1
 80018ca:	d819      	bhi.n	8001900 <HAL_I2C_Init+0x13c>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1e59      	subs	r1, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80018da:	1c59      	adds	r1, r3, #1
 80018dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018e0:	400b      	ands	r3, r1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00a      	beq.n	80018fc <HAL_I2C_Init+0x138>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1e59      	subs	r1, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f4:	3301      	adds	r3, #1
 80018f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fa:	e051      	b.n	80019a0 <HAL_I2C_Init+0x1dc>
 80018fc:	2304      	movs	r3, #4
 80018fe:	e04f      	b.n	80019a0 <HAL_I2C_Init+0x1dc>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d111      	bne.n	800192c <HAL_I2C_Init+0x168>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1e58      	subs	r0, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	440b      	add	r3, r1
 8001916:	fbb0 f3f3 	udiv	r3, r0, r3
 800191a:	3301      	adds	r3, #1
 800191c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf0c      	ite	eq
 8001924:	2301      	moveq	r3, #1
 8001926:	2300      	movne	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	e012      	b.n	8001952 <HAL_I2C_Init+0x18e>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1e58      	subs	r0, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	0099      	lsls	r1, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001942:	3301      	adds	r3, #1
 8001944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf0c      	ite	eq
 800194c:	2301      	moveq	r3, #1
 800194e:	2300      	movne	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_I2C_Init+0x196>
 8001956:	2301      	movs	r3, #1
 8001958:	e022      	b.n	80019a0 <HAL_I2C_Init+0x1dc>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10e      	bne.n	8001980 <HAL_I2C_Init+0x1bc>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1e58      	subs	r0, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6859      	ldr	r1, [r3, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	440b      	add	r3, r1
 8001970:	fbb0 f3f3 	udiv	r3, r0, r3
 8001974:	3301      	adds	r3, #1
 8001976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800197a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800197e:	e00f      	b.n	80019a0 <HAL_I2C_Init+0x1dc>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1e58      	subs	r0, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6859      	ldr	r1, [r3, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	0099      	lsls	r1, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	fbb0 f3f3 	udiv	r3, r0, r3
 8001996:	3301      	adds	r3, #1
 8001998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800199c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	6809      	ldr	r1, [r1, #0]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69da      	ldr	r2, [r3, #28]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6911      	ldr	r1, [r2, #16]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68d2      	ldr	r2, [r2, #12]
 80019da:	4311      	orrs	r1, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	430b      	orrs	r3, r1
 80019e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	000186a0 	.word	0x000186a0
 8001a3c:	001e847f 	.word	0x001e847f
 8001a40:	003d08ff 	.word	0x003d08ff
 8001a44:	431bde83 	.word	0x431bde83
 8001a48:	10624dd3 	.word	0x10624dd3

08001a4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af02      	add	r7, sp, #8
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	461a      	mov	r2, r3
 8001a58:	460b      	mov	r3, r1
 8001a5a:	817b      	strh	r3, [r7, #10]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff fc1a 	bl	8001298 <HAL_GetTick>
 8001a64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b20      	cmp	r3, #32
 8001a70:	f040 80e0 	bne.w	8001c34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2319      	movs	r3, #25
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4970      	ldr	r1, [pc, #448]	@ (8001c40 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 f964 	bl	8001d4c <I2C_WaitOnFlagUntilTimeout>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e0d3      	b.n	8001c36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_I2C_Master_Transmit+0x50>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e0cc      	b.n	8001c36 <HAL_I2C_Master_Transmit+0x1ea>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d007      	beq.n	8001ac2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0201 	orr.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ad0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2221      	movs	r2, #33	@ 0x21
 8001ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2210      	movs	r2, #16
 8001ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	893a      	ldrh	r2, [r7, #8]
 8001af2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4a50      	ldr	r2, [pc, #320]	@ (8001c44 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b02:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b04:	8979      	ldrh	r1, [r7, #10]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	6a3a      	ldr	r2, [r7, #32]
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 f89c 	bl	8001c48 <I2C_MasterRequestWrite>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e08d      	b.n	8001c36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b30:	e066      	b.n	8001c00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	6a39      	ldr	r1, [r7, #32]
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fa22 	bl	8001f80 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00d      	beq.n	8001b5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d107      	bne.n	8001b5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e06b      	b.n	8001c36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_I2C_Master_Transmit+0x188>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d017      	beq.n	8001bd4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba8:	781a      	ldrb	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	6a39      	ldr	r1, [r7, #32]
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 fa19 	bl	8002010 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00d      	beq.n	8001c00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d107      	bne.n	8001bfc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bfa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e01a      	b.n	8001c36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d194      	bne.n	8001b32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	e000      	b.n	8001c36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c34:	2302      	movs	r3, #2
  }
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	00100002 	.word	0x00100002
 8001c44:	ffff0000 	.word	0xffff0000

08001c48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	460b      	mov	r3, r1
 8001c56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d006      	beq.n	8001c72 <I2C_MasterRequestWrite+0x2a>
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d003      	beq.n	8001c72 <I2C_MasterRequestWrite+0x2a>
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c70:	d108      	bne.n	8001c84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	e00b      	b.n	8001c9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c88:	2b12      	cmp	r3, #18
 8001c8a:	d107      	bne.n	8001c9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 f84f 	bl	8001d4c <I2C_WaitOnFlagUntilTimeout>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00d      	beq.n	8001cd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cc2:	d103      	bne.n	8001ccc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e035      	b.n	8001d3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001cd8:	d108      	bne.n	8001cec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cda:	897b      	ldrh	r3, [r7, #10]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ce8:	611a      	str	r2, [r3, #16]
 8001cea:	e01b      	b.n	8001d24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cec:	897b      	ldrh	r3, [r7, #10]
 8001cee:	11db      	asrs	r3, r3, #7
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f003 0306 	and.w	r3, r3, #6
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f063 030f 	orn	r3, r3, #15
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	490e      	ldr	r1, [pc, #56]	@ (8001d44 <I2C_MasterRequestWrite+0xfc>)
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 f898 	bl	8001e40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e010      	b.n	8001d3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d1a:	897b      	ldrh	r3, [r7, #10]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4907      	ldr	r1, [pc, #28]	@ (8001d48 <I2C_MasterRequestWrite+0x100>)
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f888 	bl	8001e40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	00010008 	.word	0x00010008
 8001d48:	00010002 	.word	0x00010002

08001d4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d5c:	e048      	b.n	8001df0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d64:	d044      	beq.n	8001df0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d66:	f7ff fa97 	bl	8001298 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d302      	bcc.n	8001d7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d139      	bne.n	8001df0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	0c1b      	lsrs	r3, r3, #16
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d10d      	bne.n	8001da2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	43da      	mvns	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	4013      	ands	r3, r2
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	e00c      	b.n	8001dbc <I2C_WaitOnFlagUntilTimeout+0x70>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	43da      	mvns	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	4013      	ands	r3, r2
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d116      	bne.n	8001df0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ddc:	f043 0220 	orr.w	r2, r3, #32
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e023      	b.n	8001e38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	0c1b      	lsrs	r3, r3, #16
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d10d      	bne.n	8001e16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	43da      	mvns	r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	4013      	ands	r3, r2
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	bf0c      	ite	eq
 8001e0c:	2301      	moveq	r3, #1
 8001e0e:	2300      	movne	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	e00c      	b.n	8001e30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	4013      	ands	r3, r2
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d093      	beq.n	8001d5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e4e:	e071      	b.n	8001f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e5e:	d123      	bne.n	8001ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	f043 0204 	orr.w	r2, r3, #4
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e067      	b.n	8001f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eae:	d041      	beq.n	8001f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb0:	f7ff f9f2 	bl	8001298 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d302      	bcc.n	8001ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d136      	bne.n	8001f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	0c1b      	lsrs	r3, r3, #16
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d10c      	bne.n	8001eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4013      	ands	r3, r2
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	bf14      	ite	ne
 8001ee2:	2301      	movne	r3, #1
 8001ee4:	2300      	moveq	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	e00b      	b.n	8001f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	43da      	mvns	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf14      	ite	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	2300      	moveq	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d016      	beq.n	8001f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	f043 0220 	orr.w	r2, r3, #32
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e021      	b.n	8001f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	0c1b      	lsrs	r3, r3, #16
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d10c      	bne.n	8001f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	43da      	mvns	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf14      	ite	ne
 8001f50:	2301      	movne	r3, #1
 8001f52:	2300      	moveq	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	e00b      	b.n	8001f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4013      	ands	r3, r2
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf14      	ite	ne
 8001f6a:	2301      	movne	r3, #1
 8001f6c:	2300      	moveq	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f47f af6d 	bne.w	8001e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f8c:	e034      	b.n	8001ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f886 	bl	80020a0 <I2C_IsAcknowledgeFailed>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e034      	b.n	8002008 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d028      	beq.n	8001ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa6:	f7ff f977 	bl	8001298 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d302      	bcc.n	8001fbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d11d      	bne.n	8001ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc6:	2b80      	cmp	r3, #128	@ 0x80
 8001fc8:	d016      	beq.n	8001ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe4:	f043 0220 	orr.w	r2, r3, #32
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e007      	b.n	8002008 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002002:	2b80      	cmp	r3, #128	@ 0x80
 8002004:	d1c3      	bne.n	8001f8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800201c:	e034      	b.n	8002088 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f83e 	bl	80020a0 <I2C_IsAcknowledgeFailed>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e034      	b.n	8002098 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002034:	d028      	beq.n	8002088 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002036:	f7ff f92f 	bl	8001298 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	429a      	cmp	r2, r3
 8002044:	d302      	bcc.n	800204c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d11d      	bne.n	8002088 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b04      	cmp	r3, #4
 8002058:	d016      	beq.n	8002088 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	f043 0220 	orr.w	r2, r3, #32
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e007      	b.n	8002098 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b04      	cmp	r3, #4
 8002094:	d1c3      	bne.n	800201e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020b6:	d11b      	bne.n	80020f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	f043 0204 	orr.w	r2, r3, #4
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002100:	4b03      	ldr	r3, [pc, #12]	@ (8002110 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	420e0020 	.word	0x420e0020

08002114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e272      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 8087 	beq.w	8002242 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002134:	4b92      	ldr	r3, [pc, #584]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b04      	cmp	r3, #4
 800213e:	d00c      	beq.n	800215a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002140:	4b8f      	ldr	r3, [pc, #572]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b08      	cmp	r3, #8
 800214a:	d112      	bne.n	8002172 <HAL_RCC_OscConfig+0x5e>
 800214c:	4b8c      	ldr	r3, [pc, #560]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002158:	d10b      	bne.n	8002172 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215a:	4b89      	ldr	r3, [pc, #548]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d06c      	beq.n	8002240 <HAL_RCC_OscConfig+0x12c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d168      	bne.n	8002240 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e24c      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x76>
 800217c:	4b80      	ldr	r3, [pc, #512]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a7f      	ldr	r2, [pc, #508]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	e02e      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x98>
 8002192:	4b7b      	ldr	r3, [pc, #492]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a7a      	ldr	r2, [pc, #488]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b78      	ldr	r3, [pc, #480]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a77      	ldr	r2, [pc, #476]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e01d      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0xbc>
 80021b6:	4b72      	ldr	r3, [pc, #456]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a71      	ldr	r2, [pc, #452]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e00b      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 80021d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b68      	ldr	r3, [pc, #416]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a67      	ldr	r2, [pc, #412]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7ff f852 	bl	8001298 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff f84e 	bl	8001298 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	@ 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e200      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	4b5d      	ldr	r3, [pc, #372]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0xe4>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff f83e 	bl	8001298 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7ff f83a 	bl	8001298 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	@ 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1ec      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002232:	4b53      	ldr	r3, [pc, #332]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x10c>
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d063      	beq.n	8002316 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800224e:	4b4c      	ldr	r3, [pc, #304]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800225a:	4b49      	ldr	r3, [pc, #292]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b08      	cmp	r3, #8
 8002264:	d11c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x18c>
 8002266:	4b46      	ldr	r3, [pc, #280]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d116      	bne.n	80022a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002272:	4b43      	ldr	r3, [pc, #268]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_RCC_OscConfig+0x176>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d001      	beq.n	800228a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e1c0      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	4b3d      	ldr	r3, [pc, #244]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4939      	ldr	r1, [pc, #228]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	e03a      	b.n	8002316 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d020      	beq.n	80022ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a8:	4b36      	ldr	r3, [pc, #216]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ae:	f7fe fff3 	bl	8001298 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b6:	f7fe ffef 	bl	8001298 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e1a1      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4927      	ldr	r1, [pc, #156]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	600b      	str	r3, [r1, #0]
 80022e8:	e015      	b.n	8002316 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ea:	4b26      	ldr	r3, [pc, #152]	@ (8002384 <HAL_RCC_OscConfig+0x270>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7fe ffd2 	bl	8001298 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f8:	f7fe ffce 	bl	8001298 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e180      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230a:	4b1d      	ldr	r3, [pc, #116]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d03a      	beq.n	8002398 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d019      	beq.n	800235e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232a:	4b17      	ldr	r3, [pc, #92]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 800232c:	2201      	movs	r2, #1
 800232e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002330:	f7fe ffb2 	bl	8001298 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002338:	f7fe ffae 	bl	8001298 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e160      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234a:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <HAL_RCC_OscConfig+0x26c>)
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002356:	2001      	movs	r0, #1
 8002358:	f000 face 	bl	80028f8 <RCC_Delay>
 800235c:	e01c      	b.n	8002398 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800235e:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <HAL_RCC_OscConfig+0x274>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002364:	f7fe ff98 	bl	8001298 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236a:	e00f      	b.n	800238c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236c:	f7fe ff94 	bl	8001298 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d908      	bls.n	800238c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e146      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	42420000 	.word	0x42420000
 8002388:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238c:	4b92      	ldr	r3, [pc, #584]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1e9      	bne.n	800236c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80a6 	beq.w	80024f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a6:	2300      	movs	r3, #0
 80023a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023aa:	4b8b      	ldr	r3, [pc, #556]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10d      	bne.n	80023d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	4b88      	ldr	r3, [pc, #544]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4a87      	ldr	r2, [pc, #540]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c0:	61d3      	str	r3, [r2, #28]
 80023c2:	4b85      	ldr	r3, [pc, #532]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ce:	2301      	movs	r3, #1
 80023d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d2:	4b82      	ldr	r3, [pc, #520]	@ (80025dc <HAL_RCC_OscConfig+0x4c8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d118      	bne.n	8002410 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023de:	4b7f      	ldr	r3, [pc, #508]	@ (80025dc <HAL_RCC_OscConfig+0x4c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a7e      	ldr	r2, [pc, #504]	@ (80025dc <HAL_RCC_OscConfig+0x4c8>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ea:	f7fe ff55 	bl	8001298 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f2:	f7fe ff51 	bl	8001298 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b64      	cmp	r3, #100	@ 0x64
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e103      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	4b75      	ldr	r3, [pc, #468]	@ (80025dc <HAL_RCC_OscConfig+0x4c8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x312>
 8002418:	4b6f      	ldr	r3, [pc, #444]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a6e      	ldr	r2, [pc, #440]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	e02d      	b.n	8002482 <HAL_RCC_OscConfig+0x36e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x334>
 800242e:	4b6a      	ldr	r3, [pc, #424]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4a69      	ldr	r2, [pc, #420]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	6213      	str	r3, [r2, #32]
 800243a:	4b67      	ldr	r3, [pc, #412]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4a66      	ldr	r2, [pc, #408]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	f023 0304 	bic.w	r3, r3, #4
 8002444:	6213      	str	r3, [r2, #32]
 8002446:	e01c      	b.n	8002482 <HAL_RCC_OscConfig+0x36e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b05      	cmp	r3, #5
 800244e:	d10c      	bne.n	800246a <HAL_RCC_OscConfig+0x356>
 8002450:	4b61      	ldr	r3, [pc, #388]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4a60      	ldr	r2, [pc, #384]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	6213      	str	r3, [r2, #32]
 800245c:	4b5e      	ldr	r3, [pc, #376]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4a5d      	ldr	r2, [pc, #372]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6213      	str	r3, [r2, #32]
 8002468:	e00b      	b.n	8002482 <HAL_RCC_OscConfig+0x36e>
 800246a:	4b5b      	ldr	r3, [pc, #364]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4a5a      	ldr	r2, [pc, #360]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	6213      	str	r3, [r2, #32]
 8002476:	4b58      	ldr	r3, [pc, #352]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	4a57      	ldr	r2, [pc, #348]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	f023 0304 	bic.w	r3, r3, #4
 8002480:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d015      	beq.n	80024b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7fe ff05 	bl	8001298 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7fe ff01 	bl	8001298 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e0b1      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	4b4b      	ldr	r3, [pc, #300]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ee      	beq.n	8002492 <HAL_RCC_OscConfig+0x37e>
 80024b4:	e014      	b.n	80024e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b6:	f7fe feef 	bl	8001298 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7fe feeb 	bl	8001298 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e09b      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	4b40      	ldr	r3, [pc, #256]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1ee      	bne.n	80024be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d105      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e6:	4b3c      	ldr	r3, [pc, #240]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4a3b      	ldr	r2, [pc, #236]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8087 	beq.w	800260a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024fc:	4b36      	ldr	r3, [pc, #216]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b08      	cmp	r3, #8
 8002506:	d061      	beq.n	80025cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d146      	bne.n	800259e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002510:	4b33      	ldr	r3, [pc, #204]	@ (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7fe febf 	bl	8001298 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251e:	f7fe febb 	bl	8001298 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e06d      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002530:	4b29      	ldr	r3, [pc, #164]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f0      	bne.n	800251e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002544:	d108      	bne.n	8002558 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002546:	4b24      	ldr	r3, [pc, #144]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4921      	ldr	r1, [pc, #132]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002558:	4b1f      	ldr	r3, [pc, #124]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a19      	ldr	r1, [r3, #32]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	430b      	orrs	r3, r1
 800256a:	491b      	ldr	r1, [pc, #108]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002570:	4b1b      	ldr	r3, [pc, #108]	@ (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002576:	f7fe fe8f 	bl	8001298 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257e:	f7fe fe8b 	bl	8001298 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e03d      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002590:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x46a>
 800259c:	e035      	b.n	800260a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7fe fe78 	bl	8001298 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ac:	f7fe fe74 	bl	8001298 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e026      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025be:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x498>
 80025ca:	e01e      	b.n	800260a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e019      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40007000 	.word	0x40007000
 80025e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <HAL_RCC_OscConfig+0x500>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d001      	beq.n	800260a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000

08002618 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0d0      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800262c:	4b6a      	ldr	r3, [pc, #424]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d910      	bls.n	800265c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b67      	ldr	r3, [pc, #412]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 0207 	bic.w	r2, r3, #7
 8002642:	4965      	ldr	r1, [pc, #404]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b63      	ldr	r3, [pc, #396]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0b8      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d020      	beq.n	80026aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002674:	4b59      	ldr	r3, [pc, #356]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a58      	ldr	r2, [pc, #352]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800267e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800268c:	4b53      	ldr	r3, [pc, #332]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4a52      	ldr	r2, [pc, #328]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002696:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002698:	4b50      	ldr	r3, [pc, #320]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	494d      	ldr	r1, [pc, #308]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d040      	beq.n	8002738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b47      	ldr	r3, [pc, #284]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d115      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e07f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d6:	4b41      	ldr	r3, [pc, #260]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e073      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e6:	4b3d      	ldr	r3, [pc, #244]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e06b      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f6:	4b39      	ldr	r3, [pc, #228]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f023 0203 	bic.w	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4936      	ldr	r1, [pc, #216]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002708:	f7fe fdc6 	bl	8001298 <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	e00a      	b.n	8002726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002710:	f7fe fdc2 	bl	8001298 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e053      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	4b2d      	ldr	r3, [pc, #180]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 020c 	and.w	r2, r3, #12
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	429a      	cmp	r2, r3
 8002736:	d1eb      	bne.n	8002710 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002738:	4b27      	ldr	r3, [pc, #156]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d210      	bcs.n	8002768 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b24      	ldr	r3, [pc, #144]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 0207 	bic.w	r2, r3, #7
 800274e:	4922      	ldr	r1, [pc, #136]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b20      	ldr	r3, [pc, #128]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e032      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002774:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4916      	ldr	r1, [pc, #88]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002792:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	490e      	ldr	r1, [pc, #56]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027a6:	f000 f821 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 80027aa:	4602      	mov	r2, r0
 80027ac:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	490a      	ldr	r1, [pc, #40]	@ (80027e0 <HAL_RCC_ClockConfig+0x1c8>)
 80027b8:	5ccb      	ldrb	r3, [r1, r3]
 80027ba:	fa22 f303 	lsr.w	r3, r2, r3
 80027be:	4a09      	ldr	r2, [pc, #36]	@ (80027e4 <HAL_RCC_ClockConfig+0x1cc>)
 80027c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027c2:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <HAL_RCC_ClockConfig+0x1d0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fd24 	bl	8001214 <HAL_InitTick>

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40022000 	.word	0x40022000
 80027dc:	40021000 	.word	0x40021000
 80027e0:	08004664 	.word	0x08004664
 80027e4:	20000008 	.word	0x20000008
 80027e8:	2000000c 	.word	0x2000000c

080027ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002806:	4b1e      	ldr	r3, [pc, #120]	@ (8002880 <HAL_RCC_GetSysClockFreq+0x94>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d002      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x30>
 8002816:	2b08      	cmp	r3, #8
 8002818:	d003      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x36>
 800281a:	e027      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800281c:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x98>)
 800281e:	613b      	str	r3, [r7, #16]
      break;
 8002820:	e027      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	0c9b      	lsrs	r3, r3, #18
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	4a17      	ldr	r2, [pc, #92]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x9c>)
 800282c:	5cd3      	ldrb	r3, [r2, r3]
 800282e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d010      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800283a:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <HAL_RCC_GetSysClockFreq+0x94>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	0c5b      	lsrs	r3, r3, #17
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	4a11      	ldr	r2, [pc, #68]	@ (800288c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a0d      	ldr	r2, [pc, #52]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x98>)
 800284e:	fb03 f202 	mul.w	r2, r3, r2
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e004      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a0c      	ldr	r2, [pc, #48]	@ (8002890 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	613b      	str	r3, [r7, #16]
      break;
 800286a:	e002      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800286c:	4b05      	ldr	r3, [pc, #20]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x98>)
 800286e:	613b      	str	r3, [r7, #16]
      break;
 8002870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002872:	693b      	ldr	r3, [r7, #16]
}
 8002874:	4618      	mov	r0, r3
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	007a1200 	.word	0x007a1200
 8002888:	0800467c 	.word	0x0800467c
 800288c:	0800468c 	.word	0x0800468c
 8002890:	003d0900 	.word	0x003d0900

08002894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002898:	4b02      	ldr	r3, [pc, #8]	@ (80028a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	20000008 	.word	0x20000008

080028a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028ac:	f7ff fff2 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4b05      	ldr	r3, [pc, #20]	@ (80028c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	4903      	ldr	r1, [pc, #12]	@ (80028cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028be:	5ccb      	ldrb	r3, [r1, r3]
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	08004674 	.word	0x08004674

080028d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028d4:	f7ff ffde 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	0adb      	lsrs	r3, r3, #11
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4903      	ldr	r1, [pc, #12]	@ (80028f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000
 80028f4:	08004674 	.word	0x08004674

080028f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002900:	4b0a      	ldr	r3, [pc, #40]	@ (800292c <RCC_Delay+0x34>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0a      	ldr	r2, [pc, #40]	@ (8002930 <RCC_Delay+0x38>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	0a5b      	lsrs	r3, r3, #9
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002914:	bf00      	nop
  }
  while (Delay --);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1e5a      	subs	r2, r3, #1
 800291a:	60fa      	str	r2, [r7, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f9      	bne.n	8002914 <RCC_Delay+0x1c>
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	20000008 	.word	0x20000008
 8002930:	10624dd3 	.word	0x10624dd3

08002934 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d07d      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002950:	2300      	movs	r3, #0
 8002952:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002954:	4b4f      	ldr	r3, [pc, #316]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10d      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002960:	4b4c      	ldr	r3, [pc, #304]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	4a4b      	ldr	r2, [pc, #300]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800296a:	61d3      	str	r3, [r2, #28]
 800296c:	4b49      	ldr	r3, [pc, #292]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002978:	2301      	movs	r3, #1
 800297a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297c:	4b46      	ldr	r3, [pc, #280]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d118      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002988:	4b43      	ldr	r3, [pc, #268]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a42      	ldr	r2, [pc, #264]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800298e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002992:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002994:	f7fe fc80 	bl	8001298 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299a:	e008      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299c:	f7fe fc7c 	bl	8001298 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b64      	cmp	r3, #100	@ 0x64
 80029a8:	d901      	bls.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e06d      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029ba:	4b36      	ldr	r3, [pc, #216]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d02e      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d027      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029e2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029e8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029ee:	4a29      	ldr	r2, [pc, #164]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d014      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fe:	f7fe fc4b 	bl	8001298 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fe fc47 	bl	8001298 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e036      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ee      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a28:	4b1a      	ldr	r3, [pc, #104]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4917      	ldr	r1, [pc, #92]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a3a:	7dfb      	ldrb	r3, [r7, #23]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a40:	4b14      	ldr	r3, [pc, #80]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	4a13      	ldr	r2, [pc, #76]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a58:	4b0e      	ldr	r3, [pc, #56]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	490b      	ldr	r1, [pc, #44]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a76:	4b07      	ldr	r3, [pc, #28]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4904      	ldr	r1, [pc, #16]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40007000 	.word	0x40007000
 8002a9c:	42420440 	.word	0x42420440

08002aa0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	2300      	movs	r3, #0
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b10      	cmp	r3, #16
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	f200 808a 	bhi.w	8002bde <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d045      	beq.n	8002b5c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d075      	beq.n	8002bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002ad6:	e082      	b.n	8002bde <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002ad8:	4b46      	ldr	r3, [pc, #280]	@ (8002bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002ade:	4b45      	ldr	r3, [pc, #276]	@ (8002bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d07b      	beq.n	8002be2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	0c9b      	lsrs	r3, r3, #18
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	4a41      	ldr	r2, [pc, #260]	@ (8002bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002af4:	5cd3      	ldrb	r3, [r2, r3]
 8002af6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d015      	beq.n	8002b2e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b02:	4b3c      	ldr	r3, [pc, #240]	@ (8002bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	0c5b      	lsrs	r3, r3, #17
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	4a3b      	ldr	r2, [pc, #236]	@ (8002bfc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00d      	beq.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002b1c:	4a38      	ldr	r2, [pc, #224]	@ (8002c00 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	61fb      	str	r3, [r7, #28]
 8002b2c:	e004      	b.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4a34      	ldr	r2, [pc, #208]	@ (8002c04 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002b32:	fb02 f303 	mul.w	r3, r2, r3
 8002b36:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002b38:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b44:	d102      	bne.n	8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	61bb      	str	r3, [r7, #24]
      break;
 8002b4a:	e04a      	b.n	8002be2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4a2d      	ldr	r2, [pc, #180]	@ (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b52:	fba2 2303 	umull	r2, r3, r2, r3
 8002b56:	085b      	lsrs	r3, r3, #1
 8002b58:	61bb      	str	r3, [r7, #24]
      break;
 8002b5a:	e042      	b.n	8002be2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002b5c:	4b25      	ldr	r3, [pc, #148]	@ (8002bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b6c:	d108      	bne.n	8002b80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002b78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	e01f      	b.n	8002bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b8a:	d109      	bne.n	8002ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002b8c:	4b19      	ldr	r3, [pc, #100]	@ (8002bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002b98:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	e00f      	b.n	8002bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002baa:	d11c      	bne.n	8002be6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002bac:	4b11      	ldr	r3, [pc, #68]	@ (8002bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d016      	beq.n	8002be6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002bb8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002bbc:	61bb      	str	r3, [r7, #24]
      break;
 8002bbe:	e012      	b.n	8002be6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002bc0:	e011      	b.n	8002be6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002bc2:	f7ff fe85 	bl	80028d0 <HAL_RCC_GetPCLK2Freq>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	0b9b      	lsrs	r3, r3, #14
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bda:	61bb      	str	r3, [r7, #24]
      break;
 8002bdc:	e004      	b.n	8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002bde:	bf00      	nop
 8002be0:	e002      	b.n	8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002be2:	bf00      	nop
 8002be4:	e000      	b.n	8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002be6:	bf00      	nop
    }
  }
  return (frequency);
 8002be8:	69bb      	ldr	r3, [r7, #24]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3720      	adds	r7, #32
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08004690 	.word	0x08004690
 8002bfc:	080046a0 	.word	0x080046a0
 8002c00:	007a1200 	.word	0x007a1200
 8002c04:	003d0900 	.word	0x003d0900
 8002c08:	aaaaaaab 	.word	0xaaaaaaab

08002c0c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e07a      	b.n	8002d18 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7c5b      	ldrb	r3, [r3, #17]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d105      	bne.n	8002c38 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fe fa26 	bl	8001084 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fb2f 	bl	80032a2 <HAL_RTC_WaitForSynchro>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d004      	beq.n	8002c54 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e061      	b.n	8002d18 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fbe8 	bl	800342a <RTC_EnterInitMode>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d004      	beq.n	8002c6a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2204      	movs	r2, #4
 8002c64:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e056      	b.n	8002d18 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0207 	bic.w	r2, r2, #7
 8002c78:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002c82:	4b27      	ldr	r3, [pc, #156]	@ (8002d20 <HAL_RTC_Init+0x114>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	4a26      	ldr	r2, [pc, #152]	@ (8002d20 <HAL_RTC_Init+0x114>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002c8e:	4b24      	ldr	r3, [pc, #144]	@ (8002d20 <HAL_RTC_Init+0x114>)
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	4921      	ldr	r1, [pc, #132]	@ (8002d20 <HAL_RTC_Init+0x114>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca8:	d003      	beq.n	8002cb2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	e00e      	b.n	8002cd0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f7ff fef4 	bl	8002aa0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002cb8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d104      	bne.n	8002cca <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e026      	b.n	8002d18 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	0c1a      	lsrs	r2, r3, #16
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f002 020f 	and.w	r2, r2, #15
 8002cdc:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	b292      	uxth	r2, r2
 8002ce6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fbc6 	bl	800347a <RTC_ExitInitMode>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d004      	beq.n	8002cfe <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00c      	b.n	8002d18 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002d16:	2300      	movs	r3, #0
  }
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40006c00 	.word	0x40006c00

08002d24 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	2300      	movs	r3, #0
 8002d36:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_RTC_SetTime+0x20>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e080      	b.n	8002e4a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	7c1b      	ldrb	r3, [r3, #16]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_RTC_SetTime+0x30>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e07a      	b.n	8002e4a <HAL_RTC_SetTime+0x126>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d113      	bne.n	8002d8e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002d70:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	785b      	ldrb	r3, [r3, #1]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a5b      	subs	r3, r3, r1
 8002d80:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002d82:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002d88:	4413      	add	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	e01e      	b.n	8002dcc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fbb6 	bl	8003504 <RTC_Bcd2ToByte>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002da0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	785b      	ldrb	r3, [r3, #1]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fbab 	bl	8003504 <RTC_Bcd2ToByte>
 8002dae:	4603      	mov	r3, r0
 8002db0:	461a      	mov	r2, r3
 8002db2:	4613      	mov	r3, r2
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002dba:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	789b      	ldrb	r3, [r3, #2]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fb9f 	bl	8003504 <RTC_Bcd2ToByte>
 8002dc6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002dc8:	4423      	add	r3, r4
 8002dca:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002dcc:	6979      	ldr	r1, [r7, #20]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 fac4 	bl	800335c <RTC_WriteTimeCounter>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2204      	movs	r2, #4
 8002dde:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e02f      	b.n	8002e4a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0205 	bic.w	r2, r2, #5
 8002df8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fad5 	bl	80033aa <RTC_ReadAlarmCounter>
 8002e00:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e08:	d018      	beq.n	8002e3c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d214      	bcs.n	8002e3c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8002e18:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002e1c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002e1e:	6939      	ldr	r1, [r7, #16]
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fadb 	bl	80033dc <RTC_WriteAlarmCounter>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2204      	movs	r2, #4
 8002e30:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e006      	b.n	8002e4a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002e48:	2300      	movs	r3, #0
  }
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd90      	pop	{r4, r7, pc}
	...

08002e54 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	2300      	movs	r3, #0
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_RTC_GetTime+0x28>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0b5      	b.n	8002fec <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e0ac      	b.n	8002fec <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fa32 	bl	80032fc <RTC_ReadTimeCounter>
 8002e98:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	4a55      	ldr	r2, [pc, #340]	@ (8002ff4 <HAL_RTC_GetTime+0x1a0>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	0adb      	lsrs	r3, r3, #11
 8002ea4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4b52      	ldr	r3, [pc, #328]	@ (8002ff4 <HAL_RTC_GetTime+0x1a0>)
 8002eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8002eae:	0adb      	lsrs	r3, r3, #11
 8002eb0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	4a4f      	ldr	r2, [pc, #316]	@ (8002ff8 <HAL_RTC_GetTime+0x1a4>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	4a4a      	ldr	r2, [pc, #296]	@ (8002ff4 <HAL_RTC_GetTime+0x1a0>)
 8002ecc:	fba2 1203 	umull	r1, r2, r2, r3
 8002ed0:	0ad2      	lsrs	r2, r2, #11
 8002ed2:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002ed6:	fb01 f202 	mul.w	r2, r1, r2
 8002eda:	1a9a      	subs	r2, r3, r2
 8002edc:	4b46      	ldr	r3, [pc, #280]	@ (8002ff8 <HAL_RTC_GetTime+0x1a4>)
 8002ede:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee2:	0959      	lsrs	r1, r3, #5
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a5b      	subs	r3, r3, r1
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	1ad1      	subs	r1, r2, r3
 8002eee:	b2ca      	uxtb	r2, r1
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b17      	cmp	r3, #23
 8002ef8:	d955      	bls.n	8002fa6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4a3f      	ldr	r2, [pc, #252]	@ (8002ffc <HAL_RTC_GetTime+0x1a8>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002f06:	6939      	ldr	r1, [r7, #16]
 8002f08:	4b3c      	ldr	r3, [pc, #240]	@ (8002ffc <HAL_RTC_GetTime+0x1a8>)
 8002f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f0e:	091a      	lsrs	r2, r3, #4
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	1aca      	subs	r2, r1, r3
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fa42 	bl	80033aa <RTC_ReadAlarmCounter>
 8002f26:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2e:	d008      	beq.n	8002f42 <HAL_RTC_GetTime+0xee>
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d904      	bls.n	8002f42 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	e002      	b.n	8002f48 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
 8002f46:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	4a2d      	ldr	r2, [pc, #180]	@ (8003000 <HAL_RTC_GetTime+0x1ac>)
 8002f4c:	fb02 f303 	mul.w	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002f56:	69b9      	ldr	r1, [r7, #24]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f9ff 	bl	800335c <RTC_WriteTimeCounter>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e041      	b.n	8002fec <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6e:	d00c      	beq.n	8002f8a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	4413      	add	r3, r2
 8002f76:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002f78:	69f9      	ldr	r1, [r7, #28]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fa2e 	bl	80033dc <RTC_WriteAlarmCounter>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e030      	b.n	8002fec <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002f8a:	69f9      	ldr	r1, [r7, #28]
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fa25 	bl	80033dc <RTC_WriteAlarmCounter>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e027      	b.n	8002fec <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002f9c:	6979      	ldr	r1, [r7, #20]
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 facd 	bl	800353e <RTC_DateUpdate>
 8002fa4:	e003      	b.n	8002fae <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01a      	beq.n	8002fea <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fa86 	bl	80034ca <RTC_ByteToBcd2>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	785b      	ldrb	r3, [r3, #1]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fa7d 	bl	80034ca <RTC_ByteToBcd2>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	789b      	ldrb	r3, [r3, #2]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fa74 	bl	80034ca <RTC_ByteToBcd2>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3720      	adds	r7, #32
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	91a2b3c5 	.word	0x91a2b3c5
 8002ff8:	88888889 	.word	0x88888889
 8002ffc:	aaaaaaab 	.word	0xaaaaaaab
 8003000:	00015180 	.word	0x00015180

08003004 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	61fb      	str	r3, [r7, #28]
 8003014:	2300      	movs	r3, #0
 8003016:	61bb      	str	r3, [r7, #24]
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_RTC_SetDate+0x24>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e097      	b.n	800315c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	7c1b      	ldrb	r3, [r3, #16]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_RTC_SetDate+0x34>
 8003034:	2302      	movs	r3, #2
 8003036:	e091      	b.n	800315c <HAL_RTC_SetDate+0x158>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2202      	movs	r2, #2
 8003042:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10c      	bne.n	8003064 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	78da      	ldrb	r2, [r3, #3]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	785a      	ldrb	r2, [r3, #1]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	789a      	ldrb	r2, [r3, #2]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	739a      	strb	r2, [r3, #14]
 8003062:	e01a      	b.n	800309a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	78db      	ldrb	r3, [r3, #3]
 8003068:	4618      	mov	r0, r3
 800306a:	f000 fa4b 	bl	8003504 <RTC_Bcd2ToByte>
 800306e:	4603      	mov	r3, r0
 8003070:	461a      	mov	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fa42 	bl	8003504 <RTC_Bcd2ToByte>
 8003080:	4603      	mov	r3, r0
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	789b      	ldrb	r3, [r3, #2]
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fa39 	bl	8003504 <RTC_Bcd2ToByte>
 8003092:	4603      	mov	r3, r0
 8003094:	461a      	mov	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	7bdb      	ldrb	r3, [r3, #15]
 800309e:	4618      	mov	r0, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	7b59      	ldrb	r1, [r3, #13]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	7b9b      	ldrb	r3, [r3, #14]
 80030a8:	461a      	mov	r2, r3
 80030aa:	f000 fb23 	bl	80036f4 <RTC_WeekDayNum>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461a      	mov	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	7b1a      	ldrb	r2, [r3, #12]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f91c 	bl	80032fc <RTC_ReadTimeCounter>
 80030c4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	4a26      	ldr	r2, [pc, #152]	@ (8003164 <HAL_RTC_SetDate+0x160>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	0adb      	lsrs	r3, r3, #11
 80030d0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b18      	cmp	r3, #24
 80030d6:	d93a      	bls.n	800314e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	4a23      	ldr	r2, [pc, #140]	@ (8003168 <HAL_RTC_SetDate+0x164>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	4a22      	ldr	r2, [pc, #136]	@ (800316c <HAL_RTC_SetDate+0x168>)
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80030ee:	69f9      	ldr	r1, [r7, #28]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f933 	bl	800335c <RTC_WriteTimeCounter>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2204      	movs	r2, #4
 8003100:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e027      	b.n	800315c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f94c 	bl	80033aa <RTC_ReadAlarmCounter>
 8003112:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d018      	beq.n	800314e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	429a      	cmp	r2, r3
 8003122:	d214      	bcs.n	800314e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800312a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800312e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003130:	69b9      	ldr	r1, [r7, #24]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f952 	bl	80033dc <RTC_WriteAlarmCounter>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2204      	movs	r2, #4
 8003142:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e006      	b.n	800315c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3720      	adds	r7, #32
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	91a2b3c5 	.word	0x91a2b3c5
 8003168:	aaaaaaab 	.word	0xaaaaaaab
 800316c:	00015180 	.word	0x00015180

08003170 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b089      	sub	sp, #36	@ 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	2100      	movs	r1, #0
 8003186:	460a      	mov	r2, r1
 8003188:	801a      	strh	r2, [r3, #0]
 800318a:	460a      	mov	r2, r1
 800318c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <HAL_RTC_SetAlarm+0x2a>
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07d      	b.n	800329a <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	7c1b      	ldrb	r3, [r3, #16]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_RTC_SetAlarm+0x3a>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e077      	b.n	800329a <HAL_RTC_SetAlarm+0x12a>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2202      	movs	r2, #2
 80031b4:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80031b6:	f107 0314 	add.w	r3, r7, #20
 80031ba:	2200      	movs	r2, #0
 80031bc:	4619      	mov	r1, r3
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff fe48 	bl	8002e54 <HAL_RTC_GetTime>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e065      	b.n	800329a <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80031ce:	7d3b      	ldrb	r3, [r7, #20]
 80031d0:	461a      	mov	r2, r3
 80031d2:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80031d6:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80031da:	7d7b      	ldrb	r3, [r7, #21]
 80031dc:	4619      	mov	r1, r3
 80031de:	460b      	mov	r3, r1
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a5b      	subs	r3, r3, r1
 80031e4:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80031e6:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80031e8:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80031ea:	4413      	add	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d113      	bne.n	800321c <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80031fe:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	785b      	ldrb	r3, [r3, #1]
 8003206:	4619      	mov	r1, r3
 8003208:	460b      	mov	r3, r1
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	1a5b      	subs	r3, r3, r1
 800320e:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003210:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003216:	4413      	add	r3, r2
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	e01e      	b.n	800325a <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f96f 	bl	8003504 <RTC_Bcd2ToByte>
 8003226:	4603      	mov	r3, r0
 8003228:	461a      	mov	r2, r3
 800322a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800322e:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	785b      	ldrb	r3, [r3, #1]
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f964 	bl	8003504 <RTC_Bcd2ToByte>
 800323c:	4603      	mov	r3, r0
 800323e:	461a      	mov	r2, r3
 8003240:	4613      	mov	r3, r2
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003248:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	789b      	ldrb	r3, [r3, #2]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 f958 	bl	8003504 <RTC_Bcd2ToByte>
 8003254:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003256:	4423      	add	r3, r4
 8003258:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	429a      	cmp	r2, r3
 8003260:	d205      	bcs.n	800326e <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003268:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800326c:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800326e:	69f9      	ldr	r1, [r7, #28]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f8b3 	bl	80033dc <RTC_WriteAlarmCounter>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d007      	beq.n	800328c <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2204      	movs	r2, #4
 8003280:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e006      	b.n	800329a <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003298:	2300      	movs	r3, #0
  }
}
 800329a:	4618      	mov	r0, r3
 800329c:	3724      	adds	r7, #36	@ 0x24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd90      	pop	{r4, r7, pc}

080032a2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e01d      	b.n	80032f4 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0208 	bic.w	r2, r2, #8
 80032c6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80032c8:	f7fd ffe6 	bl	8001298 <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80032ce:	e009      	b.n	80032e4 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80032d0:	f7fd ffe2 	bl	8001298 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032de:	d901      	bls.n	80032e4 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e007      	b.n	80032f4 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0ee      	beq.n	80032d0 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	827b      	strh	r3, [r7, #18]
 8003308:	2300      	movs	r3, #0
 800330a:	823b      	strh	r3, [r7, #16]
 800330c:	2300      	movs	r3, #0
 800330e:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800332c:	8a7a      	ldrh	r2, [r7, #18]
 800332e:	8a3b      	ldrh	r3, [r7, #16]
 8003330:	429a      	cmp	r2, r3
 8003332:	d008      	beq.n	8003346 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003334:	8a3b      	ldrh	r3, [r7, #16]
 8003336:	041a      	lsls	r2, r3, #16
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	b29b      	uxth	r3, r3
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	e004      	b.n	8003350 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003346:	8a7b      	ldrh	r3, [r7, #18]
 8003348:	041a      	lsls	r2, r3, #16
 800334a:	89fb      	ldrh	r3, [r7, #14]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003350:	697b      	ldr	r3, [r7, #20]
}
 8003352:	4618      	mov	r0, r3
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f85d 	bl	800342a <RTC_EnterInitMode>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
 800337a:	e011      	b.n	80033a0 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	0c12      	lsrs	r2, r2, #16
 8003384:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	b292      	uxth	r2, r2
 800338e:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f872 	bl	800347a <RTC_ExitInitMode>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b085      	sub	sp, #20
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	81fb      	strh	r3, [r7, #14]
 80033b6:	2300      	movs	r3, #0
 80033b8:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80033ca:	89fb      	ldrh	r3, [r7, #14]
 80033cc:	041a      	lsls	r2, r3, #16
 80033ce:	89bb      	ldrh	r3, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f81d 	bl	800342a <RTC_EnterInitMode>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	73fb      	strb	r3, [r7, #15]
 80033fa:	e011      	b.n	8003420 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	0c12      	lsrs	r2, r2, #16
 8003404:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	b292      	uxth	r2, r2
 800340e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f832 	bl	800347a <RTC_ExitInitMode>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003420:	7bfb      	ldrb	r3, [r7, #15]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003436:	f7fd ff2f 	bl	8001298 <HAL_GetTick>
 800343a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800343c:	e009      	b.n	8003452 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800343e:	f7fd ff2b 	bl	8001298 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800344c:	d901      	bls.n	8003452 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e00f      	b.n	8003472 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0ee      	beq.n	800343e <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0210 	orr.w	r2, r2, #16
 800346e:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0210 	bic.w	r2, r2, #16
 8003494:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003496:	f7fd feff 	bl	8001298 <HAL_GetTick>
 800349a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800349c:	e009      	b.n	80034b2 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800349e:	f7fd fefb 	bl	8001298 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034ac:	d901      	bls.n	80034b2 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e007      	b.n	80034c2 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0ee      	beq.n	800349e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b085      	sub	sp, #20
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80034d8:	e005      	b.n	80034e6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3301      	adds	r3, #1
 80034de:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	3b0a      	subs	r3, #10
 80034e4:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	2b09      	cmp	r3, #9
 80034ea:	d8f6      	bhi.n	80034da <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	b2db      	uxtb	r3, r3
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	b2db      	uxtb	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	b2da      	uxtb	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	4413      	add	r3, r2
 8003532:	b2db      	uxtb	r3, r3
}
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr

0800353e <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b086      	sub	sp, #24
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	2300      	movs	r3, #0
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	7bdb      	ldrb	r3, [r3, #15]
 800355c:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	7b5b      	ldrb	r3, [r3, #13]
 8003562:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	7b9b      	ldrb	r3, [r3, #14]
 8003568:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800356a:	2300      	movs	r3, #0
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	e06f      	b.n	8003650 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d011      	beq.n	800359a <RTC_DateUpdate+0x5c>
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d00e      	beq.n	800359a <RTC_DateUpdate+0x5c>
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b05      	cmp	r3, #5
 8003580:	d00b      	beq.n	800359a <RTC_DateUpdate+0x5c>
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	2b07      	cmp	r3, #7
 8003586:	d008      	beq.n	800359a <RTC_DateUpdate+0x5c>
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	2b08      	cmp	r3, #8
 800358c:	d005      	beq.n	800359a <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	2b0a      	cmp	r3, #10
 8003592:	d002      	beq.n	800359a <RTC_DateUpdate+0x5c>
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d117      	bne.n	80035ca <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b1e      	cmp	r3, #30
 800359e:	d803      	bhi.n	80035a8 <RTC_DateUpdate+0x6a>
      {
        day++;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	3301      	adds	r3, #1
 80035a4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80035a6:	e050      	b.n	800364a <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	2b0c      	cmp	r3, #12
 80035ac:	d005      	beq.n	80035ba <RTC_DateUpdate+0x7c>
        {
          month++;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	3301      	adds	r3, #1
 80035b2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80035b4:	2301      	movs	r3, #1
 80035b6:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80035b8:	e047      	b.n	800364a <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80035ba:	2301      	movs	r3, #1
 80035bc:	613b      	str	r3, [r7, #16]
          day = 1U;
 80035be:	2301      	movs	r3, #1
 80035c0:	60fb      	str	r3, [r7, #12]
          year++;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	3301      	adds	r3, #1
 80035c6:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80035c8:	e03f      	b.n	800364a <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d008      	beq.n	80035e2 <RTC_DateUpdate+0xa4>
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d005      	beq.n	80035e2 <RTC_DateUpdate+0xa4>
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b09      	cmp	r3, #9
 80035da:	d002      	beq.n	80035e2 <RTC_DateUpdate+0xa4>
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b0b      	cmp	r3, #11
 80035e0:	d10c      	bne.n	80035fc <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b1d      	cmp	r3, #29
 80035e6:	d803      	bhi.n	80035f0 <RTC_DateUpdate+0xb2>
      {
        day++;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	3301      	adds	r3, #1
 80035ec:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80035ee:	e02c      	b.n	800364a <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	3301      	adds	r3, #1
 80035f4:	613b      	str	r3, [r7, #16]
        day = 1U;
 80035f6:	2301      	movs	r3, #1
 80035f8:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80035fa:	e026      	b.n	800364a <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d123      	bne.n	800364a <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b1b      	cmp	r3, #27
 8003606:	d803      	bhi.n	8003610 <RTC_DateUpdate+0xd2>
      {
        day++;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3301      	adds	r3, #1
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	e01c      	b.n	800364a <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b1c      	cmp	r3, #28
 8003614:	d111      	bne.n	800363a <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	b29b      	uxth	r3, r3
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f838 	bl	8003690 <RTC_IsLeapYear>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <RTC_DateUpdate+0xf0>
        {
          day++;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	3301      	adds	r3, #1
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e00d      	b.n	800364a <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	3301      	adds	r3, #1
 8003632:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003634:	2301      	movs	r3, #1
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	e007      	b.n	800364a <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b1d      	cmp	r3, #29
 800363e:	d104      	bne.n	800364a <RTC_DateUpdate+0x10c>
      {
        month++;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	3301      	adds	r3, #1
 8003644:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003646:	2301      	movs	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	3301      	adds	r3, #1
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d38b      	bcc.n	8003570 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	b2da      	uxtb	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	b2da      	uxtb	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	4619      	mov	r1, r3
 800367a:	6978      	ldr	r0, [r7, #20]
 800367c:	f000 f83a 	bl	80036f4 <RTC_WeekDayNum>
 8003680:	4603      	mov	r3, r0
 8003682:	461a      	mov	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	731a      	strb	r2, [r3, #12]
}
 8003688:	bf00      	nop
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e01d      	b.n	80036e6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	4a10      	ldr	r2, [pc, #64]	@ (80036f0 <RTC_IsLeapYear+0x60>)
 80036ae:	fba2 1203 	umull	r1, r2, r2, r3
 80036b2:	0952      	lsrs	r2, r2, #5
 80036b4:	2164      	movs	r1, #100	@ 0x64
 80036b6:	fb01 f202 	mul.w	r2, r1, r2
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e00f      	b.n	80036e6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	4a09      	ldr	r2, [pc, #36]	@ (80036f0 <RTC_IsLeapYear+0x60>)
 80036ca:	fba2 1203 	umull	r1, r2, r2, r3
 80036ce:	09d2      	lsrs	r2, r2, #7
 80036d0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80036d4:	fb01 f202 	mul.w	r2, r1, r2
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80036e4:	2300      	movs	r3, #0
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr
 80036f0:	51eb851f 	.word	0x51eb851f

080036f4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	70fb      	strb	r3, [r7, #3]
 8003700:	4613      	mov	r3, r2
 8003702:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003712:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d82d      	bhi.n	8003776 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	4613      	mov	r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4413      	add	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	4a2c      	ldr	r2, [pc, #176]	@ (80037d8 <RTC_WeekDayNum+0xe4>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	085a      	lsrs	r2, r3, #1
 800372e:	78bb      	ldrb	r3, [r7, #2]
 8003730:	441a      	add	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	441a      	add	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	3b01      	subs	r3, #1
 800373a:	089b      	lsrs	r3, r3, #2
 800373c:	441a      	add	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	3b01      	subs	r3, #1
 8003742:	4926      	ldr	r1, [pc, #152]	@ (80037dc <RTC_WeekDayNum+0xe8>)
 8003744:	fba1 1303 	umull	r1, r3, r1, r3
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	1ad2      	subs	r2, r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	3b01      	subs	r3, #1
 8003750:	4922      	ldr	r1, [pc, #136]	@ (80037dc <RTC_WeekDayNum+0xe8>)
 8003752:	fba1 1303 	umull	r1, r3, r1, r3
 8003756:	09db      	lsrs	r3, r3, #7
 8003758:	4413      	add	r3, r2
 800375a:	1d1a      	adds	r2, r3, #4
 800375c:	4b20      	ldr	r3, [pc, #128]	@ (80037e0 <RTC_WeekDayNum+0xec>)
 800375e:	fba3 1302 	umull	r1, r3, r3, r2
 8003762:	1ad1      	subs	r1, r2, r3
 8003764:	0849      	lsrs	r1, r1, #1
 8003766:	440b      	add	r3, r1
 8003768:	0899      	lsrs	r1, r3, #2
 800376a:	460b      	mov	r3, r1
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	1a5b      	subs	r3, r3, r1
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	e029      	b.n	80037ca <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	4613      	mov	r3, r2
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	4413      	add	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	4a15      	ldr	r2, [pc, #84]	@ (80037d8 <RTC_WeekDayNum+0xe4>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	085a      	lsrs	r2, r3, #1
 800378a:	78bb      	ldrb	r3, [r7, #2]
 800378c:	441a      	add	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	441a      	add	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	089b      	lsrs	r3, r3, #2
 8003796:	441a      	add	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4910      	ldr	r1, [pc, #64]	@ (80037dc <RTC_WeekDayNum+0xe8>)
 800379c:	fba1 1303 	umull	r1, r3, r1, r3
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	1ad2      	subs	r2, r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	490d      	ldr	r1, [pc, #52]	@ (80037dc <RTC_WeekDayNum+0xe8>)
 80037a8:	fba1 1303 	umull	r1, r3, r1, r3
 80037ac:	09db      	lsrs	r3, r3, #7
 80037ae:	4413      	add	r3, r2
 80037b0:	1c9a      	adds	r2, r3, #2
 80037b2:	4b0b      	ldr	r3, [pc, #44]	@ (80037e0 <RTC_WeekDayNum+0xec>)
 80037b4:	fba3 1302 	umull	r1, r3, r3, r2
 80037b8:	1ad1      	subs	r1, r2, r3
 80037ba:	0849      	lsrs	r1, r1, #1
 80037bc:	440b      	add	r3, r1
 80037be:	0899      	lsrs	r1, r3, #2
 80037c0:	460b      	mov	r3, r1
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	1a5b      	subs	r3, r3, r1
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	b2db      	uxtb	r3, r3
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	38e38e39 	.word	0x38e38e39
 80037dc:	51eb851f 	.word	0x51eb851f
 80037e0:	24924925 	.word	0x24924925

080037e4 <siprintf>:
 80037e4:	b40e      	push	{r1, r2, r3}
 80037e6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80037ea:	b500      	push	{lr}
 80037ec:	b09c      	sub	sp, #112	@ 0x70
 80037ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80037f0:	9002      	str	r0, [sp, #8]
 80037f2:	9006      	str	r0, [sp, #24]
 80037f4:	9107      	str	r1, [sp, #28]
 80037f6:	9104      	str	r1, [sp, #16]
 80037f8:	4808      	ldr	r0, [pc, #32]	@ (800381c <siprintf+0x38>)
 80037fa:	4909      	ldr	r1, [pc, #36]	@ (8003820 <siprintf+0x3c>)
 80037fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003800:	9105      	str	r1, [sp, #20]
 8003802:	6800      	ldr	r0, [r0, #0]
 8003804:	a902      	add	r1, sp, #8
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	f000 f992 	bl	8003b30 <_svfiprintf_r>
 800380c:	2200      	movs	r2, #0
 800380e:	9b02      	ldr	r3, [sp, #8]
 8003810:	701a      	strb	r2, [r3, #0]
 8003812:	b01c      	add	sp, #112	@ 0x70
 8003814:	f85d eb04 	ldr.w	lr, [sp], #4
 8003818:	b003      	add	sp, #12
 800381a:	4770      	bx	lr
 800381c:	20000014 	.word	0x20000014
 8003820:	ffff0208 	.word	0xffff0208

08003824 <memset>:
 8003824:	4603      	mov	r3, r0
 8003826:	4402      	add	r2, r0
 8003828:	4293      	cmp	r3, r2
 800382a:	d100      	bne.n	800382e <memset+0xa>
 800382c:	4770      	bx	lr
 800382e:	f803 1b01 	strb.w	r1, [r3], #1
 8003832:	e7f9      	b.n	8003828 <memset+0x4>

08003834 <__errno>:
 8003834:	4b01      	ldr	r3, [pc, #4]	@ (800383c <__errno+0x8>)
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000014 	.word	0x20000014

08003840 <__libc_init_array>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	2600      	movs	r6, #0
 8003844:	4d0c      	ldr	r5, [pc, #48]	@ (8003878 <__libc_init_array+0x38>)
 8003846:	4c0d      	ldr	r4, [pc, #52]	@ (800387c <__libc_init_array+0x3c>)
 8003848:	1b64      	subs	r4, r4, r5
 800384a:	10a4      	asrs	r4, r4, #2
 800384c:	42a6      	cmp	r6, r4
 800384e:	d109      	bne.n	8003864 <__libc_init_array+0x24>
 8003850:	f000 fc78 	bl	8004144 <_init>
 8003854:	2600      	movs	r6, #0
 8003856:	4d0a      	ldr	r5, [pc, #40]	@ (8003880 <__libc_init_array+0x40>)
 8003858:	4c0a      	ldr	r4, [pc, #40]	@ (8003884 <__libc_init_array+0x44>)
 800385a:	1b64      	subs	r4, r4, r5
 800385c:	10a4      	asrs	r4, r4, #2
 800385e:	42a6      	cmp	r6, r4
 8003860:	d105      	bne.n	800386e <__libc_init_array+0x2e>
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	f855 3b04 	ldr.w	r3, [r5], #4
 8003868:	4798      	blx	r3
 800386a:	3601      	adds	r6, #1
 800386c:	e7ee      	b.n	800384c <__libc_init_array+0xc>
 800386e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003872:	4798      	blx	r3
 8003874:	3601      	adds	r6, #1
 8003876:	e7f2      	b.n	800385e <__libc_init_array+0x1e>
 8003878:	080046d8 	.word	0x080046d8
 800387c:	080046d8 	.word	0x080046d8
 8003880:	080046d8 	.word	0x080046d8
 8003884:	080046dc 	.word	0x080046dc

08003888 <__retarget_lock_acquire_recursive>:
 8003888:	4770      	bx	lr

0800388a <__retarget_lock_release_recursive>:
 800388a:	4770      	bx	lr

0800388c <_free_r>:
 800388c:	b538      	push	{r3, r4, r5, lr}
 800388e:	4605      	mov	r5, r0
 8003890:	2900      	cmp	r1, #0
 8003892:	d040      	beq.n	8003916 <_free_r+0x8a>
 8003894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003898:	1f0c      	subs	r4, r1, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	bfb8      	it	lt
 800389e:	18e4      	addlt	r4, r4, r3
 80038a0:	f000 f8de 	bl	8003a60 <__malloc_lock>
 80038a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003918 <_free_r+0x8c>)
 80038a6:	6813      	ldr	r3, [r2, #0]
 80038a8:	b933      	cbnz	r3, 80038b8 <_free_r+0x2c>
 80038aa:	6063      	str	r3, [r4, #4]
 80038ac:	6014      	str	r4, [r2, #0]
 80038ae:	4628      	mov	r0, r5
 80038b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038b4:	f000 b8da 	b.w	8003a6c <__malloc_unlock>
 80038b8:	42a3      	cmp	r3, r4
 80038ba:	d908      	bls.n	80038ce <_free_r+0x42>
 80038bc:	6820      	ldr	r0, [r4, #0]
 80038be:	1821      	adds	r1, r4, r0
 80038c0:	428b      	cmp	r3, r1
 80038c2:	bf01      	itttt	eq
 80038c4:	6819      	ldreq	r1, [r3, #0]
 80038c6:	685b      	ldreq	r3, [r3, #4]
 80038c8:	1809      	addeq	r1, r1, r0
 80038ca:	6021      	streq	r1, [r4, #0]
 80038cc:	e7ed      	b.n	80038aa <_free_r+0x1e>
 80038ce:	461a      	mov	r2, r3
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	b10b      	cbz	r3, 80038d8 <_free_r+0x4c>
 80038d4:	42a3      	cmp	r3, r4
 80038d6:	d9fa      	bls.n	80038ce <_free_r+0x42>
 80038d8:	6811      	ldr	r1, [r2, #0]
 80038da:	1850      	adds	r0, r2, r1
 80038dc:	42a0      	cmp	r0, r4
 80038de:	d10b      	bne.n	80038f8 <_free_r+0x6c>
 80038e0:	6820      	ldr	r0, [r4, #0]
 80038e2:	4401      	add	r1, r0
 80038e4:	1850      	adds	r0, r2, r1
 80038e6:	4283      	cmp	r3, r0
 80038e8:	6011      	str	r1, [r2, #0]
 80038ea:	d1e0      	bne.n	80038ae <_free_r+0x22>
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4408      	add	r0, r1
 80038f2:	6010      	str	r0, [r2, #0]
 80038f4:	6053      	str	r3, [r2, #4]
 80038f6:	e7da      	b.n	80038ae <_free_r+0x22>
 80038f8:	d902      	bls.n	8003900 <_free_r+0x74>
 80038fa:	230c      	movs	r3, #12
 80038fc:	602b      	str	r3, [r5, #0]
 80038fe:	e7d6      	b.n	80038ae <_free_r+0x22>
 8003900:	6820      	ldr	r0, [r4, #0]
 8003902:	1821      	adds	r1, r4, r0
 8003904:	428b      	cmp	r3, r1
 8003906:	bf01      	itttt	eq
 8003908:	6819      	ldreq	r1, [r3, #0]
 800390a:	685b      	ldreq	r3, [r3, #4]
 800390c:	1809      	addeq	r1, r1, r0
 800390e:	6021      	streq	r1, [r4, #0]
 8003910:	6063      	str	r3, [r4, #4]
 8003912:	6054      	str	r4, [r2, #4]
 8003914:	e7cb      	b.n	80038ae <_free_r+0x22>
 8003916:	bd38      	pop	{r3, r4, r5, pc}
 8003918:	2000063c 	.word	0x2000063c

0800391c <sbrk_aligned>:
 800391c:	b570      	push	{r4, r5, r6, lr}
 800391e:	4e0f      	ldr	r6, [pc, #60]	@ (800395c <sbrk_aligned+0x40>)
 8003920:	460c      	mov	r4, r1
 8003922:	6831      	ldr	r1, [r6, #0]
 8003924:	4605      	mov	r5, r0
 8003926:	b911      	cbnz	r1, 800392e <sbrk_aligned+0x12>
 8003928:	f000 fbaa 	bl	8004080 <_sbrk_r>
 800392c:	6030      	str	r0, [r6, #0]
 800392e:	4621      	mov	r1, r4
 8003930:	4628      	mov	r0, r5
 8003932:	f000 fba5 	bl	8004080 <_sbrk_r>
 8003936:	1c43      	adds	r3, r0, #1
 8003938:	d103      	bne.n	8003942 <sbrk_aligned+0x26>
 800393a:	f04f 34ff 	mov.w	r4, #4294967295
 800393e:	4620      	mov	r0, r4
 8003940:	bd70      	pop	{r4, r5, r6, pc}
 8003942:	1cc4      	adds	r4, r0, #3
 8003944:	f024 0403 	bic.w	r4, r4, #3
 8003948:	42a0      	cmp	r0, r4
 800394a:	d0f8      	beq.n	800393e <sbrk_aligned+0x22>
 800394c:	1a21      	subs	r1, r4, r0
 800394e:	4628      	mov	r0, r5
 8003950:	f000 fb96 	bl	8004080 <_sbrk_r>
 8003954:	3001      	adds	r0, #1
 8003956:	d1f2      	bne.n	800393e <sbrk_aligned+0x22>
 8003958:	e7ef      	b.n	800393a <sbrk_aligned+0x1e>
 800395a:	bf00      	nop
 800395c:	20000638 	.word	0x20000638

08003960 <_malloc_r>:
 8003960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003964:	1ccd      	adds	r5, r1, #3
 8003966:	f025 0503 	bic.w	r5, r5, #3
 800396a:	3508      	adds	r5, #8
 800396c:	2d0c      	cmp	r5, #12
 800396e:	bf38      	it	cc
 8003970:	250c      	movcc	r5, #12
 8003972:	2d00      	cmp	r5, #0
 8003974:	4606      	mov	r6, r0
 8003976:	db01      	blt.n	800397c <_malloc_r+0x1c>
 8003978:	42a9      	cmp	r1, r5
 800397a:	d904      	bls.n	8003986 <_malloc_r+0x26>
 800397c:	230c      	movs	r3, #12
 800397e:	6033      	str	r3, [r6, #0]
 8003980:	2000      	movs	r0, #0
 8003982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a5c <_malloc_r+0xfc>
 800398a:	f000 f869 	bl	8003a60 <__malloc_lock>
 800398e:	f8d8 3000 	ldr.w	r3, [r8]
 8003992:	461c      	mov	r4, r3
 8003994:	bb44      	cbnz	r4, 80039e8 <_malloc_r+0x88>
 8003996:	4629      	mov	r1, r5
 8003998:	4630      	mov	r0, r6
 800399a:	f7ff ffbf 	bl	800391c <sbrk_aligned>
 800399e:	1c43      	adds	r3, r0, #1
 80039a0:	4604      	mov	r4, r0
 80039a2:	d158      	bne.n	8003a56 <_malloc_r+0xf6>
 80039a4:	f8d8 4000 	ldr.w	r4, [r8]
 80039a8:	4627      	mov	r7, r4
 80039aa:	2f00      	cmp	r7, #0
 80039ac:	d143      	bne.n	8003a36 <_malloc_r+0xd6>
 80039ae:	2c00      	cmp	r4, #0
 80039b0:	d04b      	beq.n	8003a4a <_malloc_r+0xea>
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	4639      	mov	r1, r7
 80039b6:	4630      	mov	r0, r6
 80039b8:	eb04 0903 	add.w	r9, r4, r3
 80039bc:	f000 fb60 	bl	8004080 <_sbrk_r>
 80039c0:	4581      	cmp	r9, r0
 80039c2:	d142      	bne.n	8003a4a <_malloc_r+0xea>
 80039c4:	6821      	ldr	r1, [r4, #0]
 80039c6:	4630      	mov	r0, r6
 80039c8:	1a6d      	subs	r5, r5, r1
 80039ca:	4629      	mov	r1, r5
 80039cc:	f7ff ffa6 	bl	800391c <sbrk_aligned>
 80039d0:	3001      	adds	r0, #1
 80039d2:	d03a      	beq.n	8003a4a <_malloc_r+0xea>
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	442b      	add	r3, r5
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	f8d8 3000 	ldr.w	r3, [r8]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	bb62      	cbnz	r2, 8003a3c <_malloc_r+0xdc>
 80039e2:	f8c8 7000 	str.w	r7, [r8]
 80039e6:	e00f      	b.n	8003a08 <_malloc_r+0xa8>
 80039e8:	6822      	ldr	r2, [r4, #0]
 80039ea:	1b52      	subs	r2, r2, r5
 80039ec:	d420      	bmi.n	8003a30 <_malloc_r+0xd0>
 80039ee:	2a0b      	cmp	r2, #11
 80039f0:	d917      	bls.n	8003a22 <_malloc_r+0xc2>
 80039f2:	1961      	adds	r1, r4, r5
 80039f4:	42a3      	cmp	r3, r4
 80039f6:	6025      	str	r5, [r4, #0]
 80039f8:	bf18      	it	ne
 80039fa:	6059      	strne	r1, [r3, #4]
 80039fc:	6863      	ldr	r3, [r4, #4]
 80039fe:	bf08      	it	eq
 8003a00:	f8c8 1000 	streq.w	r1, [r8]
 8003a04:	5162      	str	r2, [r4, r5]
 8003a06:	604b      	str	r3, [r1, #4]
 8003a08:	4630      	mov	r0, r6
 8003a0a:	f000 f82f 	bl	8003a6c <__malloc_unlock>
 8003a0e:	f104 000b 	add.w	r0, r4, #11
 8003a12:	1d23      	adds	r3, r4, #4
 8003a14:	f020 0007 	bic.w	r0, r0, #7
 8003a18:	1ac2      	subs	r2, r0, r3
 8003a1a:	bf1c      	itt	ne
 8003a1c:	1a1b      	subne	r3, r3, r0
 8003a1e:	50a3      	strne	r3, [r4, r2]
 8003a20:	e7af      	b.n	8003982 <_malloc_r+0x22>
 8003a22:	6862      	ldr	r2, [r4, #4]
 8003a24:	42a3      	cmp	r3, r4
 8003a26:	bf0c      	ite	eq
 8003a28:	f8c8 2000 	streq.w	r2, [r8]
 8003a2c:	605a      	strne	r2, [r3, #4]
 8003a2e:	e7eb      	b.n	8003a08 <_malloc_r+0xa8>
 8003a30:	4623      	mov	r3, r4
 8003a32:	6864      	ldr	r4, [r4, #4]
 8003a34:	e7ae      	b.n	8003994 <_malloc_r+0x34>
 8003a36:	463c      	mov	r4, r7
 8003a38:	687f      	ldr	r7, [r7, #4]
 8003a3a:	e7b6      	b.n	80039aa <_malloc_r+0x4a>
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	42a3      	cmp	r3, r4
 8003a42:	d1fb      	bne.n	8003a3c <_malloc_r+0xdc>
 8003a44:	2300      	movs	r3, #0
 8003a46:	6053      	str	r3, [r2, #4]
 8003a48:	e7de      	b.n	8003a08 <_malloc_r+0xa8>
 8003a4a:	230c      	movs	r3, #12
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	6033      	str	r3, [r6, #0]
 8003a50:	f000 f80c 	bl	8003a6c <__malloc_unlock>
 8003a54:	e794      	b.n	8003980 <_malloc_r+0x20>
 8003a56:	6005      	str	r5, [r0, #0]
 8003a58:	e7d6      	b.n	8003a08 <_malloc_r+0xa8>
 8003a5a:	bf00      	nop
 8003a5c:	2000063c 	.word	0x2000063c

08003a60 <__malloc_lock>:
 8003a60:	4801      	ldr	r0, [pc, #4]	@ (8003a68 <__malloc_lock+0x8>)
 8003a62:	f7ff bf11 	b.w	8003888 <__retarget_lock_acquire_recursive>
 8003a66:	bf00      	nop
 8003a68:	20000634 	.word	0x20000634

08003a6c <__malloc_unlock>:
 8003a6c:	4801      	ldr	r0, [pc, #4]	@ (8003a74 <__malloc_unlock+0x8>)
 8003a6e:	f7ff bf0c 	b.w	800388a <__retarget_lock_release_recursive>
 8003a72:	bf00      	nop
 8003a74:	20000634 	.word	0x20000634

08003a78 <__ssputs_r>:
 8003a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a7c:	461f      	mov	r7, r3
 8003a7e:	688e      	ldr	r6, [r1, #8]
 8003a80:	4682      	mov	sl, r0
 8003a82:	42be      	cmp	r6, r7
 8003a84:	460c      	mov	r4, r1
 8003a86:	4690      	mov	r8, r2
 8003a88:	680b      	ldr	r3, [r1, #0]
 8003a8a:	d82d      	bhi.n	8003ae8 <__ssputs_r+0x70>
 8003a8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a94:	d026      	beq.n	8003ae4 <__ssputs_r+0x6c>
 8003a96:	6965      	ldr	r5, [r4, #20]
 8003a98:	6909      	ldr	r1, [r1, #16]
 8003a9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a9e:	eba3 0901 	sub.w	r9, r3, r1
 8003aa2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003aa6:	1c7b      	adds	r3, r7, #1
 8003aa8:	444b      	add	r3, r9
 8003aaa:	106d      	asrs	r5, r5, #1
 8003aac:	429d      	cmp	r5, r3
 8003aae:	bf38      	it	cc
 8003ab0:	461d      	movcc	r5, r3
 8003ab2:	0553      	lsls	r3, r2, #21
 8003ab4:	d527      	bpl.n	8003b06 <__ssputs_r+0x8e>
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f7ff ff52 	bl	8003960 <_malloc_r>
 8003abc:	4606      	mov	r6, r0
 8003abe:	b360      	cbz	r0, 8003b1a <__ssputs_r+0xa2>
 8003ac0:	464a      	mov	r2, r9
 8003ac2:	6921      	ldr	r1, [r4, #16]
 8003ac4:	f000 fafa 	bl	80040bc <memcpy>
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ad2:	81a3      	strh	r3, [r4, #12]
 8003ad4:	6126      	str	r6, [r4, #16]
 8003ad6:	444e      	add	r6, r9
 8003ad8:	6026      	str	r6, [r4, #0]
 8003ada:	463e      	mov	r6, r7
 8003adc:	6165      	str	r5, [r4, #20]
 8003ade:	eba5 0509 	sub.w	r5, r5, r9
 8003ae2:	60a5      	str	r5, [r4, #8]
 8003ae4:	42be      	cmp	r6, r7
 8003ae6:	d900      	bls.n	8003aea <__ssputs_r+0x72>
 8003ae8:	463e      	mov	r6, r7
 8003aea:	4632      	mov	r2, r6
 8003aec:	4641      	mov	r1, r8
 8003aee:	6820      	ldr	r0, [r4, #0]
 8003af0:	f000 faac 	bl	800404c <memmove>
 8003af4:	2000      	movs	r0, #0
 8003af6:	68a3      	ldr	r3, [r4, #8]
 8003af8:	1b9b      	subs	r3, r3, r6
 8003afa:	60a3      	str	r3, [r4, #8]
 8003afc:	6823      	ldr	r3, [r4, #0]
 8003afe:	4433      	add	r3, r6
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b06:	462a      	mov	r2, r5
 8003b08:	f000 fae6 	bl	80040d8 <_realloc_r>
 8003b0c:	4606      	mov	r6, r0
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d1e0      	bne.n	8003ad4 <__ssputs_r+0x5c>
 8003b12:	4650      	mov	r0, sl
 8003b14:	6921      	ldr	r1, [r4, #16]
 8003b16:	f7ff feb9 	bl	800388c <_free_r>
 8003b1a:	230c      	movs	r3, #12
 8003b1c:	f8ca 3000 	str.w	r3, [sl]
 8003b20:	89a3      	ldrh	r3, [r4, #12]
 8003b22:	f04f 30ff 	mov.w	r0, #4294967295
 8003b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b2a:	81a3      	strh	r3, [r4, #12]
 8003b2c:	e7e9      	b.n	8003b02 <__ssputs_r+0x8a>
	...

08003b30 <_svfiprintf_r>:
 8003b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b34:	4698      	mov	r8, r3
 8003b36:	898b      	ldrh	r3, [r1, #12]
 8003b38:	4607      	mov	r7, r0
 8003b3a:	061b      	lsls	r3, r3, #24
 8003b3c:	460d      	mov	r5, r1
 8003b3e:	4614      	mov	r4, r2
 8003b40:	b09d      	sub	sp, #116	@ 0x74
 8003b42:	d510      	bpl.n	8003b66 <_svfiprintf_r+0x36>
 8003b44:	690b      	ldr	r3, [r1, #16]
 8003b46:	b973      	cbnz	r3, 8003b66 <_svfiprintf_r+0x36>
 8003b48:	2140      	movs	r1, #64	@ 0x40
 8003b4a:	f7ff ff09 	bl	8003960 <_malloc_r>
 8003b4e:	6028      	str	r0, [r5, #0]
 8003b50:	6128      	str	r0, [r5, #16]
 8003b52:	b930      	cbnz	r0, 8003b62 <_svfiprintf_r+0x32>
 8003b54:	230c      	movs	r3, #12
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5c:	b01d      	add	sp, #116	@ 0x74
 8003b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b62:	2340      	movs	r3, #64	@ 0x40
 8003b64:	616b      	str	r3, [r5, #20]
 8003b66:	2300      	movs	r3, #0
 8003b68:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b6a:	2320      	movs	r3, #32
 8003b6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b70:	2330      	movs	r3, #48	@ 0x30
 8003b72:	f04f 0901 	mov.w	r9, #1
 8003b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b7a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003d14 <_svfiprintf_r+0x1e4>
 8003b7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b82:	4623      	mov	r3, r4
 8003b84:	469a      	mov	sl, r3
 8003b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b8a:	b10a      	cbz	r2, 8003b90 <_svfiprintf_r+0x60>
 8003b8c:	2a25      	cmp	r2, #37	@ 0x25
 8003b8e:	d1f9      	bne.n	8003b84 <_svfiprintf_r+0x54>
 8003b90:	ebba 0b04 	subs.w	fp, sl, r4
 8003b94:	d00b      	beq.n	8003bae <_svfiprintf_r+0x7e>
 8003b96:	465b      	mov	r3, fp
 8003b98:	4622      	mov	r2, r4
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	4638      	mov	r0, r7
 8003b9e:	f7ff ff6b 	bl	8003a78 <__ssputs_r>
 8003ba2:	3001      	adds	r0, #1
 8003ba4:	f000 80a7 	beq.w	8003cf6 <_svfiprintf_r+0x1c6>
 8003ba8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003baa:	445a      	add	r2, fp
 8003bac:	9209      	str	r2, [sp, #36]	@ 0x24
 8003bae:	f89a 3000 	ldrb.w	r3, [sl]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 809f 	beq.w	8003cf6 <_svfiprintf_r+0x1c6>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f04f 32ff 	mov.w	r2, #4294967295
 8003bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bc2:	f10a 0a01 	add.w	sl, sl, #1
 8003bc6:	9304      	str	r3, [sp, #16]
 8003bc8:	9307      	str	r3, [sp, #28]
 8003bca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003bce:	931a      	str	r3, [sp, #104]	@ 0x68
 8003bd0:	4654      	mov	r4, sl
 8003bd2:	2205      	movs	r2, #5
 8003bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bd8:	484e      	ldr	r0, [pc, #312]	@ (8003d14 <_svfiprintf_r+0x1e4>)
 8003bda:	f000 fa61 	bl	80040a0 <memchr>
 8003bde:	9a04      	ldr	r2, [sp, #16]
 8003be0:	b9d8      	cbnz	r0, 8003c1a <_svfiprintf_r+0xea>
 8003be2:	06d0      	lsls	r0, r2, #27
 8003be4:	bf44      	itt	mi
 8003be6:	2320      	movmi	r3, #32
 8003be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bec:	0711      	lsls	r1, r2, #28
 8003bee:	bf44      	itt	mi
 8003bf0:	232b      	movmi	r3, #43	@ 0x2b
 8003bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bfc:	d015      	beq.n	8003c2a <_svfiprintf_r+0xfa>
 8003bfe:	4654      	mov	r4, sl
 8003c00:	2000      	movs	r0, #0
 8003c02:	f04f 0c0a 	mov.w	ip, #10
 8003c06:	9a07      	ldr	r2, [sp, #28]
 8003c08:	4621      	mov	r1, r4
 8003c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c0e:	3b30      	subs	r3, #48	@ 0x30
 8003c10:	2b09      	cmp	r3, #9
 8003c12:	d94b      	bls.n	8003cac <_svfiprintf_r+0x17c>
 8003c14:	b1b0      	cbz	r0, 8003c44 <_svfiprintf_r+0x114>
 8003c16:	9207      	str	r2, [sp, #28]
 8003c18:	e014      	b.n	8003c44 <_svfiprintf_r+0x114>
 8003c1a:	eba0 0308 	sub.w	r3, r0, r8
 8003c1e:	fa09 f303 	lsl.w	r3, r9, r3
 8003c22:	4313      	orrs	r3, r2
 8003c24:	46a2      	mov	sl, r4
 8003c26:	9304      	str	r3, [sp, #16]
 8003c28:	e7d2      	b.n	8003bd0 <_svfiprintf_r+0xa0>
 8003c2a:	9b03      	ldr	r3, [sp, #12]
 8003c2c:	1d19      	adds	r1, r3, #4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	9103      	str	r1, [sp, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	bfbb      	ittet	lt
 8003c36:	425b      	neglt	r3, r3
 8003c38:	f042 0202 	orrlt.w	r2, r2, #2
 8003c3c:	9307      	strge	r3, [sp, #28]
 8003c3e:	9307      	strlt	r3, [sp, #28]
 8003c40:	bfb8      	it	lt
 8003c42:	9204      	strlt	r2, [sp, #16]
 8003c44:	7823      	ldrb	r3, [r4, #0]
 8003c46:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c48:	d10a      	bne.n	8003c60 <_svfiprintf_r+0x130>
 8003c4a:	7863      	ldrb	r3, [r4, #1]
 8003c4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c4e:	d132      	bne.n	8003cb6 <_svfiprintf_r+0x186>
 8003c50:	9b03      	ldr	r3, [sp, #12]
 8003c52:	3402      	adds	r4, #2
 8003c54:	1d1a      	adds	r2, r3, #4
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	9203      	str	r2, [sp, #12]
 8003c5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c5e:	9305      	str	r3, [sp, #20]
 8003c60:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003d18 <_svfiprintf_r+0x1e8>
 8003c64:	2203      	movs	r2, #3
 8003c66:	4650      	mov	r0, sl
 8003c68:	7821      	ldrb	r1, [r4, #0]
 8003c6a:	f000 fa19 	bl	80040a0 <memchr>
 8003c6e:	b138      	cbz	r0, 8003c80 <_svfiprintf_r+0x150>
 8003c70:	2240      	movs	r2, #64	@ 0x40
 8003c72:	9b04      	ldr	r3, [sp, #16]
 8003c74:	eba0 000a 	sub.w	r0, r0, sl
 8003c78:	4082      	lsls	r2, r0
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	3401      	adds	r4, #1
 8003c7e:	9304      	str	r3, [sp, #16]
 8003c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c84:	2206      	movs	r2, #6
 8003c86:	4825      	ldr	r0, [pc, #148]	@ (8003d1c <_svfiprintf_r+0x1ec>)
 8003c88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c8c:	f000 fa08 	bl	80040a0 <memchr>
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d036      	beq.n	8003d02 <_svfiprintf_r+0x1d2>
 8003c94:	4b22      	ldr	r3, [pc, #136]	@ (8003d20 <_svfiprintf_r+0x1f0>)
 8003c96:	bb1b      	cbnz	r3, 8003ce0 <_svfiprintf_r+0x1b0>
 8003c98:	9b03      	ldr	r3, [sp, #12]
 8003c9a:	3307      	adds	r3, #7
 8003c9c:	f023 0307 	bic.w	r3, r3, #7
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	9303      	str	r3, [sp, #12]
 8003ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ca6:	4433      	add	r3, r6
 8003ca8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003caa:	e76a      	b.n	8003b82 <_svfiprintf_r+0x52>
 8003cac:	460c      	mov	r4, r1
 8003cae:	2001      	movs	r0, #1
 8003cb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cb4:	e7a8      	b.n	8003c08 <_svfiprintf_r+0xd8>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f04f 0c0a 	mov.w	ip, #10
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	3401      	adds	r4, #1
 8003cc0:	9305      	str	r3, [sp, #20]
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cc8:	3a30      	subs	r2, #48	@ 0x30
 8003cca:	2a09      	cmp	r2, #9
 8003ccc:	d903      	bls.n	8003cd6 <_svfiprintf_r+0x1a6>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0c6      	beq.n	8003c60 <_svfiprintf_r+0x130>
 8003cd2:	9105      	str	r1, [sp, #20]
 8003cd4:	e7c4      	b.n	8003c60 <_svfiprintf_r+0x130>
 8003cd6:	4604      	mov	r4, r0
 8003cd8:	2301      	movs	r3, #1
 8003cda:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cde:	e7f0      	b.n	8003cc2 <_svfiprintf_r+0x192>
 8003ce0:	ab03      	add	r3, sp, #12
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	462a      	mov	r2, r5
 8003ce6:	4638      	mov	r0, r7
 8003ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d24 <_svfiprintf_r+0x1f4>)
 8003cea:	a904      	add	r1, sp, #16
 8003cec:	f3af 8000 	nop.w
 8003cf0:	1c42      	adds	r2, r0, #1
 8003cf2:	4606      	mov	r6, r0
 8003cf4:	d1d6      	bne.n	8003ca4 <_svfiprintf_r+0x174>
 8003cf6:	89ab      	ldrh	r3, [r5, #12]
 8003cf8:	065b      	lsls	r3, r3, #25
 8003cfa:	f53f af2d 	bmi.w	8003b58 <_svfiprintf_r+0x28>
 8003cfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d00:	e72c      	b.n	8003b5c <_svfiprintf_r+0x2c>
 8003d02:	ab03      	add	r3, sp, #12
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	462a      	mov	r2, r5
 8003d08:	4638      	mov	r0, r7
 8003d0a:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <_svfiprintf_r+0x1f4>)
 8003d0c:	a904      	add	r1, sp, #16
 8003d0e:	f000 f87d 	bl	8003e0c <_printf_i>
 8003d12:	e7ed      	b.n	8003cf0 <_svfiprintf_r+0x1c0>
 8003d14:	080046a2 	.word	0x080046a2
 8003d18:	080046a8 	.word	0x080046a8
 8003d1c:	080046ac 	.word	0x080046ac
 8003d20:	00000000 	.word	0x00000000
 8003d24:	08003a79 	.word	0x08003a79

08003d28 <_printf_common>:
 8003d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d2c:	4616      	mov	r6, r2
 8003d2e:	4698      	mov	r8, r3
 8003d30:	688a      	ldr	r2, [r1, #8]
 8003d32:	690b      	ldr	r3, [r1, #16]
 8003d34:	4607      	mov	r7, r0
 8003d36:	4293      	cmp	r3, r2
 8003d38:	bfb8      	it	lt
 8003d3a:	4613      	movlt	r3, r2
 8003d3c:	6033      	str	r3, [r6, #0]
 8003d3e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d42:	460c      	mov	r4, r1
 8003d44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d48:	b10a      	cbz	r2, 8003d4e <_printf_common+0x26>
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	6033      	str	r3, [r6, #0]
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	0699      	lsls	r1, r3, #26
 8003d52:	bf42      	ittt	mi
 8003d54:	6833      	ldrmi	r3, [r6, #0]
 8003d56:	3302      	addmi	r3, #2
 8003d58:	6033      	strmi	r3, [r6, #0]
 8003d5a:	6825      	ldr	r5, [r4, #0]
 8003d5c:	f015 0506 	ands.w	r5, r5, #6
 8003d60:	d106      	bne.n	8003d70 <_printf_common+0x48>
 8003d62:	f104 0a19 	add.w	sl, r4, #25
 8003d66:	68e3      	ldr	r3, [r4, #12]
 8003d68:	6832      	ldr	r2, [r6, #0]
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	42ab      	cmp	r3, r5
 8003d6e:	dc2b      	bgt.n	8003dc8 <_printf_common+0xa0>
 8003d70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d74:	6822      	ldr	r2, [r4, #0]
 8003d76:	3b00      	subs	r3, #0
 8003d78:	bf18      	it	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	0692      	lsls	r2, r2, #26
 8003d7e:	d430      	bmi.n	8003de2 <_printf_common+0xba>
 8003d80:	4641      	mov	r1, r8
 8003d82:	4638      	mov	r0, r7
 8003d84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d88:	47c8      	blx	r9
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	d023      	beq.n	8003dd6 <_printf_common+0xae>
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	6922      	ldr	r2, [r4, #16]
 8003d92:	f003 0306 	and.w	r3, r3, #6
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	bf14      	ite	ne
 8003d9a:	2500      	movne	r5, #0
 8003d9c:	6833      	ldreq	r3, [r6, #0]
 8003d9e:	f04f 0600 	mov.w	r6, #0
 8003da2:	bf08      	it	eq
 8003da4:	68e5      	ldreq	r5, [r4, #12]
 8003da6:	f104 041a 	add.w	r4, r4, #26
 8003daa:	bf08      	it	eq
 8003dac:	1aed      	subeq	r5, r5, r3
 8003dae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003db2:	bf08      	it	eq
 8003db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bfc4      	itt	gt
 8003dbc:	1a9b      	subgt	r3, r3, r2
 8003dbe:	18ed      	addgt	r5, r5, r3
 8003dc0:	42b5      	cmp	r5, r6
 8003dc2:	d11a      	bne.n	8003dfa <_printf_common+0xd2>
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	e008      	b.n	8003dda <_printf_common+0xb2>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	4652      	mov	r2, sl
 8003dcc:	4641      	mov	r1, r8
 8003dce:	4638      	mov	r0, r7
 8003dd0:	47c8      	blx	r9
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	d103      	bne.n	8003dde <_printf_common+0xb6>
 8003dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dde:	3501      	adds	r5, #1
 8003de0:	e7c1      	b.n	8003d66 <_printf_common+0x3e>
 8003de2:	2030      	movs	r0, #48	@ 0x30
 8003de4:	18e1      	adds	r1, r4, r3
 8003de6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003df0:	4422      	add	r2, r4
 8003df2:	3302      	adds	r3, #2
 8003df4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003df8:	e7c2      	b.n	8003d80 <_printf_common+0x58>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	4622      	mov	r2, r4
 8003dfe:	4641      	mov	r1, r8
 8003e00:	4638      	mov	r0, r7
 8003e02:	47c8      	blx	r9
 8003e04:	3001      	adds	r0, #1
 8003e06:	d0e6      	beq.n	8003dd6 <_printf_common+0xae>
 8003e08:	3601      	adds	r6, #1
 8003e0a:	e7d9      	b.n	8003dc0 <_printf_common+0x98>

08003e0c <_printf_i>:
 8003e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e10:	7e0f      	ldrb	r7, [r1, #24]
 8003e12:	4691      	mov	r9, r2
 8003e14:	2f78      	cmp	r7, #120	@ 0x78
 8003e16:	4680      	mov	r8, r0
 8003e18:	460c      	mov	r4, r1
 8003e1a:	469a      	mov	sl, r3
 8003e1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e22:	d807      	bhi.n	8003e34 <_printf_i+0x28>
 8003e24:	2f62      	cmp	r7, #98	@ 0x62
 8003e26:	d80a      	bhi.n	8003e3e <_printf_i+0x32>
 8003e28:	2f00      	cmp	r7, #0
 8003e2a:	f000 80d3 	beq.w	8003fd4 <_printf_i+0x1c8>
 8003e2e:	2f58      	cmp	r7, #88	@ 0x58
 8003e30:	f000 80ba 	beq.w	8003fa8 <_printf_i+0x19c>
 8003e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e3c:	e03a      	b.n	8003eb4 <_printf_i+0xa8>
 8003e3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e42:	2b15      	cmp	r3, #21
 8003e44:	d8f6      	bhi.n	8003e34 <_printf_i+0x28>
 8003e46:	a101      	add	r1, pc, #4	@ (adr r1, 8003e4c <_printf_i+0x40>)
 8003e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e4c:	08003ea5 	.word	0x08003ea5
 8003e50:	08003eb9 	.word	0x08003eb9
 8003e54:	08003e35 	.word	0x08003e35
 8003e58:	08003e35 	.word	0x08003e35
 8003e5c:	08003e35 	.word	0x08003e35
 8003e60:	08003e35 	.word	0x08003e35
 8003e64:	08003eb9 	.word	0x08003eb9
 8003e68:	08003e35 	.word	0x08003e35
 8003e6c:	08003e35 	.word	0x08003e35
 8003e70:	08003e35 	.word	0x08003e35
 8003e74:	08003e35 	.word	0x08003e35
 8003e78:	08003fbb 	.word	0x08003fbb
 8003e7c:	08003ee3 	.word	0x08003ee3
 8003e80:	08003f75 	.word	0x08003f75
 8003e84:	08003e35 	.word	0x08003e35
 8003e88:	08003e35 	.word	0x08003e35
 8003e8c:	08003fdd 	.word	0x08003fdd
 8003e90:	08003e35 	.word	0x08003e35
 8003e94:	08003ee3 	.word	0x08003ee3
 8003e98:	08003e35 	.word	0x08003e35
 8003e9c:	08003e35 	.word	0x08003e35
 8003ea0:	08003f7d 	.word	0x08003f7d
 8003ea4:	6833      	ldr	r3, [r6, #0]
 8003ea6:	1d1a      	adds	r2, r3, #4
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6032      	str	r2, [r6, #0]
 8003eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003eb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e09e      	b.n	8003ff6 <_printf_i+0x1ea>
 8003eb8:	6833      	ldr	r3, [r6, #0]
 8003eba:	6820      	ldr	r0, [r4, #0]
 8003ebc:	1d19      	adds	r1, r3, #4
 8003ebe:	6031      	str	r1, [r6, #0]
 8003ec0:	0606      	lsls	r6, r0, #24
 8003ec2:	d501      	bpl.n	8003ec8 <_printf_i+0xbc>
 8003ec4:	681d      	ldr	r5, [r3, #0]
 8003ec6:	e003      	b.n	8003ed0 <_printf_i+0xc4>
 8003ec8:	0645      	lsls	r5, r0, #25
 8003eca:	d5fb      	bpl.n	8003ec4 <_printf_i+0xb8>
 8003ecc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ed0:	2d00      	cmp	r5, #0
 8003ed2:	da03      	bge.n	8003edc <_printf_i+0xd0>
 8003ed4:	232d      	movs	r3, #45	@ 0x2d
 8003ed6:	426d      	negs	r5, r5
 8003ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003edc:	230a      	movs	r3, #10
 8003ede:	4859      	ldr	r0, [pc, #356]	@ (8004044 <_printf_i+0x238>)
 8003ee0:	e011      	b.n	8003f06 <_printf_i+0xfa>
 8003ee2:	6821      	ldr	r1, [r4, #0]
 8003ee4:	6833      	ldr	r3, [r6, #0]
 8003ee6:	0608      	lsls	r0, r1, #24
 8003ee8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003eec:	d402      	bmi.n	8003ef4 <_printf_i+0xe8>
 8003eee:	0649      	lsls	r1, r1, #25
 8003ef0:	bf48      	it	mi
 8003ef2:	b2ad      	uxthmi	r5, r5
 8003ef4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ef6:	6033      	str	r3, [r6, #0]
 8003ef8:	bf14      	ite	ne
 8003efa:	230a      	movne	r3, #10
 8003efc:	2308      	moveq	r3, #8
 8003efe:	4851      	ldr	r0, [pc, #324]	@ (8004044 <_printf_i+0x238>)
 8003f00:	2100      	movs	r1, #0
 8003f02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f06:	6866      	ldr	r6, [r4, #4]
 8003f08:	2e00      	cmp	r6, #0
 8003f0a:	bfa8      	it	ge
 8003f0c:	6821      	ldrge	r1, [r4, #0]
 8003f0e:	60a6      	str	r6, [r4, #8]
 8003f10:	bfa4      	itt	ge
 8003f12:	f021 0104 	bicge.w	r1, r1, #4
 8003f16:	6021      	strge	r1, [r4, #0]
 8003f18:	b90d      	cbnz	r5, 8003f1e <_printf_i+0x112>
 8003f1a:	2e00      	cmp	r6, #0
 8003f1c:	d04b      	beq.n	8003fb6 <_printf_i+0x1aa>
 8003f1e:	4616      	mov	r6, r2
 8003f20:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f24:	fb03 5711 	mls	r7, r3, r1, r5
 8003f28:	5dc7      	ldrb	r7, [r0, r7]
 8003f2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f2e:	462f      	mov	r7, r5
 8003f30:	42bb      	cmp	r3, r7
 8003f32:	460d      	mov	r5, r1
 8003f34:	d9f4      	bls.n	8003f20 <_printf_i+0x114>
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d10b      	bne.n	8003f52 <_printf_i+0x146>
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	07df      	lsls	r7, r3, #31
 8003f3e:	d508      	bpl.n	8003f52 <_printf_i+0x146>
 8003f40:	6923      	ldr	r3, [r4, #16]
 8003f42:	6861      	ldr	r1, [r4, #4]
 8003f44:	4299      	cmp	r1, r3
 8003f46:	bfde      	ittt	le
 8003f48:	2330      	movle	r3, #48	@ 0x30
 8003f4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f52:	1b92      	subs	r2, r2, r6
 8003f54:	6122      	str	r2, [r4, #16]
 8003f56:	464b      	mov	r3, r9
 8003f58:	4621      	mov	r1, r4
 8003f5a:	4640      	mov	r0, r8
 8003f5c:	f8cd a000 	str.w	sl, [sp]
 8003f60:	aa03      	add	r2, sp, #12
 8003f62:	f7ff fee1 	bl	8003d28 <_printf_common>
 8003f66:	3001      	adds	r0, #1
 8003f68:	d14a      	bne.n	8004000 <_printf_i+0x1f4>
 8003f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6e:	b004      	add	sp, #16
 8003f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	f043 0320 	orr.w	r3, r3, #32
 8003f7a:	6023      	str	r3, [r4, #0]
 8003f7c:	2778      	movs	r7, #120	@ 0x78
 8003f7e:	4832      	ldr	r0, [pc, #200]	@ (8004048 <_printf_i+0x23c>)
 8003f80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	6831      	ldr	r1, [r6, #0]
 8003f88:	061f      	lsls	r7, r3, #24
 8003f8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f8e:	d402      	bmi.n	8003f96 <_printf_i+0x18a>
 8003f90:	065f      	lsls	r7, r3, #25
 8003f92:	bf48      	it	mi
 8003f94:	b2ad      	uxthmi	r5, r5
 8003f96:	6031      	str	r1, [r6, #0]
 8003f98:	07d9      	lsls	r1, r3, #31
 8003f9a:	bf44      	itt	mi
 8003f9c:	f043 0320 	orrmi.w	r3, r3, #32
 8003fa0:	6023      	strmi	r3, [r4, #0]
 8003fa2:	b11d      	cbz	r5, 8003fac <_printf_i+0x1a0>
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	e7ab      	b.n	8003f00 <_printf_i+0xf4>
 8003fa8:	4826      	ldr	r0, [pc, #152]	@ (8004044 <_printf_i+0x238>)
 8003faa:	e7e9      	b.n	8003f80 <_printf_i+0x174>
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	f023 0320 	bic.w	r3, r3, #32
 8003fb2:	6023      	str	r3, [r4, #0]
 8003fb4:	e7f6      	b.n	8003fa4 <_printf_i+0x198>
 8003fb6:	4616      	mov	r6, r2
 8003fb8:	e7bd      	b.n	8003f36 <_printf_i+0x12a>
 8003fba:	6833      	ldr	r3, [r6, #0]
 8003fbc:	6825      	ldr	r5, [r4, #0]
 8003fbe:	1d18      	adds	r0, r3, #4
 8003fc0:	6961      	ldr	r1, [r4, #20]
 8003fc2:	6030      	str	r0, [r6, #0]
 8003fc4:	062e      	lsls	r6, r5, #24
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	d501      	bpl.n	8003fce <_printf_i+0x1c2>
 8003fca:	6019      	str	r1, [r3, #0]
 8003fcc:	e002      	b.n	8003fd4 <_printf_i+0x1c8>
 8003fce:	0668      	lsls	r0, r5, #25
 8003fd0:	d5fb      	bpl.n	8003fca <_printf_i+0x1be>
 8003fd2:	8019      	strh	r1, [r3, #0]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	4616      	mov	r6, r2
 8003fd8:	6123      	str	r3, [r4, #16]
 8003fda:	e7bc      	b.n	8003f56 <_printf_i+0x14a>
 8003fdc:	6833      	ldr	r3, [r6, #0]
 8003fde:	2100      	movs	r1, #0
 8003fe0:	1d1a      	adds	r2, r3, #4
 8003fe2:	6032      	str	r2, [r6, #0]
 8003fe4:	681e      	ldr	r6, [r3, #0]
 8003fe6:	6862      	ldr	r2, [r4, #4]
 8003fe8:	4630      	mov	r0, r6
 8003fea:	f000 f859 	bl	80040a0 <memchr>
 8003fee:	b108      	cbz	r0, 8003ff4 <_printf_i+0x1e8>
 8003ff0:	1b80      	subs	r0, r0, r6
 8003ff2:	6060      	str	r0, [r4, #4]
 8003ff4:	6863      	ldr	r3, [r4, #4]
 8003ff6:	6123      	str	r3, [r4, #16]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ffe:	e7aa      	b.n	8003f56 <_printf_i+0x14a>
 8004000:	4632      	mov	r2, r6
 8004002:	4649      	mov	r1, r9
 8004004:	4640      	mov	r0, r8
 8004006:	6923      	ldr	r3, [r4, #16]
 8004008:	47d0      	blx	sl
 800400a:	3001      	adds	r0, #1
 800400c:	d0ad      	beq.n	8003f6a <_printf_i+0x15e>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	079b      	lsls	r3, r3, #30
 8004012:	d413      	bmi.n	800403c <_printf_i+0x230>
 8004014:	68e0      	ldr	r0, [r4, #12]
 8004016:	9b03      	ldr	r3, [sp, #12]
 8004018:	4298      	cmp	r0, r3
 800401a:	bfb8      	it	lt
 800401c:	4618      	movlt	r0, r3
 800401e:	e7a6      	b.n	8003f6e <_printf_i+0x162>
 8004020:	2301      	movs	r3, #1
 8004022:	4632      	mov	r2, r6
 8004024:	4649      	mov	r1, r9
 8004026:	4640      	mov	r0, r8
 8004028:	47d0      	blx	sl
 800402a:	3001      	adds	r0, #1
 800402c:	d09d      	beq.n	8003f6a <_printf_i+0x15e>
 800402e:	3501      	adds	r5, #1
 8004030:	68e3      	ldr	r3, [r4, #12]
 8004032:	9903      	ldr	r1, [sp, #12]
 8004034:	1a5b      	subs	r3, r3, r1
 8004036:	42ab      	cmp	r3, r5
 8004038:	dcf2      	bgt.n	8004020 <_printf_i+0x214>
 800403a:	e7eb      	b.n	8004014 <_printf_i+0x208>
 800403c:	2500      	movs	r5, #0
 800403e:	f104 0619 	add.w	r6, r4, #25
 8004042:	e7f5      	b.n	8004030 <_printf_i+0x224>
 8004044:	080046b3 	.word	0x080046b3
 8004048:	080046c4 	.word	0x080046c4

0800404c <memmove>:
 800404c:	4288      	cmp	r0, r1
 800404e:	b510      	push	{r4, lr}
 8004050:	eb01 0402 	add.w	r4, r1, r2
 8004054:	d902      	bls.n	800405c <memmove+0x10>
 8004056:	4284      	cmp	r4, r0
 8004058:	4623      	mov	r3, r4
 800405a:	d807      	bhi.n	800406c <memmove+0x20>
 800405c:	1e43      	subs	r3, r0, #1
 800405e:	42a1      	cmp	r1, r4
 8004060:	d008      	beq.n	8004074 <memmove+0x28>
 8004062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800406a:	e7f8      	b.n	800405e <memmove+0x12>
 800406c:	4601      	mov	r1, r0
 800406e:	4402      	add	r2, r0
 8004070:	428a      	cmp	r2, r1
 8004072:	d100      	bne.n	8004076 <memmove+0x2a>
 8004074:	bd10      	pop	{r4, pc}
 8004076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800407a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800407e:	e7f7      	b.n	8004070 <memmove+0x24>

08004080 <_sbrk_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	2300      	movs	r3, #0
 8004084:	4d05      	ldr	r5, [pc, #20]	@ (800409c <_sbrk_r+0x1c>)
 8004086:	4604      	mov	r4, r0
 8004088:	4608      	mov	r0, r1
 800408a:	602b      	str	r3, [r5, #0]
 800408c:	f7fd f84a 	bl	8001124 <_sbrk>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_sbrk_r+0x1a>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_sbrk_r+0x1a>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	20000630 	.word	0x20000630

080040a0 <memchr>:
 80040a0:	4603      	mov	r3, r0
 80040a2:	b510      	push	{r4, lr}
 80040a4:	b2c9      	uxtb	r1, r1
 80040a6:	4402      	add	r2, r0
 80040a8:	4293      	cmp	r3, r2
 80040aa:	4618      	mov	r0, r3
 80040ac:	d101      	bne.n	80040b2 <memchr+0x12>
 80040ae:	2000      	movs	r0, #0
 80040b0:	e003      	b.n	80040ba <memchr+0x1a>
 80040b2:	7804      	ldrb	r4, [r0, #0]
 80040b4:	3301      	adds	r3, #1
 80040b6:	428c      	cmp	r4, r1
 80040b8:	d1f6      	bne.n	80040a8 <memchr+0x8>
 80040ba:	bd10      	pop	{r4, pc}

080040bc <memcpy>:
 80040bc:	440a      	add	r2, r1
 80040be:	4291      	cmp	r1, r2
 80040c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80040c4:	d100      	bne.n	80040c8 <memcpy+0xc>
 80040c6:	4770      	bx	lr
 80040c8:	b510      	push	{r4, lr}
 80040ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040ce:	4291      	cmp	r1, r2
 80040d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040d4:	d1f9      	bne.n	80040ca <memcpy+0xe>
 80040d6:	bd10      	pop	{r4, pc}

080040d8 <_realloc_r>:
 80040d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040dc:	4680      	mov	r8, r0
 80040de:	4615      	mov	r5, r2
 80040e0:	460c      	mov	r4, r1
 80040e2:	b921      	cbnz	r1, 80040ee <_realloc_r+0x16>
 80040e4:	4611      	mov	r1, r2
 80040e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040ea:	f7ff bc39 	b.w	8003960 <_malloc_r>
 80040ee:	b92a      	cbnz	r2, 80040fc <_realloc_r+0x24>
 80040f0:	f7ff fbcc 	bl	800388c <_free_r>
 80040f4:	2400      	movs	r4, #0
 80040f6:	4620      	mov	r0, r4
 80040f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040fc:	f000 f81a 	bl	8004134 <_malloc_usable_size_r>
 8004100:	4285      	cmp	r5, r0
 8004102:	4606      	mov	r6, r0
 8004104:	d802      	bhi.n	800410c <_realloc_r+0x34>
 8004106:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800410a:	d8f4      	bhi.n	80040f6 <_realloc_r+0x1e>
 800410c:	4629      	mov	r1, r5
 800410e:	4640      	mov	r0, r8
 8004110:	f7ff fc26 	bl	8003960 <_malloc_r>
 8004114:	4607      	mov	r7, r0
 8004116:	2800      	cmp	r0, #0
 8004118:	d0ec      	beq.n	80040f4 <_realloc_r+0x1c>
 800411a:	42b5      	cmp	r5, r6
 800411c:	462a      	mov	r2, r5
 800411e:	4621      	mov	r1, r4
 8004120:	bf28      	it	cs
 8004122:	4632      	movcs	r2, r6
 8004124:	f7ff ffca 	bl	80040bc <memcpy>
 8004128:	4621      	mov	r1, r4
 800412a:	4640      	mov	r0, r8
 800412c:	f7ff fbae 	bl	800388c <_free_r>
 8004130:	463c      	mov	r4, r7
 8004132:	e7e0      	b.n	80040f6 <_realloc_r+0x1e>

08004134 <_malloc_usable_size_r>:
 8004134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004138:	1f18      	subs	r0, r3, #4
 800413a:	2b00      	cmp	r3, #0
 800413c:	bfbc      	itt	lt
 800413e:	580b      	ldrlt	r3, [r1, r0]
 8004140:	18c0      	addlt	r0, r0, r3
 8004142:	4770      	bx	lr

08004144 <_init>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	bf00      	nop
 8004148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414a:	bc08      	pop	{r3}
 800414c:	469e      	mov	lr, r3
 800414e:	4770      	bx	lr

08004150 <_fini>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	bf00      	nop
 8004154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004156:	bc08      	pop	{r3}
 8004158:	469e      	mov	lr, r3
 800415a:	4770      	bx	lr
